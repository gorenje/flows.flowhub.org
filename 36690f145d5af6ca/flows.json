[{"id":"36690f145d5af6ca","type":"tab","label":"[JSON-Schema] Simple msg validator","disabled":false,"info":"::: aim\n\nCreate a simple validation for `msg` structure.\n\n:::\n\n::: requirements\n\n- node package [node-red-contrib-full-msg-json-schema-validation](https://flows.nodered.org/node/node-red-contrib-full-msg-json-schema-validation) is required for validation.\n\n:::\n\n::: discussion\n\nDistributing code via flows is a simple way of code reuse.\n\nHowever the nature of Node-RED is such that a `msg` object can contain anything and everything, and there is no types nor verification that an `msg` contains everything needed by a flow.\n\nAn example of a flow that needs specific data is the [Jmap email flow](https://flowhub.org/f/90196166b57a77e5). It requires specific properties on the `msg` object but it isn't clear which or where.\n\nArising from this [discussion](https://discourse.nodered.org/t/requiring-a-msg-structure-enforcing-the-presence-of-fields-and-attributes/81432), for me, the msg-json-schema-validation node seems the simplest and clearest of all the JSONschema validators:\n\n- it requires no http server for serving up the schema\n- schema is defined in the node itself for easy accessibility.\n\nGoing beyond this, it would be great have the UI of the [Swagger Nodes](https://flows.nodered.org/node/node-red-node-swagger) to define the schema. The Swaggeer nodes are attached to the Http-In nodes and therefore cannot be used outside of the context of an http-in node.\n\n:::\n","env":[]},{"id":"411215d363b685f0","type":"function","z":"36690f145d5af6ca","name":"function 4","func":"msg.payload = {\n    email: {\n        cc: \"someemail\",\n        to: \"asdsa\",\n        from: \"dddd\",\n        subject: \"hello world\"\n        \n    }\n\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":773,"y":676,"wires":[["40b10516ce12a388"]]},{"id":"d40a593d83f8e4e0","type":"inject","z":"36690f145d5af6ca","name":"Trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":481,"y":568,"wires":[["411215d363b685f0"]]},{"id":"40b10516ce12a388","type":"json-full-schema-validator","z":"36690f145d5af6ca","name":"","property":"payload.email","propertyType":"msg","func":"{\n    \"title\": \"Email\",\n        \"type\": \"object\",\n            \"required\": [\n                \"to\",\n                \"from\",\n                \"subject\"\n            ],\n                \"properties\": {\n        \"from\": {\n            \"type\": \"string\",\n                \"description\": \"Sender email.\"\n        },\n        \"from_name\": {\n            \"type\": \"string\",\n                \"description\": \"Senders full name.\"\n        },\n        \"to\": {\n            \"type\": \"string\",\n                \"description\": \"Receiver email.\"\n        },\n        \"cc\": {\n            \"type\": \"string\",\n                \"description\": \"CC email or blank.\"\n        },\n        \"bcc\": {\n            \"type\": \"string\",\n                \"description\": \"BCC email or blank.\"\n        },\n        \"subject\": {\n            \"type\": \"string\",\n                \"description\": \"Subject Line of email\"\n        }\n        \n    }\n}\n","x":1112,"y":563,"wires":[["c52f18b3e30d5d4a"],["2c72f1ae7893be13"]]},{"id":"c52f18b3e30d5d4a","type":"debug","z":"36690f145d5af6ca","name":"is ok","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1418,"y":464,"wires":[]},{"id":"2c72f1ae7893be13","type":"debug","z":"36690f145d5af6ca","name":"is bad","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1414,"y":732,"wires":[]}]