[{"id":"36690f145d5af6ca","type":"tab","label":"[Validation] JSON Schema - Simple msg validation","disabled":false,"info":"::: aim\n\nCreate a simple validation for `msg` structure.\n\n:::\n\n::: requirements\n\n- node package [node-red-contrib-full-msg-json-schema-validation](https://flows.nodered.org/node/node-red-contrib-full-msg-json-schema-validation) is required for validation.\n\n:::\n\n::: discussion\n\nDistributing code via flows is a simple way of code reuse.\n\nHowever the nature of Node-RED is such that a `msg` object can contain anything and everything, and there is no types nor verification that an `msg` contains everything needed for a flow.\n\nAn example of a flow that needs specific data is the [Jmap email flow](https://flowhub.org/f/90196166b57a77e5). It requires specific properties on the `msg` object but it isn't clear which or where.\n\nArising from this [discussion](https://discourse.nodered.org/t/requiring-a-msg-structure-enforcing-the-presence-of-fields-and-attributes/81432), for me, the msg-json-schema-validation node seems the simplest and clearest of all the JSONschema validators:\n\n- it requires no http server for serving up the schema\n- schema is defined in the node itself for easy accessibility.\n\nGoing beyond this, it would be great have the UI of the [Swagger Nodes](https://flows.nodered.org/node/node-red-node-swagger) to define the schema. The Swaggeer nodes are attached to the Http-In nodes and therefore cannot be used outside of the context of an http-in node.\n\n**Update:**\n\nAs pointed out by [@dceejay](https://discourse.nodered.org/t/requiring-a-msg-structure-enforcing-the-presence-of-fields-and-attributes/81432/11?u=gregorius) there is a schema validator built into the JSON parser node. So as a comparison, I tried that. Turns out to be just as good.\n\nObviously using an inbuilt node, even if it requires an extra step of reconverting the string to an object, is better than having to include an extra node package.\n\n\n**Update2:**\n\nAdded a <a class=\"ahl-group-only\" data-ids=\"cd47a3c343d302a0\">self built validator</a> based on the [`ajv`](https://www.npmjs.com/package/ajv) package. This package is used by the other validators, so it is assured that it has been included. The reason for its creation is that I need a validator that works on the `msg` directly, not on the the `msg.payload` property. This is only possible with a self-built validator.\n\n:::\n","env":[]},{"id":"3e5057c4763fdfba","type":"group","z":"36690f145d5af6ca","name":"msg validation using extra node package","style":{"label":true},"nodes":["40b10516ce12a388","c52f18b3e30d5d4a","2c72f1ae7893be13"],"x":1299,"y":310,"w":596,"h":202},{"id":"3643183493199ce3","type":"group","z":"36690f145d5af6ca","name":"msg validation using inbuilt JSON node","style":{"label":true},"nodes":["f98c409f4c47fcab","e34c4c79381ae198","5d41b42457feadb5","080b14a4744ac08c","76cf23ef7c23d379"],"x":1299,"y":581,"w":699,"h":194},{"id":"cd47a3c343d302a0","type":"group","z":"36690f145d5af6ca","name":"Self built","style":{"label":true},"nodes":["dab31766dd989426","d6582f9345c96036","2dbfbbe6842463cf","b975a34db32c262a"],"x":1299,"y":888,"w":497,"h":152},{"id":"411215d363b685f0","type":"function","z":"36690f145d5af6ca","name":"valid data","func":"msg.payload = {\n    email: {\n        cc: \"someemail\",\n        to: \"asdsa\",\n        from: \"dddd\",\n        subject: \"hello world\"\n        \n    }\n\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":705,"y":621,"wires":[["40b10516ce12a388","f98c409f4c47fcab","d6582f9345c96036"]]},{"id":"d40a593d83f8e4e0","type":"inject","z":"36690f145d5af6ca","name":"Trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":156,"y":621,"wires":[["7b99ef24c3120c32"]]},{"id":"40b10516ce12a388","type":"json-full-schema-validator","z":"36690f145d5af6ca","d":true,"g":"3e5057c4763fdfba","name":"","property":"payload","propertyType":"msg","func":"","x":1445,"y":465,"wires":[["c52f18b3e30d5d4a"],["2c72f1ae7893be13"]]},{"id":"c52f18b3e30d5d4a","type":"debug","z":"36690f145d5af6ca","g":"3e5057c4763fdfba","name":"is ok","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1799,"y":351,"wires":[]},{"id":"2c72f1ae7893be13","type":"debug","z":"36690f145d5af6ca","g":"3e5057c4763fdfba","name":"is bad","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1779,"y":471,"wires":[]},{"id":"f98c409f4c47fcab","type":"json","z":"36690f145d5af6ca","d":true,"g":"3643183493199ce3","name":"","property":"payload","action":"","pretty":false,"x":1375,"y":716,"wires":[["76cf23ef7c23d379"]]},{"id":"e34c4c79381ae198","type":"debug","z":"36690f145d5af6ca","g":"3643183493199ce3","name":"JSON Node - is bad","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1640,"y":622,"wires":[]},{"id":"7b99ef24c3120c32","type":"template","z":"36690f145d5af6ca","name":"schema","field":"schema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Email data required on the msg object\",\n    \"type\": \"object\",\n    \"required\": [\n        \"email\"\n    ],\n    \"properties\": {\n        \"email\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"to\",\n                \"from\",\n                \"subject\"\n            ],\n            \"properties\": {\n                \"from\": {\n                    \"type\": \"string\",\n                    \"description\": \"Sender email.\"\n                },\n                \"from_name\": {\n                    \"type\": \"string\",\n                    \"description\": \"Senders full name.\"\n                },\n                \"to\": {\n                    \"type\": \"string\",\n                    \"description\": \"Receiver email.\"\n                },\n                \"cc\": {\n                    \"type\": \"string\",\n                    \"description\": \"CC email or blank.\"\n                },\n                \"bcc\": {\n                    \"type\": \"string\",\n                    \"description\": \"BCC email or blank.\"\n                },\n                \"subject\": {\n                    \"type\": \"string\",\n                    \"description\": \"Subject Line of email\"\n                }\n            }\n        }\n    }\n}","output":"json","x":350,"y":622,"wires":[["411215d363b685f0","ecb9a1b315a52496","90ce230149995eca"]]},{"id":"ecb9a1b315a52496","type":"function","z":"36690f145d5af6ca","name":"invalid data - missing from","func":"msg.payload = {\n    email: {\n        cc: \"someemail\",\n        to: \"asdsa\",\n        subject: \"hello world\"\n        \n    }\n\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":645,"y":716,"wires":[["40b10516ce12a388","f98c409f4c47fcab","d6582f9345c96036"]]},{"id":"5d41b42457feadb5","type":"debug","z":"36690f145d5af6ca","g":"3643183493199ce3","name":"JSON node - is good","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1852,"y":734,"wires":[]},{"id":"080b14a4744ac08c","type":"catch","z":"36690f145d5af6ca","g":"3643183493199ce3","name":"","scope":["f98c409f4c47fcab"],"uncaught":false,"x":1389,"y":690,"wires":[["e34c4c79381ae198"]]},{"id":"90ce230149995eca","type":"function","z":"36690f145d5af6ca","name":"invalid data - missing from and to","func":"msg.payload = {\n    email: {\n        cc: \"someemail\",\n        subject: \"hello world\"\n        \n    }\n\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":625,"y":811,"wires":[["40b10516ce12a388","f98c409f4c47fcab","d6582f9345c96036"]]},{"id":"76cf23ef7c23d379","type":"json","z":"36690f145d5af6ca","g":"3643183493199ce3","name":"","property":"payload","action":"","pretty":false,"x":1587,"y":734,"wires":[["5d41b42457feadb5"]]},{"id":"d6582f9345c96036","type":"function","z":"36690f145d5af6ca","g":"cd47a3c343d302a0","name":"JSON Schema validator","func":"var validator = new Ajv({\n    allErrors: true,\n    messages: true\n})\n\nconst validate = validator.compile(msg.schema)\n\nconst v = validate(msg.payload);\n\nif ( !v ) {\n    msg.errors = validate.errors;\n    node.error(\"validation failed\", msg)\n} else {\n    delete msg.schema;\n    return msg;\n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"Ajv","module":"ajv"}],"x":1435,"y":969,"wires":[["dab31766dd989426"]],"outputLabels":["ok","failed"]},{"id":"2dbfbbe6842463cf","type":"debug","z":"36690f145d5af6ca","g":"cd47a3c343d302a0","name":"Self built is bad","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1669,"y":999,"wires":[]},{"id":"dab31766dd989426","type":"debug","z":"36690f145d5af6ca","g":"cd47a3c343d302a0","name":"Self built is ok","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1670,"y":929,"wires":[]},{"id":"b975a34db32c262a","type":"catch","z":"36690f145d5af6ca","g":"cd47a3c343d302a0","name":"","scope":["d6582f9345c96036"],"uncaught":false,"x":1477,"y":999,"wires":[["2dbfbbe6842463cf"]]}]