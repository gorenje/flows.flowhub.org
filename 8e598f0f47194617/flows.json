[{"id":"8e598f0f47194617","type":"tab","label":"[NodeDev] Flow2Mermaid","disabled":false,"info":"::: aim\n\nCreate node that converts a Node-RED flow into a Mermaid flowchart diagram.\n\n:::\n\n::: requirements\n\n- [nodedev](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) node package\n- [development flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n### Example\n\n```mermaid\n%% change this to LR Node-RED like UML\ngraph LR\n239876c7e987f37e[\"LICENSE\"] --> c5b74c4967a7bdab[\"README.md\"]\nb0f5aa186d1ea530[\"package.json\"] --> 3cce2f8bb1c495cb[\"Flow2Mermaid.js\"]\nc5b74c4967a7bdab[\"README.md\"] --> b0f5aa186d1ea530[\"package.json\"]\n9e60077a6a476e0a[\"set package details and actions here\"] --> 3182c50022f0c752{\"randompackagename\"}\n4b67accc1f0ada3b[\"change\"] --> 239876c7e987f37e[\"LICENSE\"]\n3182c50022f0c752{\"randompackagename\"} --> |true| 59394463ac53a6cd{\"noderedinstall\"}\n3182c50022f0c752{\"randompackagename\"} --> |false| 239876c7e987f37e[\"LICENSE\"]\n59394463ac53a6cd{\"noderedinstall\"} --> |true| 4b67accc1f0ada3b[\"change\"]\n59394463ac53a6cd{\"noderedinstall\"} --> |false| 239876c7e987f37e[\"LICENSE\"]\n3cce2f8bb1c495cb[\"Flow2Mermaid.js\"] --> 4934281540e50042[\"Flow2Mermaid.html\"]\n4934281540e50042[\"Flow2Mermaid.html\"] --> 4abc3509309ea1da{{\"#93;nodedev-backend#91; entry point\"}}\n```\n\n\n### Artifacts\n\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow2uml)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flow2uml)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flow2uml)\n\n### Related flows\n\n- [Testing flow for trying out ideas](https://flowhub.org/f/6e54d62e53ab5b6d)\n- [Usage example](https://flowhub.org/f/666972381aaa960e)\n\n","env":[]},{"id":"4536c694af321942","type":"group","z":"8e598f0f47194617","name":"Step 1: Install this flow for local development","style":{"label":true},"nodes":["a574ecd6a6f16eeb"],"x":370.6666259765625,"y":289.25,"w":472,"h":82},{"id":"ef057387c6b924cc","type":"group","z":"8e598f0f47194617","name":"flow that provides the basis for this node","style":{"label":true},"nodes":["9c5ca157f30c488b"],"x":370.6666259765625,"y":578.1666870117188,"w":452,"h":82},{"id":"dd208144c5b0a0e0","type":"group","z":"8e598f0f47194617","name":"Test the NodeFactory node to generate templates","style":{"label":true},"nodes":["375082c086e36a0e"],"x":370.6666259765625,"y":794.0000610351562,"w":318,"h":82},{"id":"573f456625b89be4","type":"group","z":"8e598f0f47194617","name":"example usage","style":{"label":true},"nodes":["a4f56a2e4c6dd41f"],"x":370.6666259765625,"y":686.0833740234375,"w":372,"h":82},{"id":"a9e74f2005129ff5","type":"group","z":"8e598f0f47194617","name":"Step 2: Install package locally into Node-RED","style":{"fill":"#e3f3d3","fill-opacity":"0.7","label":true},"nodes":["f03b01497c16c75c"],"x":370.6666259765625,"y":427,"w":293,"h":82},{"id":"239876c7e987f37e","type":"PkgFile","z":"8e598f0f47194617","name":"LICENSE","filename":"LICENSE","format":"markdown","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1364,"y":468.6666259765625,"wires":[["c5b74c4967a7bdab"]]},{"id":"b0f5aa186d1ea530","type":"PkgFile","z":"8e598f0f47194617","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"keywords\": [\n    \"node-red\", \"uml\", \"mermaid\"\n  ],\n\n  \"homepage\": \"https://github.com/{{githubowner}}/{{githubrepo}}#README.md\",\n  \"license\": \"SEE LICENSE IN https://github.com/{{githubowner}}/{{githubrepo}}/blob/main/LICENSE\",\n  \"author\": \"Gerrit Riessen <nodered@spreads-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=2.0.0\",\n    \"nodes\": {\n      \"flowtomermaid\": \"nodes/flow2mermaid.js\"\n    }\n  },\n\n  \"description\": \"Convert current flow tab to Mermaid flow diagram.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/{{githubowner}}/{{githubrepo}}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{githubowner}}/{{githubrepo}}/issues\"\n  }\n}\n","output":"str","x":1373,"y":567.6666259765625,"wires":[["3cce2f8bb1c495cb"]]},{"id":"c5b74c4967a7bdab","type":"PkgFile","z":"8e598f0f47194617","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"## Flow to UML (Mermaid flowchart)\n\nConvert the current flow tab to a Mermaid flowchart diagram.\n\n**Warning**: will replace the contents the *info* panel of the node.\n\nAlso this is best used with Node-RED 3.1.x because that has inbuilt support for rendering [Mermaid](https://mermaid.js.org/) diagrams.\n\n## Generating diagram\n\nIn the property panel, hit the generate button:\n\n![img](https://cdn.openmindmap.org/content/1696066692869_Screen_Shot_2023-09-30_at_11.35.14.png)\n\nSave the changes by clicking done and then there should be an image in the info box:\n\n![img](https://cdn.openmindmap.org/content/1696066701424_Screen_Shot_2023-09-30_at_11.37.53.png)\n\n## Discussion\n\nThis is a purely editor-based node with no interaction with the Node-RED server. The diagram generated is based on the current flow in the editor not the flow that has been deployed. Therefore any changes made in the editor will be reflected in the diagram generated.\n\n## Mermaid Syntax\n\nBeaware that Node-RED supports v9.4.3 of Mermaid and that the the [live editor](https://mermaid.live), at time of writing, at 10.4.0 - there are differences.\n\nIf there is a syntax error:\n\n![img](https://cdn.openmindmap.org/content/1696066496021_Screen_Shot_2023-09-30_at_11.34.31.png)\n\nThen you can edit the Mermaid code in the info tab:\n\n![img](https://cdn.openmindmap.org/content/1696066696690_Screen_Shot_2023-09-30_at_11.35.57.png)\n\nSave the changes and the info box will either show the image or not.\n\n### Artifacts\n\n- [Flow that maintains](https://flowhub.org/f/8e598f0f47194617) the codebase\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow2uml)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flow2uml)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flow2uml)\n\n","output":"str","x":1373,"y":514.6666259765625,"wires":[["b0f5aa186d1ea530"]]},{"id":"a574ecd6a6f16eeb","type":"FlowHubPull","z":"8e598f0f47194617","g":"4536c694af321942","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":606.6666259765625,"y":330.25,"wires":[[]]},{"id":"9c5ca157f30c488b","type":"FlowHubPull","z":"8e598f0f47194617","g":"ef057387c6b924cc","name":"","notab":false,"flowid":"6e54d62e53ab5b6d","flowname":"[Node-RED2UML] Convert Node-RED flow to Mermaid","flowrevision":"","x":596.6666259765625,"y":619.1666870117188,"wires":[[]]},{"id":"375082c086e36a0e","type":"NodeFactory","z":"8e598f0f47194617","g":"dd208144c5b0a0e0","name":"Generate Flow2Mermaid node","nodename":"Flow2Mermaid","color":"#C0DDFF","hasbutton":true,"hasinput":false,"outputcount":"0","category":"introspection","summary":"Generate a Mermaid flowchart diagram from the current flow tab.","description":"Generates a flow diagram using Mermaid and this flow. Node-RED 3.1.x how has support for Mermaid diagrams in the info boxes, so use that to display a diagram for the current flow.\n\n","icon":"font-awesome/fa-shower","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":false,"x":526.6666259765625,"y":835.0000610351562,"wires":[[]]},{"id":"3cce2f8bb1c495cb","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2Mermaid.js","filename":"nodes/flow2mermaid.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function Flow2MermaidFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    node.on(\"input\", function(msg, send, done) {\n        send(msg);\n        done();\n    });\n  }\n  RED.nodes.registerType(\"Flow2UML\", Flow2MermaidFunctionality);\n}\n","output":"str","x":1579.666603088379,"y":750.9999351501465,"wires":[["4934281540e50042"]]},{"id":"4934281540e50042","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2Mermaid.html","filename":"nodes/flow2mermaid.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n\n  function constructMermaid(nodes) {\n    var msg = {\n      payload: nodes\n    }\n\n    var nodes = msg.payload.filter((n) => {\n        return n.type != \"tab\" && n.type != \"group\"\n    })\n\n    var id2node = {};\n    for (var idx = 0; idx < nodes.length; idx++) {\n        var nd = nodes[idx];\n        id2node[nd.id] = nd;\n    }\n\n    var escapeForMermaid = (str) => {\n        return str.replaceAll(\n            \"&\", \"&amp;\"\n        ).replaceAll(\n            \"#\", \"#35;\"\n        ).replaceAll(\n            \"[\", \"#91;\"\n        ).replaceAll(\n            \"]\", \"#93;\"\n        ).replaceAll(\n            \"(\", \"#40;\"\n        ).replaceAll(\n            \")\", \"#41;\"\n        ).replaceAll(\n            \"|\", \"#124;\"\n        ).replaceAll(\n            \">\", \"&gt;\"\n        ).replaceAll(\n            \"<\", \"&lt;\"\n        ).replaceAll(\n            \"{\", \"#123;\"\n        ).replaceAll(\n            \"}\", \"#125;\"\n        ).replaceAll(\n            \"/\", \"#47;\"\n        )\n    };\n\n    var node2label = (nd, nme = undefined) => {\n        var labl = nd.name || nd.type;\n\n        if (nme) {\n            nme = \"|\" + escapeForMermaid(nme) + \"| \"\n        } else { nme = \"\" }\n\n        labl = escapeForMermaid(labl);\n\n        switch (nd.type) {\n            case \"switch\":\n            case \"join\":\n            case \"split\":\n                return nme + nd.id + \"{\\\"\" + labl + \"\\\"}\"\n\n            case \"link out\":\n                if ( nd.mode && nd.mode == \"return\") {\n                    return nme + nd.id + \"[\\\\Link Return/]\"    \n                }\n\n                if ( nd.name && !nd.name.match( /^link out/) ) {\n                    return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"                  \n                }\n\n                var targetNode = (nd.links && nd.links.length > 0 && ( id2node[nd.links[0]] || RED.nodes.node(nd.links[0]) ));\n                labl = escapeForMermaid((targetNode && targetNode.name) || nd.type)\n                return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n            case \"link in\":\n            case \"link call\":\n                labl = escapeForMermaid(nd.name || (nd.links && nd.links.length > 0 && id2node[nd.links[0]] && id2node[nd.links[0]].name) || nd.type)\n                if ( nd.mode && nd.mode == \"return\") {\n                    return nme + nd.id + \"[\\\\Link Return/]\"    \n                }\n                return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n            case \"junction\":\n                return nme + nd.id + \"((\\\"\" + labl + \"\\\"))\"\n\n            case \"debug\":\n                return nme + nd.id + \"(\\\"\" + labl + \"\\\")\"\n\n            default:\n                return nme + nd.id + \"[\\\"\" + labl + \"\\\"]\"\n        }\n    }\n\n    /* \n      we attach the mermaid array on the msg object because if an exception\n      happens, we can check how far this code got. That is by comparing the\n      contents of this array with the payload, we know which node caused\n      the exception.\n    */\n    msg.mermaid = [\n        \"%% change this to LR Node-RED like UML\",\n        \"graph \" + $('#node-input-direction').val()\n    ];\n\n    for (var idx = 0; idx < nodes.length; idx++) {\n        var nde = nodes[idx];\n\n        if (nde.links && nde.links.length > 0 && nde.type == \"link out\") {\n            for (var ldx = 0; ldx < nde.links.length; ldx++) {\n                /* link-out wire: only add a dashed link wire iff the node is included in this graph */\n                if (id2node[nde.links[ldx]]) {\n                    msg.mermaid.push(\n                        node2label(nde) + \" -.-> \" + nde.links[ldx]\n                    )\n                }\n            }\n        }\n\n        if (nde.wires && nde.wires.length > 0) {\n            if (nde.type == \"switch\") {\n                for (var odx = 0; odx < nde.wires.length; odx++) {\n                    for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                        msg.mermaid.push(\n                            node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], nde.rules[odx] && (nde.rules[odx].v || nde.rules[odx].t))\n                        )\n                    }\n                }\n            } else {\n                for (var wdx = 0; wdx < nde.wires[0].length; wdx++) {\n                  msg.mermaid.push(\n                      node2label(nde) + \" --> \" + node2label(id2node[nde.wires[0][wdx]])\n                  )\n                }\n            }\n        }\n    }\n\n    return msg.mermaid.join(\"\\n\");\n  }\n  \n  function obtainCurrentActiveFlow(node) {\n      var activeWorkspace = RED.workspaces.active();\n      var nodes = RED.nodes.groups(activeWorkspace);\n\n      nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n      nodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\n      RED.nodes.eachConfig(function (n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n          // Grab any config nodes scoped to this flow that don't\n          // require any flow-nodes to use them\n          nodes.push(n);\n        }\n      });\n\n      var parentNode = RED.nodes.workspace(\n        activeWorkspace\n      ) || RED.nodes.subflow(activeWorkspace);\n\n      nodes.unshift(parentNode);\n\n      var expNodes = RED.nodes.createExportableNodeSet(nodes)\n\n      // remove ourselves from the list of nodes.\n      try {\n        expNodes = expNodes.filter( (n) => { \n          return n.id != node.id \n        })\n      } catch (ex) {}\n\n      return expNodes;\n  };\n\n  RED.nodes.registerType('Flow2UML',{\n    color: '#C0DDFF',\n    icon: \"font-awesome/fa-shower\",\n    category: 'introspection',\n    paletteLabel: 'Flow to UML',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n      direction: {\n        value: \"TB\"\n      }\n    },\n\n    inputs: 0,\n    outputs: 0,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditprepare: function() {\n      var that = this;\n      \n      $('#node-input-direction').val(that.direction)\n\n      $('#node-input-generate-diagram-but').on('click', (e) => {\n        e.preventDefault();\n        var mermaidTxt = constructMermaid(obtainCurrentActiveFlow(that));\n        that.infoEditor.setValue(\"```mermaid\\n\" + mermaidTxt + \"\\n```\\n\");\n      })\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"Flow2UML\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-direction\"><i class=\"fa fa-tag\"></i> Direction</label>\n      <select id=\"node-input-direction\">\n        <option value=\"TB\">Top to Bottom</option>\n        <option value=\"LR\">Left to Right</option>\n      </select>\n    </div>\n\n    <div class=\"form-row\">\n      <button id=\"node-input-generate-diagram-but\"\n                  class=\"red-ui-button\">Generate Mermaid Diagram</button>\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"Flow2UML\">\n  <p>Generate a Mermaid flowchart diagram from the current flow tab.</p>\n  Generates a flow diagram using Mermaid and this flow. Node-RED 3.1.x how has support for Mermaid diagrams in the info boxes, so use that to display a diagram for the current flow.\n</script>\n","output":"str","x":1614.6666259765625,"y":799.3333129882812,"wires":[["12f20f599e71644d"]]},{"id":"4abc3509309ea1da","type":"link out","z":"8e598f0f47194617","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":2120,"y":778,"wires":[]},{"id":"12f20f599e71644d","type":"PkgFile","z":"8e598f0f47194617","name":"usage example","filename":"examples/flow.json","format":"json","syntax":"mustache","template":"[\n    {\n        \"id\": \"8ebef5248eea811d\",\n        \"type\": \"Flow2UML\",\n        \"z\": \"666972381aaa960e\",\n        \"name\": \"\",\n        \"direction\": \"TB\",\n        \"x\": 592,\n        \"y\": 1058,\n        \"wires\": [],\n        \"info\": \"```mermaid\\n%% change this to LR Node-RED like UML\\ngraph TB\\n15376617333a1cab((\\\"junction\\\")) --> 74d7a6997bfd0be6[\\\"Node 1\\\"]\\n9621464ec075aaea[\\\"Trigger\\\"] --> 74d7a6997bfd0be6[\\\"Node 1\\\"]\\n74d7a6997bfd0be6[\\\"Node 1\\\"] --> a37ef444d6544d3f[\\\"Node 2\\\"]\\na37ef444d6544d3f[\\\"Node 2\\\"] --> 15376617333a1cab((\\\"junction\\\"))\\nf7bb569589f45fc1[\\\"inject\\\"] --> ddbe12646ee71de7{{\\\"link in 8\\\"}}\\nddbe12646ee71de7{{\\\"link in 8\\\"}} -.-> 81b6d3b04cc3cffc\\n81b6d3b04cc3cffc{{\\\"link in 8\\\"}} --> acd94a5b651b9d09(\\\"debug 43\\\")\\n3c9c7420efd1a2cb{\\\"switch\\\"} --> |true| e1c85c8253330a50(\\\"debug 44\\\")\\n3c9c7420efd1a2cb{\\\"switch\\\"} --> |111| cb78c73e5ec8c6e0(\\\"debug 45\\\")\\n3c9c7420efd1a2cb{\\\"switch\\\"} --> |nnull| 2f9b7422aeb4b9ce(\\\"debug 46\\\")\\n3c9c7420efd1a2cb{\\\"switch\\\"} --> |empty| e43a4123ee3782b0(\\\"debug 47\\\")\\n3c9c7420efd1a2cb{\\\"switch\\\"} --> |false| 02e5b6a5f8ec0a63(\\\"debug 48\\\")\\n071ee6651cbae1f9[\\\"inject\\\"] --> 3c9c7420efd1a2cb{\\\"switch\\\"}\\n```\\n\"\n    },\n    {\n        \"id\": \"cd6a3e12062d27b3\",\n        \"type\": \"group\",\n        \"z\": \"666972381aaa960e\",\n        \"style\": {\n            \"stroke\": \"#999999\",\n            \"stroke-opacity\": \"1\",\n            \"fill\": \"none\",\n            \"fill-opacity\": \"1\",\n            \"label\": true,\n            \"label-position\": \"nw\",\n            \"color\": \"#a4a4a4\"\n        },\n        \"nodes\": [\n            \"f7bb569589f45fc1\",\n            \"ddbe12646ee71de7\",\n            \"acd94a5b651b9d09\",\n            \"81b6d3b04cc3cffc\"\n        ],\n        \"x\": 109,\n        \"y\": 577,\n        \"w\": 652,\n        \"h\": 202\n    },\n    {\n        \"id\": \"f7bb569589f45fc1\",\n        \"type\": \"inject\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"cd6a3e12062d27b3\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 215,\n        \"y\": 684,\n        \"wires\": [\n            [\n                \"ddbe12646ee71de7\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ddbe12646ee71de7\",\n        \"type\": \"link out\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"cd6a3e12062d27b3\",\n        \"name\": \"link out 118\",\n        \"mode\": \"link\",\n        \"links\": [\n            \"81b6d3b04cc3cffc\"\n        ],\n        \"x\": 502,\n        \"y\": 618,\n        \"wires\": []\n    },\n    {\n        \"id\": \"acd94a5b651b9d09\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"cd6a3e12062d27b3\",\n        \"name\": \"debug 43\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 655,\n        \"y\": 660,\n        \"wires\": []\n    },\n    {\n        \"id\": \"81b6d3b04cc3cffc\",\n        \"type\": \"link in\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"cd6a3e12062d27b3\",\n        \"name\": \"link in 8\",\n        \"links\": [\n            \"ddbe12646ee71de7\"\n        ],\n        \"x\": 306,\n        \"y\": 738,\n        \"wires\": [\n            [\n                \"acd94a5b651b9d09\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fbb691de6c4405c3\",\n        \"type\": \"group\",\n        \"z\": \"666972381aaa960e\",\n        \"style\": {\n            \"stroke\": \"#999999\",\n            \"stroke-opacity\": \"1\",\n            \"fill\": \"none\",\n            \"fill-opacity\": \"1\",\n            \"label\": true,\n            \"label-position\": \"nw\",\n            \"color\": \"#a4a4a4\"\n        },\n        \"nodes\": [\n            \"9621464ec075aaea\",\n            \"74d7a6997bfd0be6\",\n            \"a37ef444d6544d3f\",\n            \"15376617333a1cab\"\n        ],\n        \"x\": 497,\n        \"y\": 52,\n        \"w\": 821,\n        \"h\": 359.57142984867096\n    },\n    {\n        \"id\": \"9621464ec075aaea\",\n        \"type\": \"inject\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"fbb691de6c4405c3\",\n        \"name\": \"Trigger\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 593,\n        \"y\": 93,\n        \"wires\": [\n            [\n                \"74d7a6997bfd0be6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"74d7a6997bfd0be6\",\n        \"type\": \"change\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"fbb691de6c4405c3\",\n        \"name\": \"Node 1\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 933,\n        \"y\": 140,\n        \"wires\": [\n            [\n                \"a37ef444d6544d3f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a37ef444d6544d3f\",\n        \"type\": \"change\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"fbb691de6c4405c3\",\n        \"name\": \"Node 2\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1232,\n        \"y\": 226,\n        \"wires\": [\n            [\n                \"15376617333a1cab\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"15376617333a1cab\",\n        \"type\": \"junction\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"fbb691de6c4405c3\",\n        \"x\": 791.5305933952332,\n        \"y\": 385.57142984867096,\n        \"wires\": [\n            [\n                \"74d7a6997bfd0be6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"137292ea6473b12a\",\n        \"type\": \"group\",\n        \"z\": \"666972381aaa960e\",\n        \"style\": {\n            \"stroke\": \"#999999\",\n            \"stroke-opacity\": \"1\",\n            \"fill\": \"none\",\n            \"fill-opacity\": \"1\",\n            \"label\": true,\n            \"label-position\": \"nw\",\n            \"color\": \"#a4a4a4\"\n        },\n        \"nodes\": [\n            \"3c9c7420efd1a2cb\",\n            \"071ee6651cbae1f9\",\n            \"e1c85c8253330a50\",\n            \"cb78c73e5ec8c6e0\",\n            \"2f9b7422aeb4b9ce\",\n            \"e43a4123ee3782b0\",\n            \"02e5b6a5f8ec0a63\"\n        ],\n        \"x\": 921,\n        \"y\": 476,\n        \"w\": 805,\n        \"h\": 455\n    },\n    {\n        \"id\": \"3c9c7420efd1a2cb\",\n        \"type\": \"switch\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"true\"\n            },\n            {\n                \"t\": \"cont\",\n                \"v\": \"111\",\n                \"vt\": \"str\"\n            },\n            {\n                \"t\": \"nnull\"\n            },\n            {\n                \"t\": \"empty\"\n            },\n            {\n                \"t\": \"false\"\n            }\n        ],\n        \"checkall\": \"false\",\n        \"repair\": false,\n        \"outputs\": 5,\n        \"x\": 1278,\n        \"y\": 656,\n        \"wires\": [\n            [\n                \"e1c85c8253330a50\"\n            ],\n            [\n                \"cb78c73e5ec8c6e0\"\n            ],\n            [\n                \"2f9b7422aeb4b9ce\"\n            ],\n            [\n                \"e43a4123ee3782b0\"\n            ],\n            [\n                \"02e5b6a5f8ec0a63\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"071ee6651cbae1f9\",\n        \"type\": \"inject\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 1027,\n        \"y\": 692,\n        \"wires\": [\n            [\n                \"3c9c7420efd1a2cb\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e1c85c8253330a50\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"debug 44\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1506,\n        \"y\": 517,\n        \"wires\": []\n    },\n    {\n        \"id\": \"cb78c73e5ec8c6e0\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"debug 45\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1547,\n        \"y\": 591,\n        \"wires\": []\n    },\n    {\n        \"id\": \"2f9b7422aeb4b9ce\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"debug 46\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1620,\n        \"y\": 680,\n        \"wires\": []\n    },\n    {\n        \"id\": \"e43a4123ee3782b0\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"debug 47\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1560,\n        \"y\": 792,\n        \"wires\": []\n    },\n    {\n        \"id\": \"02e5b6a5f8ec0a63\",\n        \"type\": \"debug\",\n        \"z\": \"666972381aaa960e\",\n        \"g\": \"137292ea6473b12a\",\n        \"name\": \"debug 48\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1468,\n        \"y\": 890,\n        \"wires\": []\n    }\n]","output":"str","x":1841,"y":1058,"wires":[["4abc3509309ea1da"]]},{"id":"a4f56a2e4c6dd41f","type":"FlowHubPull","z":"8e598f0f47194617","g":"573f456625b89be4","name":"","notab":false,"flowid":"666972381aaa960e","flowname":"[NodeDev] Examples for Flow2UML node","flowrevision":"","x":556.6666259765625,"y":727.0833740234375,"wires":[[]]},{"id":"f03b01497c16c75c","type":"NodeDevOps","z":"8e598f0f47194617","g":"a9e74f2005129ff5","name":"Install Package Locally","pname":"@gregoriusrippenstein/node-red-contrib-flow2uml","pversion":"0.0.4","noderedinstall":true,"randompackagename":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-flow2uml","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"version bump to 0.0.4","npmpublish":false,"npmunpublish":false,"npmotp":"111999","x":516.6666259765625,"y":468,"wires":[["239876c7e987f37e"]]}]