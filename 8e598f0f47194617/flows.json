[{"id":"8e598f0f47194617","type":"tab","label":"[NodeDev] Flow2UML","disabled":false,"info":"::: aim\n\nCreate node that converts a Node-RED flow into a Mermaid flowchart diagram.\n\n:::\n\n::: requirements\n\n- [nodedev](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) node package\n- [development flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n### Example\n\n```mermaid\ngraph LR\n239876c7e987f37e[\"LICENSE\"] --> c5b74c4967a7bdab[\"README.md\"]\nb0f5aa186d1ea530[\"package.json\"] --> 9787f001caee49e9[\"flowToMermaidJS\"]\nc5b74c4967a7bdab[\"README.md\"] --> b0f5aa186d1ea530[\"package.json\"]\nf03b01497c16c75c[\"Install Package Locally\"] --> 239876c7e987f37e[\"LICENSE\"]\n58ad9096a049bd57[\"prepare commit for cdn.openmindmap.org\"] --> 966b2c12bc124684{\"split\"}\n966b2c12bc124684{\"split\"} --> c83e498a1edbea4a[\"change\"]\n3e447b3d36b5192e[\"base64\"] --> 3b67f307d90fe91d[\"create blob\"]\nc83e498a1edbea4a[\"change\"] --> 3e447b3d36b5192e[\"base64\"]\n540423e89add682a{\"join\"} --> 9f79b5be7ff9aec0[\"blobs\"]\nd4c4a7848e8c9b04[\"change\"] --> 540423e89add682a{\"join\"}\ncf1b500165dd957a[\"blobs --&gt; payload, message &amp; author\"] --> a7bfa733c7517756[\"create tree for blobs\"]\n9f79b5be7ff9aec0[\"blobs\"] --> 2ad8e352b546097a[\"current repo revision #40;sha#41;\"]\n9cd21c2349d55ec5[\"parent_sha\"] --> fe3b50aeda8be3a8[\"get tree for sha\"]\n53aa521f18c37c97[\"check sha of files\"] --> |not same| cf1b500165dd957a[\"blobs --&gt; payload, message &amp; author\"]\n53aa521f18c37c97[\"check sha of files\"] --> |same| 5ae0fa5ee67d5627[\"no changes\"]\n3b67f307d90fe91d[\"create blob\"] --> d4c4a7848e8c9b04[\"change\"]\n2ad8e352b546097a[\"current repo revision #40;sha#41;\"] --> 9cd21c2349d55ec5[\"parent_sha\"]\nfe3b50aeda8be3a8[\"get tree for sha\"] --> daca002d8f6af328[\"get sha for embed folder\"]\ndaca002d8f6af328[\"get sha for embed folder\"] --> d2ca132b41328d51[\"get tree for sha\"]\nd2ca132b41328d51[\"get tree for sha\"] --> 53aa521f18c37c97[\"check sha of files\"]\na7bfa733c7517756[\"create tree for blobs\"] --> f845ca7468b3b702[\"create commit\"]\nf845ca7468b3b702[\"create commit\"] --> 0b868149f4fc589c[\"updating head on repo at branch - aka committing commit\"]\n0b868149f4fc589c[\"updating head on repo at branch - aka committing commit\"] --> 811822bbb71d7dbf[\"changes committed\"]\n2bd8332b25178d44{\"npmpublish\"} --> |true| 4992590ae42671db[\"change\"]\n9787f001caee49e9[\"flowToMermaidJS\"] --> 83543709ce393692[\"Flow2MermaidCfg.js\"]\nc624b3c788f5a26f[\"UglifyJS\"] --> 58ad9096a049bd57[\"prepare commit for cdn.openmindmap.org\"]\n4992590ae42671db[\"change\"] --> c624b3c788f5a26f[\"UglifyJS\"]\n83543709ce393692[\"Flow2MermaidCfg.js\"] --> 9d01bd1326be8891[\"Sidebar: Flow2Mermaid.html\"]\n9d01bd1326be8891[\"Sidebar: Flow2Mermaid.html\"] --> a394dc7efd92184d[\"Flow2MermaidCfg.html\"]\na394dc7efd92184d[\"Flow2MermaidCfg.html\"] --> 4abc3509309ea1da{{\"#91;nodedev-backend#93; entry point\"}}\na394dc7efd92184d[\"Flow2MermaidCfg.html\"] --> 2bd8332b25178d44{\"npmpublish\"}\n```\n\n\n### Artifacts\n\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow2uml)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flow2uml)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flow2uml)\n\n### Related flows\n\n- [Testing flow for trying out ideas](https://flowhub.org/f/6e54d62e53ab5b6d)\n- [Usage example](https://flowhub.org/f/666972381aaa960e)\n\n","env":[]},{"id":"4536c694af321942","type":"group","z":"8e598f0f47194617","name":"Step 1: Install this flow for local development","style":{"label":true},"nodes":["a574ecd6a6f16eeb"],"x":370.6666259765625,"y":289.25,"w":472,"h":82},{"id":"ef057387c6b924cc","type":"group","z":"8e598f0f47194617","name":"flow that provides the basis for this node","style":{"label":true},"nodes":["9c5ca157f30c488b"],"x":370.6666259765625,"y":578.1666870117188,"w":452,"h":82},{"id":"dd208144c5b0a0e0","type":"group","z":"8e598f0f47194617","name":"Test the NodeFactory node to generate templates","style":{"label":true},"nodes":["375082c086e36a0e"],"x":370.6666259765625,"y":794.0000610351562,"w":332,"h":82},{"id":"573f456625b89be4","type":"group","z":"8e598f0f47194617","name":"example usage","style":{"label":true},"nodes":["a4f56a2e4c6dd41f"],"x":370.6666259765625,"y":686.0833740234375,"w":372,"h":82},{"id":"a9e74f2005129ff5","type":"group","z":"8e598f0f47194617","name":"Step 2: Install package locally into Node-RED","style":{"fill":"#e3f3d3","fill-opacity":"0.7","label":true},"nodes":["f03b01497c16c75c"],"x":370.6666259765625,"y":427,"w":293,"h":82},{"id":"91967f767ec6c48f","type":"group","z":"8e598f0f47194617","name":"commit the flowtomermaid.js to cdn.openmindmap.org","style":{"label":true},"nodes":["58ad9096a049bd57","33afb8166416d54e","72f284ff2072c42e","174950271a5c38fe"],"x":2022,"y":997,"w":1866,"h":555},{"id":"33afb8166416d54e","type":"group","z":"8e598f0f47194617","g":"91967f767ec6c48f","name":"for each file, create blob at github","style":{"label":true},"nodes":["966b2c12bc124684","3e447b3d36b5192e","c83e498a1edbea4a","540423e89add682a","d4c4a7848e8c9b04","3b67f307d90fe91d"],"x":2636,"y":1071,"w":218,"h":404},{"id":"72f284ff2072c42e","type":"group","z":"8e598f0f47194617","g":"91967f767ec6c48f","name":"do commit to cdn.omm.org","style":{"label":true},"nodes":["cf1b500165dd957a","a7bfa733c7517756","f845ca7468b3b702","0b868149f4fc589c"],"x":3370,"y":1099,"w":492,"h":253},{"id":"174950271a5c38fe","type":"group","z":"8e598f0f47194617","g":"91967f767ec6c48f","name":"check that something did actually change","style":{"label":true},"nodes":["9f79b5be7ff9aec0","9cd21c2349d55ec5","53aa521f18c37c97","2ad8e352b546097a","fe3b50aeda8be3a8","daca002d8f6af328","d2ca132b41328d51"],"x":3006.5,"y":1023,"w":272,"h":503},{"id":"239876c7e987f37e","type":"PkgFile","z":"8e598f0f47194617","name":"LICENSE","filename":"LICENSE","format":"markdown","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1363,"y":468.6666259765625,"wires":[["c5b74c4967a7bdab"]]},{"id":"b0f5aa186d1ea530","type":"PkgFile","z":"8e598f0f47194617","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"description\": \"{{{ pdescription }}}\",\n  \"keywords\": [\n    \"node-red\", \"uml\", \"mermaid\"\n  ],\n\n  \"homepage\": \"https://github.com/{{githubowner}}/{{githubrepo}}#README.md\",\n  \"license\": \"Don't do Evil. -> https://github.com/{{githubowner}}/{{githubrepo}}/blob/main/LICENSE\",\n  \"author\": \"{{{ pauthorname }}} <{{{ pauthoremail }}}>\",\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=2.0.0\",\n    \"plugins\": {\n      \"sidebar-plugin\": \"plugins/flow2mermaid.html\"\n    },\n    \"nodes\": {\n      \"flowtomermaid\": \"nodes/flow2mermaid.js\"\n    }\n  },\n\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/{{githubowner}}/{{githubrepo}}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{githubowner}}/{{githubrepo}}/issues\"\n  }\n}\n","output":"str","x":1373,"y":567.8333129882812,"wires":[["9787f001caee49e9"]]},{"id":"c5b74c4967a7bdab","type":"PkgFile","z":"8e598f0f47194617","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"## Flow to UML (Mermaid flowchart)\n\nConvert the current flow tab to a Mermaid UML flowchart diagram.\n\n**Warning**: will replace the contents of the clipboard, aka pasteboard.\n\nAlso this is best used with Node-RED 3.1.x because that has inbuilt support for rendering [Mermaid](https://mermaid.js.org/) diagrams. The generated UML can then be pasted to the info box for the flow.\n\n## Generating diagram\n\nEither use the Action List drop down, selecting *Convert flow to UML*:\n\n![img](https://cdn.openmindmap.org/content/1697468701824_Screen_Shot_2023-10-16_at_17.04.58.png)\n\nOr using the sidebar, first select the *Flow to UML* menu point\n\n![img](https://cdn.openmindmap.org/content/1697469135942_Screen_Shot_2023-10-16_at_17.06.39.png)\n\nThen select a drection - either TB - top to bottom or LR - left to right:\n\n![img](https://cdn.openmindmap.org/content/1697468872117_Screen_Shot_2023-10-16_at_17.06.48.png)\n\nAfter that the generate button will copy the UML to the pasteboard:\n\n![img](https://cdn.openmindmap.org/content/1697468819760_Screen_Shot_2023-10-16_at_17.06.54.png)\n\n## Discussion\n\nThis is a purely editor-based node with no interaction with the Node-RED server. The diagram generated is based on the current flow in the editor not the flow that has been deployed. Therefore any changes made in the editor will be reflected in the diagram generated.\n\n## Mermaid Syntax\n\nBeaware that Node-RED supports v9.4.3 of Mermaid, the [Mermaid live editor](https://mermaid.live), at time of writing, stands at 10.4.0 - there are differences.\n\nAlso the Node-RED editor sometimes shows an Mermaid Syntax error that can be resolved by doing a reload - your mileage might vary.\n\n### Artifacts\n\n- [Flow that maintains](https://flowhub.org/f/8e598f0f47194617) the codebase\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow2uml)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flow2uml)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flow2uml)\n\n","output":"str","x":1373,"y":514.6666259765625,"wires":[["b0f5aa186d1ea530"]]},{"id":"a574ecd6a6f16eeb","type":"FlowHubPull","z":"8e598f0f47194617","g":"4536c694af321942","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":606.6666259765625,"y":330.25,"wires":[[]]},{"id":"9c5ca157f30c488b","type":"FlowHubPull","z":"8e598f0f47194617","g":"ef057387c6b924cc","name":"","notab":false,"flowid":"6e54d62e53ab5b6d","flowname":"[Node-RED2UML] Convert Node-RED flow to Mermaid","flowrevision":"","x":596.6666259765625,"y":619.1666870117188,"wires":[[]]},{"id":"375082c086e36a0e","type":"NodeFactory","z":"8e598f0f47194617","g":"dd208144c5b0a0e0","name":"Generate Flow2UML template node","nodename":"Flow2Mermaid","color":"#C0DDFF","hasbutton":true,"hasinput":false,"outputcount":"0","category":"ignored","summary":"Generate a Mermaid flowchart diagram from the current flow tab.","description":"Generates a flow diagram using Mermaid and this flow. Node-RED 3.1.x how has support for Mermaid diagrams in the info boxes, so use that to display a diagram for the current flow.\n\n","icon":"font-awesome/fa-shower","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":true,"isplugin":true,"x":536.6666259765625,"y":835.0000610351562,"wires":[[]]},{"id":"4abc3509309ea1da","type":"link out","z":"8e598f0f47194617","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":2122,"y":834.5,"wires":[]},{"id":"a4f56a2e4c6dd41f","type":"FlowHubPull","z":"8e598f0f47194617","g":"573f456625b89be4","name":"","notab":false,"flowid":"666972381aaa960e","flowname":"[NodeDev] Examples for Flow2UML node","flowrevision":"","x":556.6666259765625,"y":727.0833740234375,"wires":[[]]},{"id":"f03b01497c16c75c","type":"NodeDevOps","z":"8e598f0f47194617","g":"a9e74f2005129ff5","name":"Install Package Locally","pname":"@gregoriusrippenstein/node-red-contrib-flow2uml","pversion":"0.0.7","pauthorname":"Gerrit Riessen","pauthoremail":"gerrit@openmindmap.org","pdescription":"Convert Node-RED to Mermaid UML flowchart diagram.","noderedinstall":true,"randompackagename":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-flow2uml","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"version bump to 0.0.7","npmpublish":false,"npmunpublish":false,"npmotp":"111999","x":516.6666259765625,"y":468,"wires":[["239876c7e987f37e"]]},{"id":"58ad9096a049bd57","type":"function","z":"8e598f0f47194617","g":"91967f767ec6c48f","name":"prepare commit for cdn.openmindmap.org","func":"msg.payload = [\n    {\n        name: \"embed/flowtomermaid.js\",\n        contents: msg.flowToMermaidJS\n    },\n    {\n        name: \"embed/flowtomermaid.min.js\",\n        contents: msg.payload\n    },\n]\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2218,"y":1266,"wires":[["966b2c12bc124684"]]},{"id":"966b2c12bc124684","type":"split","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":2742,"y":1112,"wires":[["c83e498a1edbea4a"]]},{"id":"3e447b3d36b5192e","type":"base64","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"","action":"","property":"payload","x":2742,"y":1240.8000000000002,"wires":[["3b67f307d90fe91d"]]},{"id":"c83e498a1edbea4a","type":"change","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"","rules":[{"t":"set","p":"filename","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"payload","pt":"msg","to":"payload.contents","tot":"msg"},{"t":"set","p":"owner","pt":"msg","to":"githubowner","tot":"msg"},{"t":"set","p":"repo","pt":"msg","to":"cdn.openmindmap.org","tot":"str"},{"t":"set","p":"branch","pt":"msg","to":"main","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2742,"y":1176.4,"wires":[["3e447b3d36b5192e"]]},{"id":"540423e89add682a","type":"join","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","reduceRight":false,"x":2742,"y":1434,"wires":[["9f79b5be7ff9aec0"]]},{"id":"d4c4a7848e8c9b04","type":"change","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"path\": msg.filename,\t    \"sha\": msg.payload\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2742,"y":1369.6000000000004,"wires":[["540423e89add682a"]]},{"id":"cf1b500165dd957a","type":"change","z":"8e598f0f47194617","g":"72f284ff2072c42e","name":"blobs --> payload, message & author","rules":[{"t":"set","p":"payload","pt":"msg","to":"blobs","tot":"msg","dc":true},{"t":"set","p":"message","pt":"msg","to":"update to flowtomermaid.js","tot":"str"},{"t":"set","p":"author","pt":"msg","to":"{\t    \"name\": $$.githubauthor,\t    \"email\": $$.githubauthoremail\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":3616,"y":1140,"wires":[["a7bfa733c7517756"]]},{"id":"9f79b5be7ff9aec0","type":"change","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"blobs","rules":[{"t":"set","p":"blobs","pt":"msg","to":"payload","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":3142.5,"y":1064,"wires":[["2ad8e352b546097a"]]},{"id":"9cd21c2349d55ec5","type":"change","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"parent_sha","rules":[{"t":"set","p":"parent_sha","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3142.5,"y":1204.3333333333335,"wires":[["fe3b50aeda8be3a8"]]},{"id":"53aa521f18c37c97","type":"function","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"check sha of files","func":"var currSha = (msg.payload.filter( function(d){\n    return d.path == \"flowtomermaid.js\"\n})[0] || { sha: undefined}).sha;\n\nvar newSha = (msg.blobs.filter( function(d) {\n    return d.path == \"embed/flowtomermaid.js\"\n})[0] || { sha: undefined }).sha;\n\nif ( currSha != newSha ) { return [{...msg, payload: \"js differ\"}, undefined ] }\n\n\nvar currSha = (msg.payload.filter(function (d) {\n    return d.path == \"flowtomermaid.min.js\"\n})[0] || { sha: undefined }).sha;\n\nvar newSha = (msg.blobs.filter(function (d) {\n    return d.path == \"embed/flowtomermaid.min.js\"\n})[0] || { sha: undefined }).sha;\n\nif (currSha != newSha) { return [{ ...msg, payload: \"js differ\" }, undefined] }\n\nreturn [undefined, {...msg, payload: \"same\"}];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3142.5,"y":1485,"wires":[["cf1b500165dd957a"],["5ae0fa5ee67d5627"]],"outputLabels":["not same","same"]},{"id":"5ae0fa5ee67d5627","type":"function","z":"8e598f0f47194617","name":"no changes","func":"node.status({\n    fill: \"yellow\",\n    shape: 'dot',\n    text: \"same sha, same content\"\n})\n\nsetTimeout( () => { node.status({}) }, 2500);","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3408,"y":1606,"wires":[]},{"id":"811822bbb71d7dbf","type":"function","z":"8e598f0f47194617","name":"changes committed","func":"node.status({\n    fill: \"green\",\n    shape: 'dot',\n    text: \"committed: \" + msg.payload\n})\n\nsetTimeout( () => { node.status({}) }, 2500);","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3994,"y":1606,"wires":[]},{"id":"3b67f307d90fe91d","type":"function","z":"8e598f0f47194617","g":"33afb8166416d54e","name":"create blob","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: base64 encoded content for blob\n * \n * Return:\n *   - payload: sha of newly created blob\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/blobs\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        content: msg.payload,\n        encoding: \"base64\"\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.sha})\n    }).catch(function (e) {\n        node.error(\"creating blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2742,"y":1305.2000000000003,"wires":[["d4c4a7848e8c9b04"]]},{"id":"2ad8e352b546097a","type":"function","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"current repo revision (sha)","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: branch name\n * \n * Return:\n *   - payload: current revision of repo\n * \n * Source:\n *   - https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/branches/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.commit.sha})\n    }).catch(function (e) {\n        node.error(\"obtaining latest sha\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3142.5,"y":1134.1666666666667,"wires":[["9cd21c2349d55ec5"]]},{"id":"fe3b50aeda8be3a8","type":"function","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n *   - recursive: if set to a true value, entire directory tree is retrieved.\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\" + (msg.recursive ? \"?recursive=true\" : \"\"), {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3142.5,"y":1274.5000000000002,"wires":[["daca002d8f6af328"]]},{"id":"daca002d8f6af328","type":"function","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"get sha for embed folder","func":"msg.payload = msg.payload.filter( function(d){\n    return d.path == \"embed\"\n})[0].sha;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3142.5,"y":1344.666666666667,"wires":[["d2ca132b41328d51"]]},{"id":"d2ca132b41328d51","type":"function","z":"8e598f0f47194617","g":"174950271a5c38fe","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n *   - recursive: if set to a true value, entire directory tree is retrieved.\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\" + (msg.recursive ? \"?recursive=true\" : \"\"), {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3142.5,"y":1414.8333333333337,"wires":[["53aa521f18c37c97"]]},{"id":"a7bfa733c7517756","type":"function","z":"8e598f0f47194617","g":"72f284ff2072c42e","name":"create tree for blobs","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: array of blobs, each blob is an object with:\n *         - path: filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n *         - sha: the sha of the blob created initially using the create blob function\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n * \n * Return:\n *   - payload: sha of newly created tree\n */\n\ntry {\n    var tree = msg.payload.map(function(blb){\n        return {\n            ...blb,\n            mode: \"100644\",\n            type: \"blob\"\n        }\n    });\n\n    octokit.request(\"POST /repos/:owner/:repo/git/trees\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        base_tree: msg.parent_sha,\n        tree: tree\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n    \n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3616,"y":1197,"wires":[["f845ca7468b3b702"]]},{"id":"f845ca7468b3b702","type":"function","z":"8e598f0f47194617","g":"72f284ff2072c42e","name":"create commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: the sha of the tree to commit\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n *   - author: an object with the following:\n *      - name: name of the author of the commit\n *      - email: email of the author of the commit\n *   - message: commit message\n * \n * Return:\n *   - payload: sha of newly commit\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,        \n        message: msg.message,\n        author: {\n            name: msg.author.name,\n            email: msg.author.email\n        },\n        parents: [\n            msg.parent_sha\n        ],\n        tree: msg.payload\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3616,"y":1254,"wires":[["0b868149f4fc589c"]]},{"id":"0b868149f4fc589c","type":"function","z":"8e598f0f47194617","g":"72f284ff2072c42e","name":"updating head on repo at branch - aka committing commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github repo branch to update with the new commit sha\n *   - payload: the sha of the commit created\n * \n * Return:\n *   - payload: new sha of the branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference\n */\n\ntry {\n    msg.new_commit_sha = msg.payload;\n\n    octokit.request(\"PATCH /repos/:owner/:repo/git/refs/heads/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n        sha: msg.payload\n    }).then(function (resp) {\n        node.send({ \n            ...msg, \n            payload: resp.data.object.sha,\n        })\n    }).catch(function (e) {\n        node.error(\"committing commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":3616,"y":1311,"wires":[["811822bbb71d7dbf"]]},{"id":"2bd8332b25178d44","type":"switch","z":"8e598f0f47194617","name":"npmpublish","property":"npmpublish","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1874,"y":932,"wires":[["4992590ae42671db"]]},{"id":"9787f001caee49e9","type":"template","z":"8e598f0f47194617","name":"flowToMermaidJS","field":"flowToMermaidJS","fieldType":"msg","format":"javascript","syntax":"plain","template":"(function() {\n\n    function constructMermaid(nodes, direction=\"TB\", redRef=undefined) {\n        var msg = {\n            payload: nodes\n        }\n\n        var nodes = msg.payload.filter((n) => {\n            return n.type != \"tab\" && n.type != \"group\"\n        })\n\n        var id2node = {};\n        for (var idx = 0; idx < nodes.length; idx++) {\n            var nd = nodes[idx];\n            id2node[nd.id] = nd;\n        }\n\n        /* redRef is a reference to RED object, if this is available, it's set, if not we \n            have to improvis. */\n        var RED = redRef;\n        if (!redRef) {\n            RED = {\n                nodes: {\n                    node: (nId) => { return id2node[nId] },\n                    subflow: (nId) => { return id2node[nId] }\n                },\n            }\n        }\n\n        var escapeForMermaid = (str) => {\n            return str.replaceAll(\n                \"&\", \"&amp;\"\n            ).replaceAll(\n                \"#\", \"#35;\"\n            ).replaceAll(\n                \"[\", \"#91;\"\n            ).replaceAll(\n                \"]\", \"#93;\"\n            ).replaceAll(\n                \"(\", \"#40;\"\n            ).replaceAll(\n                \")\", \"#41;\"\n            ).replaceAll(\n                \"|\", \"#124;\"\n            ).replaceAll(\n                \">\", \"&gt;\"\n            ).replaceAll(\n                \"<\", \"&lt;\"\n            ).replaceAll(\n                \"{\", \"#123;\"\n            ).replaceAll(\n                \"}\", \"#125;\"\n            ).replaceAll(\n                \"/\", \"#47;\"\n            )\n        };\n\n        var node2label = (nd, nme = undefined) => {\n            var labl = nd.name || nd.type;\n\n            if (nme) {\n                nme = \"|\" + escapeForMermaid(nme) + \"| \"\n            } else { nme = \"\" }\n\n            labl = escapeForMermaid(labl);\n\n            switch (nd.type) {\n                case \"switch\":\n                case \"join\":\n                case \"split\":\n                    return nme + nd.id + \"{\\\"\" + labl + \"\\\"}\"\n\n                case \"link call\":\n                case \"link out\":\n                    if (nd.mode && nd.mode == \"return\") {\n                        return nme + nd.id + \"[\\\\Link Return/]\"\n                    }\n\n                    if (nd.name && !nd.name.match(/^link out/)) {\n                        return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n                    }\n\n                    if (nd.linkType == \"dynamic\") {\n                        labl = \"\\\\Dynamic Target/\"\n                        return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n                    }\n\n                    var targetNode = (nd.links && nd.links.length > 0 && (id2node[nd.links[0]] || RED.nodes.node(nd.links[0])));\n                    labl = escapeForMermaid((targetNode && targetNode.name) || nd.type)\n                    return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n                case \"link in\":\n                    labl = escapeForMermaid(nd.name || (nd.links && nd.links.length > 0 && id2node[nd.links[0]] && id2node[nd.links[0]].name) || nd.type)\n                    return nme + nd.id + \"\\{\\{\\\"\" + labl + \"\\\"\\}\\}\"\n\n                case \"junction\":\n                    return nme + nd.id + \"((\\\"\" + labl + \"\\\"))\"\n\n                case \"debug\":\n                    return nme + nd.id + \"(\\\"\" + labl + \"\\\")\"\n\n                default:\n                    if (nd.type.startsWith(\"subflow:\")) {\n                        var targetNode = RED.nodes.subflow(nd.type.replace(/subflow:/, ''))\n                        labl = escapeForMermaid((targetNode && targetNode.name) || nd.type)\n                    }\n\n                    return nme + nd.id + \"[\\\"\" + labl + \"\\\"]\"\n            }\n        }\n\n        /* \n          we attach the mermaid array on the msg object because if an exception\n          happens, we can check how far this code got. That is by comparing the\n          contents of this array with the payload, we know which node caused\n          the exception.\n        */\n        msg.mermaid = [\n            \"%% change this to LR Node-RED like UML\",\n            \"graph \" + direction\n        ];\n\n        for (var idx = 0; idx < nodes.length; idx++) {\n            var nde = nodes[idx];\n\n            if (nde.links && nde.links.length > 0 && nde.type == \"link out\") {\n                for (var ldx = 0; ldx < nde.links.length; ldx++) {\n                    /* link-out wire: only add a dashed link wire iff the node is included in this graph */\n                    if (id2node[nde.links[ldx]]) {\n                        msg.mermaid.push(\n                            node2label(nde) + \" -.-> \" + nde.links[ldx]\n                        )\n                    }\n                }\n            }\n\n            if (nde.wires && nde.wires.length > 0) {\n                if (nde.type == \"switch\") {\n                    for (var odx = 0; odx < nde.wires.length; odx++) {\n                        for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                            msg.mermaid.push(\n                                node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], nde.rules[odx] && (nde.rules[odx].v || nde.rules[odx].t))\n                            )\n                        }\n                    }\n                } else {\n                    var outputLabels = nde.outputLabels;\n                    if (nde.type.startsWith(\"subflow:\")) {\n                        var targetNode = RED.nodes.subflow(nde.type.replace(/subflow:/, ''))\n                        outputLabels = (targetNode && targetNode.outputLabels) || outputLabels\n                    }\n\n                    for (var odx = 0; odx < nde.wires.length; odx++) {\n                        for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                            msg.mermaid.push(\n                                node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], (outputLabels && outputLabels[odx]) || undefined)\n                            )\n                        }\n                    }\n                }\n            }\n        }\n\n        return msg.mermaid.join(\"\\n\");\n    }\n\n    window.FlowToMermaid = {\n        constructMermaid: constructMermaid\n    }\n})();","output":"str","x":1857,"y":567.8333129882812,"wires":[["83543709ce393692"]]},{"id":"c624b3c788f5a26f","type":"UglifyJS","z":"8e598f0f47194617","name":"","config":"{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":false,\"warnings\":false}","configType":"json","x":1891,"y":1090,"wires":[["58ad9096a049bd57"]]},{"id":"4992590ae42671db","type":"change","z":"8e598f0f47194617","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"flowToMermaidJS","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1878,"y":1006,"wires":[["c624b3c788f5a26f"]]},{"id":"83543709ce393692","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2MermaidCfg.js","filename":"nodes/flow2mermaid.js","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n  function ConfigFlow2MermaidFunctionality(config) {\n    RED.nodes.createNode(this, config)\n  }\n  RED.nodes.registerType('Flow2MermaidCfg', ConfigFlow2MermaidFunctionality);\n}","output":"str","x":1561,"y":733,"wires":[["9d01bd1326be8891"]]},{"id":"9d01bd1326be8891","type":"PkgFile","z":"8e598f0f47194617","name":"Sidebar: Flow2Mermaid.html","filename":"plugins/flow2mermaid.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function() {\n   var globalYourConfigNode = null;\n\n   {{{ flowToMermaidJS }}}\n  \n   function obtainCurrentActiveFlow() {\n      var activeWorkspace = RED.workspaces.active();\n      var nodes = RED.nodes.groups(activeWorkspace);\n\n      nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n      nodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\n      RED.nodes.eachConfig(function (n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n          // Grab any config nodes scoped to this flow that don't\n          // require any flow-nodes to use them\n          nodes.push(n);\n        }\n      });\n\n      var parentNode = RED.nodes.workspace(\n        activeWorkspace\n      ) || RED.nodes.subflow(activeWorkspace);\n\n      nodes.unshift(parentNode);\n\n      return RED.nodes.createExportableNodeSet(nodes)\n   };\n\n   function ensureYourConfigNodeExists() {\n      // This function makes sure there is 1 instance of your config node is available, and that the globalYourConfigNode variable refers to it.\n      // Explained in the next step of this tutorial... --> https://discourse.nodered.org/t/tutorial-create-a-sidebar-plugin-and-persist-the-data-in-a-config-node/82020\n\n      // If we had found it previously, check if it has been deleted by the user behind our back\n      if (globalYourConfigNode !== null) {\n         var configNode = RED.nodes.node(globalYourConfigNode.id);\n         if (configNode === null) { globalYourConfigNode = null; }\n      }\n\n      // If not found previously, let's go find it\n      if (globalYourConfigNode === null) {\n         var configNodes = [];\n         RED.nodes.eachConfig(function(configNode) {\n             if (configNode.type === 'Flow2Mermaid') { \n                 configNodes.push(configNode); \n             }\n         });\n\n         // Make sure we only have 1 config node\n         while (configNodes.length > 1) {\n             var configNode = configNodes.pop();\n             RED.nodes.remove(configNode.id);\n             RED.nodes.dirty(true);\n         }\n\n         // When we found a config node, let's use that one\n         if (configNodes.length === 1) { globalYourConfigNode = configNodes[0]; }\n      }\n\n      // When it doesn't exist yet, create it if required\n      if (globalYourConfigNode === null) {\n         // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n         // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n         // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n         // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n         globalYourConfigNode = {\n             id: RED.nodes.id(), // on the server side, this is called RED.util.generateId()\n             _def: RED.nodes.getType(\"Flow2MermaidCfg\"),\n             type: \"Flow2MermaidCfg\",\n             hasUsers: false, \n             users: [],\n             name: \"Flow2Mermaid\",\n             label: function() { return this.name || \"Flow2Mermaid\"},\n             /* values and data defined by this config node */\n             direction: \"TB\", // Default data\n         }\n\n         // Add the new config node to the collection of Node-RED nodes\n         RED.nodes.add(globalYourConfigNode);\n\n         // Make sure the \"Deploy\" button becomes active\n         RED.nodes.dirty(true);\n      }      \n   }\n\n   // Add your plugin as a new tabsheet in the right sidebar AFTER the flow editor is completely started\n   var initialiseConfigNodeOnce = () => {\n      RED.events.off('runtime-state', initialiseConfigNodeOnce);\n\n      // The html content of the sidebar has been specified below as a data-template, from where it can be loaded:\n      var content = $($('script[type=\"text/x-red\"][data-template-name=\"Flow2Mermaid\"]').i18n().html());\n    \n      // Add a \"Your sidebar\" tabsheet to the right sidebar panel, in which this sidebar panel can be displayed\n      // --> more details: https://nodered.org/docs/api/ui/sidebar/\n      RED.sidebar.addTab({\n         id: \"Flow2Mermaid\",\n         label: \"Flow to UML\", // short name for the tab\n         name: \"Flow to UML\", // long name for the menu\n         content: content,\n         closeable: true,\n         // disableOnEdit: true,\n         enableOnEdit: true,\n         iconClass: \"fa fa-shower\" // your fontawesome icon\n      });\n\n      ensureYourConfigNodeExists();\n\n      var doSomething = (e) => {\n         if (e) { e.preventDefault(); }\n\n         var mermaidTxt = FlowToMermaid.constructMermaid(obtainCurrentActiveFlow(), globalYourConfigNode.direction, RED);\n         \n         RED.clipboard.copyText(mermaidTxt)\n         // console.log( mermaidTxt )\n\n         RED.notify(\"Mermaid UML has been copied to pasteboard.\", \"success\");\n      }\n\n      $('#node-input-generate-diagram-but').on('click', (e) => {\n         doSomething(e);\n      })\n\n      /* name of action will become \"My Sidebar Action\", label is generated\n         from action name - see https://nodered.org/docs/api/ui/actions/ */\n      RED.actions.add(\"flow2mermaid:convert-flow-to-uml\",function() {\n        doSomething();\n      });\n\n      // At startup load your config node data into the plugin sidebar html elements\n      $('#node-input-direction').val(globalYourConfigNode.direction)\n\n      // When the user has entered new data in the sidebar, then store it into the config node\n      $(\"#node-input-direction\").on(\"change\", function() {\n        ensureYourConfigNodeExists();\n\n        let data = $(this).val();\n\n         if (globalYourConfigNode.direction != data) {\n            globalYourConfigNode.direction = data;\n            // Since the config node has been updated, the 'Deploy' button should become active\n            RED.nodes.dirty(true);\n         }\n      })\n   };\n   RED.events.on('runtime-state', initialiseConfigNodeOnce);\n})();\n</script>\n\n<!-- The html for the right sidebar plugin screen -->\n<script type=\"text/x-red\" data-template-name=\"Flow2Mermaid\">\n\n<div class=\"form-row\" style=\"margin-left: 15px; margin-top: 30px;\">\n   <label for=\"node-input-direction\"><i class=\"fa fa-tag\"></i> Direction</label>\n   <select id=\"node-input-direction\">\n        <option value=\"TB\">Top to Bottom</option>\n        <option value=\"LR\">Left to Right</option>\n      </select>\n</div>\n\n<div class=\"form-row\" style=\"margin-left: 15px;\">\n   <button id=\"node-input-generate-diagram-but\"\n           class=\"red-ui-button\">Generate Mermaid Diagram</button>\n</div>\n</script>","output":"str","x":1561,"y":783,"wires":[["a394dc7efd92184d"]]},{"id":"a394dc7efd92184d","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2MermaidCfg.html","filename":"nodes/flow2mermaid.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function ($) {\n   RED.nodes.registerType('Flow2MermaidCfg', {\n      category: 'config',\n      hasUsers: false,\n      defaults: {\n         name: { value: \"\" },\n         direction: { value: \"\" }\n      },\n      paletteLabel: 'Flow2MermaidCfg',\n      label: function () {\n         return this.name;\n      }\n  });\n})(jQuery);\n</script>\n\n<!-- The html for the config node info panel (in right sidebar) -->\n<script type=\"text/x-red\" data-template-name=\"Flow2MermaidCfg\">\n   <p>Generate a Mermaid flowchart diagram from the active flow tab.</p>\n\n   <h3>Description</h3>\n   Convert the current flow tabl a work-flow UML diagram in Mermaid syntax. The result is stored in the pasteboard - Ctrl/Cmd-V can be used to paste the Mermaid diagram into the <a style=\"color: blue;\" target=_blank href=\"https://mermaid.live/edit\">live editor <i class=\"fa fa-external-link\"></i></a>.\n</script>\n","output":"str","x":1561,"y":833,"wires":[["4abc3509309ea1da","2bd8332b25178d44"]]}]