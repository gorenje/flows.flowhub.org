[{"id":"8e598f0f47194617","type":"tab","label":"[NodeDev] Flow2Mermaid","disabled":false,"info":"::: aim\n\nCreate node that converts a Node-RED flow into a Mermaid flowchart diagram.\n\n:::\n\n","env":[]},{"id":"6f5fb52917ee93dc","type":"group","z":"8e598f0f47194617","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["9e60077a6a476e0a"],"x":385.6666259765625,"y":362.33331298828125,"w":352,"h":82},{"id":"fc9abc8a1307ab26","type":"group","z":"8e598f0f47194617","name":"randomise package name for quicker local development","style":{"label":true},"nodes":["4b67accc1f0ada3b","3182c50022f0c752","59394463ac53a6cd"],"x":1228.6666793823242,"y":359.33331298828125,"w":706.9999465942383,"h":126},{"id":"4536c694af321942","type":"group","z":"8e598f0f47194617","name":"Flow required for local development","style":{"label":true},"nodes":["a574ecd6a6f16eeb"],"x":385.6666259765625,"y":476.49995930989576,"w":472,"h":82},{"id":"ef057387c6b924cc","type":"group","z":"8e598f0f47194617","name":"flow that provides the basis for this node","style":{"label":true},"nodes":["9c5ca157f30c488b"],"x":385.6666259765625,"y":590.6666056315103,"w":452,"h":82},{"id":"239876c7e987f37e","type":"PkgFile","z":"8e598f0f47194617","name":"LICENSE","filename":"LICENSE","format":"markdown","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1520,"y":711.6666259765625,"wires":[["c5b74c4967a7bdab"]]},{"id":"b0f5aa186d1ea530","type":"PkgFile","z":"8e598f0f47194617","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"keywords\": [\n    \"node-red\", \"uml\", \"mermaid\"\n  ],\n\n  \"homepage\": \"https://flowhub.org\",\n  \"license\": \"SEE LICENSE IN https://github.com/{{githubowner}}/{{githubrepo}}/blob/main/LICENSE\",\n  \"author\": \"Gerrit Riessen <nodered@spreads-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=2.0.0\",\n    \"nodes\": {\n      \"flowtomermaid\": \"nodes/flow2mermaid.js\"\n    }\n  },\n\n  \"description\": \"Convert current flow tab to Mermaid flow diagram.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/{{githubowner}}/{{githubrepo}}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{githubowner}}/{{githubrepo}}/issues\"\n  }\n}\n","output":"str","x":1529,"y":810.6666259765625,"wires":[["3cce2f8bb1c495cb"]]},{"id":"c5b74c4967a7bdab","type":"PkgFile","z":"8e598f0f47194617","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"## Flow to Mermaid\n\nConvert the current flow tab to a Mermaid flowchart diagram.\n\n**Warning**: will update the info panel of this node.\n","output":"str","x":1529,"y":757.6666259765625,"wires":[["b0f5aa186d1ea530"]]},{"id":"9e60077a6a476e0a","type":"inject","z":"8e598f0f47194617","g":"6f5fb52917ee93dc","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-flow2mermaid","vt":"str"},{"p":"pversion","v":"0.0.1","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"npmpublish","v":"true","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"randompackagename","v":"true","vt":"bool"},{"p":"commit_message","v":"initial commit","vt":"str"},{"p":"npmotp","v":"111999","vt":"str"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-flow2mermaid","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":571.6666259765625,"y":403.33331298828125,"wires":[["3182c50022f0c752"]]},{"id":"4b67accc1f0ada3b","type":"change","z":"8e598f0f47194617","g":"fc9abc8a1307ab26","name":"","rules":[{"t":"set","p":"pname","pt":"msg","to":"$$.pname & $substring(\"\"&$random(),2)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1829.6666259765625,"y":444.33331298828125,"wires":[["239876c7e987f37e"]]},{"id":"3182c50022f0c752","type":"switch","z":"8e598f0f47194617","g":"fc9abc8a1307ab26","name":"randompackagename","property":"randompackagename","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":1354.6666793823242,"y":400.33331298828125,"wires":[["59394463ac53a6cd"],["239876c7e987f37e"]]},{"id":"59394463ac53a6cd","type":"switch","z":"8e598f0f47194617","g":"fc9abc8a1307ab26","name":"noderedinstall","property":"noderedinstall","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":1601.6666259765625,"y":418.333251953125,"wires":[["4b67accc1f0ada3b"],["239876c7e987f37e"]]},{"id":"375082c086e36a0e","type":"NodeFactory","z":"8e598f0f47194617","name":"Generate Flow2Mermaid node","nodename":"Flow2Mermaid","color":"#C0DDFF","hasbutton":true,"hasinput":false,"outputcount":"0","category":"introspection","summary":"Generate a Mermaid flowchart diagram from the current flow tab.","description":"Generates a flow diagram using Mermaid and this flow. Node-RED 3.1.x how has support for Mermaid diagrams in the info boxes, so use that to display a diagram for the current flow.\n\n","icon":"font-awesome/fa-shower","x":587.3333740234375,"y":731.0000610351562,"wires":[[]]},{"id":"3cce2f8bb1c495cb","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2Mermaid.js","filename":"nodes/flow2mermaid.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function Flow2MermaidFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    node.on(\"input\", function(msg, send, done) {\n        send(msg);\n        done();\n    });\n  }\n  RED.nodes.registerType(\"Flow2Mermaid\", Flow2MermaidFunctionality);\n}\n","output":"str","x":1556.6665649414062,"y":879.9999618530273,"wires":[["4934281540e50042"]]},{"id":"4934281540e50042","type":"PkgFile","z":"8e598f0f47194617","name":"Flow2Mermaid.html","filename":"nodes/flow2mermaid.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n\n  function constructMermaid(nodes) {\n    var msg = {\n      payload: nodes\n    }\n\n    var nodes = msg.payload.filter((n) => {\n        return n.type != \"tab\" && n.type != \"group\"\n    })\n\n    var id2node = {};\n    for (var idx = 0; idx < nodes.length; idx++) {\n        var nd = nodes[idx];\n        id2node[nd.id] = nd;\n    }\n\n    var escapeForMermaid = (str) => {\n        return str.replaceAll(\n            \"&\", \"&amp;\"\n        ).replaceAll(\n            \"#\", \"#35;\"\n        ).replaceAll(\n            \"[\", \"#91;\"\n        ).replaceAll(\n            \"]\", \"#93;\"\n        ).replaceAll(\n            \"(\", \"#40;\"\n        ).replaceAll(\n            \")\", \"#41;\"\n        ).replaceAll(\n            \"|\", \"#124;\"\n        ).replaceAll(\n            \">\", \"&gt;\"\n        ).replaceAll(\n            \"<\", \"&lt;\"\n        ).replaceAll(\n            \"{\", \"#123;\"\n        ).replaceAll(\n            \"}\", \"#125;\"\n        ).replaceAll(\n            \"/\", \"#47;\"\n        )\n    };\n\n    var node2label = (nd, nme = undefined) => {\n        var labl = nd.name || nd.type;\n\n        if (nme) {\n            nme = \"|\" + escapeForMermaid(nme) + \"| \"\n        } else { nme = \"\" }\n\n        labl = escapeForMermaid(labl);\n\n        switch (nd.type) {\n            case \"switch\":\n            case \"join\":\n            case \"split\":\n                return nme + nd.id + \"{\" + labl + \"}\"\n\n            case \"link in\":\n            case \"link out\":\n            case \"link call\":\n                labl = escapeForMermaid(nd.name || (nd.links && nd.links.length > 0 && id2node[nd.links[0]] && id2node[nd.links[0]].name) || nd.type)\n                if ( nd.mode && nd.mode == \"return\") {\n                    return nme + nd.id + \"[\\\\Link Return/]\"    \n                }\n                return nme + nd.id + \"{{\" + labl + \"}}\"\n\n            case \"junction\":\n                return nme + nd.id + \"((\" + labl + \"))\"\n\n            case \"debug\":\n                return nme + nd.id + \"(\" + labl + \")\"\n\n            default:\n                return nme + nd.id + \"[\" + labl + \"]\"\n        }\n    }\n\n    /* \n      we attach the mermaid array on the msg object because if an exception\n      happens, we can check how far this code got. That is by comparing the\n      contents of this array with the payload, we know which node caused\n      the exception.\n    */\n    msg.mermaid = [\n        \"%% change this to LR Node-RED like UML\",\n        \"graph TB\"\n    ];\n\n    for (var idx = 0; idx < nodes.length; idx++) {\n        var nde = nodes[idx];\n\n        if (nde.links && nde.links.length > 0 && nde.type == \"link out\") {\n            for (var ldx = 0; ldx < nde.links.length;ldx++) {\n                /* link-out wire: only add a dashed link wire iff the node is included in this graph */\n                if (id2node[nde.links[ldx]]) {\n                    msg.mermaid.push(\n                        node2label(nde) + \" -.-> \" + nde.links[ldx]\n                    )\n                }\n            }\n        }\n\n        if (nde.wires && nde.wires.length > 0) {\n            if (nde.type == \"switch\") {\n                for (var odx = 0; odx < nde.wires.length; odx++) {\n                    for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                        msg.mermaid.push(\n                            node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], nde.rules[odx] && (nde.rules[odx].v || nde.rules[odx].t))\n                        )\n                    }\n                }\n            } else {\n                for (var wdx = 0; wdx < nde.wires[0].length; wdx++) {\n                    msg.mermaid.push(\n                        node2label(nde) + \" --> \" + node2label(id2node[nde.wires[0][wdx]])\n                    )\n                }\n            }\n        }\n    }\n\n    return msg.mermaid.join(\"\\n\");\n  }\n  \n  function obtainCurrentActiveFlow(node) {\n      var activeWorkspace = RED.workspaces.active();\n      var nodes = RED.nodes.groups(activeWorkspace);\n\n      nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n      nodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\n      RED.nodes.eachConfig(function (n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n          // Grab any config nodes scoped to this flow that don't\n          // require any flow-nodes to use them\n          nodes.push(n);\n        }\n      });\n\n      var parentNode = RED.nodes.workspace(\n        activeWorkspace\n      ) || RED.nodes.subflow(activeWorkspace);\n\n      nodes.unshift(parentNode);\n\n      var expNodes = RED.nodes.createExportableNodeSet(nodes)\n\n      // remove ourselves from the list of nodes.\n      try {\n        expNodes = expNodes.filter( (n) => { \n          return n.id != node.id \n        })\n      } catch (ex) {}\n\n      return expNodes;\n  };\n\n  RED.nodes.registerType('Flow2Mermaid',{\n    color: '#C0DDFF',\n    icon: \"font-awesome/fa-shower\",\n    category: 'introspection',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    inputs: 0,\n    outputs: 0,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    button: {\n      enabled: function() {\n        return !this.changed\n      },\n\n      onclick: function () {\n        if (this.changed) {\n          return RED.notify(RED._(\"notification.warning\", {\n            message: RED._(\"notification.warnings.undeployedChanges\")\n          }), \"warning\");\n        }\n\n        var mermaidTxt = constructMermaid(obtainCurrentActiveFlow(this));\n\n        console.log( mermaidTxt )\n        $('#node-input-info').val(\"```mermaid\\n\" + mermaidTxt + \"\\n```\\n\");        \n        this.info = \"```mermaid\\n\" + mermaidTxt + \"\\n```\\n\";\n        \n        console.log( this.info )\n      }\n    },\n\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"Flow2Mermaid\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n\n</script>\n\n<script type=\"text/html\" data-help-name=\"Flow2Mermaid\">\n  <p>Generate a Mermaid flowchart diagram from the current flow tab.</p>\n  Generates a flow diagram using Mermaid and this flow. Node-RED 3.1.x how has support for Mermaid diagrams in the info boxes, so use that to display a diagram for the current flow.\n</script>\n","output":"str","x":1591.6665878295898,"y":928.3333396911621,"wires":[["4abc3509309ea1da"]]},{"id":"4abc3509309ea1da","type":"link out","z":"8e598f0f47194617","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":2089.9999999999995,"y":934.9999999999999,"wires":[]}]