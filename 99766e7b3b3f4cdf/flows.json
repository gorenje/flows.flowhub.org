[{"id":"99766e7b3b3f4cdf","type":"tab","label":"[Utilities] Update Overflow with new nodes.","disabled":false,"info":"::: aim\n\nA flow for generating updates to the [Overflow](https://flowhub.org/f/611c047e656989ae) - *the flow that provides an overview*!\n\n:::\n\n::: requirements\n\n1. This flow requires the ClientCode node from the [introspection](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection) node package.\n\n:::\n\n::: explanation\n\nTo use this, first import the [Overflow](https://flowhub.org/f/611c047e656989ae) **ensuring** that no nodes cause conflict, i.e., do not import a copy of the nodes!!! \n\nThis is because each node has the id of the flow it represents, since importing the RSS feed here and checking which nodes already exist, ensures that only new flows are imported into the overflow flow.\n\nThe <a class=\"ahl-node-only\" data-ids=\"13d800c824983e43\">delay node</a> allows me to switch flow tabs.\n\n:::\n","env":[]},{"id":"e8fbeebbec44ad2f","type":"group","z":"99766e7b3b3f4cdf","name":"Add preview image to the info details of node/comment","style":{"label":true},"nodes":["c17223eca0978cd1","7c7987d6eaf7d858","918111f709e8ef9d","c32d94e35dbc9ca4","d275586c75e7e627","2dec910479e794ae","b6cd421b778a1ede","60d1f4c2a3d42187"],"x":649,"y":1272,"w":1394,"h":489},{"id":"f3bdcd54a0aa8585","type":"inject","z":"99766e7b3b3f4cdf","name":"","props":[{"p":"payload"},{"p":"url","v":"https://flows.flowhub.org/feed.xml","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":629,"y":481,"wires":[["13d800c824983e43"]]},{"id":"c2d4ce3e6e7c2e31","type":"http request","z":"99766e7b3b3f4cdf","name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","persist":false,"insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":629,"y":675,"wires":[["f210b63040eeb212"]]},{"id":"f210b63040eeb212","type":"xml","z":"99766e7b3b3f4cdf","name":"","property":"payload","attr":"","chr":"","x":629,"y":772,"wires":[["3d604af7f2cb8912"]]},{"id":"e7289b9433d25283","type":"split","z":"99766e7b3b3f4cdf","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":946,"y":675,"wires":[["77a3c9b5811260e2"]]},{"id":"3d604af7f2cb8912","type":"change","z":"99766e7b3b3f4cdf","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.feed.entry","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":629,"y":869,"wires":[["e7289b9433d25283"]]},{"id":"77a3c9b5811260e2","type":"function","z":"99766e7b3b3f4cdf","name":"create Node-RED node from RSS item","func":"var nodeId = msg.payload.id[0].match(/.{16}$/)[0];\n\nmsg.payload = {\n    \"id\": nodeId,\n    \"type\": \"comment\",\n    \"name\": msg.payload.title[0][\"_\"],\n    \"info\": msg.payload.id[0] + \"\\n\\n\" + \"![preview](https://raw.githubusercontent.com/gorenje/flows.flowhub.org/main/\" + nodeId + \"/preview.png)\\n\", \n    \"x\": 801 * Math.random(),\n    \"y\": 699 * Math.random(),\n    \"wires\": []\n}\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1219.5,"y":675,"wires":[["9de0d672c6fbccb8"]]},{"id":"9de0d672c6fbccb8","type":"join","z":"99766e7b3b3f4cdf","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","reduceRight":false,"x":1509,"y":675,"wires":[["4edf52a8de0e4689"]]},{"id":"8c8aa0e23625fc75","type":"ClientCode","z":"99766e7b3b3f4cdf","name":"","clientcode":"function doIt() {\n    var content = payload.flowContent;\nconsole.log( payload.flowContent)\n\n        content = content.filter((elem) => {\n            return RED.nodes.node(elem.id) == undefined && RED.nodes.workspace(elem.id) == undefined\n        });\n\n    if (content.length == 0) {\n        RED.notify(\"No new content\", {\n            type: \"ok\",\n            id: \"TriggerImport\",\n            timeout: 2000\n        });\n        return;\n    }\n    RED.clipboard.import();\n\n    setTimeout(() => {\n        $('#red-ui-clipboard-dialog-import-text').val(\n            JSON.stringify(content)\n        ).trigger(\"paste\");\n\n        if (payload.autoimport) {\n            setTimeout(() => {\n                $('#red-ui-clipboard-dialog-ok').trigger('click');\n                node.send({ payload: \"ok\" })\n            }, 435);\n        } else {\n            node.send({ payload: \"ok\" })\n        }\n    }, 300);\n};\n\ndoIt();\n","format":"javascript","x":2215,"y":481,"wires":[[]]},{"id":"4edf52a8de0e4689","type":"change","z":"99766e7b3b3f4cdf","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"flowContent\": $$.payload\t}\t","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1682,"y":481,"wires":[["8c8aa0e23625fc75"]]},{"id":"13d800c824983e43","type":"delay","z":"99766e7b3b3f4cdf","name":"","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":629,"y":578,"wires":[["c2d4ce3e6e7c2e31"]]},{"id":"c17223eca0978cd1","type":"debug","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"debug 38","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1935,"y":1720,"wires":[]},{"id":"918111f709e8ef9d","type":"inject","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":755,"y":1416,"wires":[["7c7987d6eaf7d858"]]},{"id":"c32d94e35dbc9ca4","type":"split","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1266,"y":1325,"wires":[["d275586c75e7e627"]]},{"id":"d275586c75e7e627","type":"function","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"add preview image to info details","func":"if ( msg.payload.type == \"comment\" ) {\n    msg.payload.info +=  \"\\n\\n\" + \"![preview](https://raw.githubusercontent.com/gorenje/flows.flowhub.org/main/\"+msg.payload.id+\"/preview.png)\\n\";\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1425,"y":1436,"wires":[["2dec910479e794ae"]]},{"id":"2dec910479e794ae","type":"join","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","reduceRight":false,"x":1573,"y":1573,"wires":[["c17223eca0978cd1","60d1f4c2a3d42187"]]},{"id":"b6cd421b778a1ede","type":"ClientCode","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"","clientcode":"function doIt() {\n    var content = payload.flowContent;\nconsole.log( payload.flowContent)\n\n        content = content.filter((elem) => {\n            return RED.nodes.node(elem.id) == undefined && RED.nodes.workspace(elem.id) == undefined\n        });\n\n    if (content.length == 0) {\n        RED.notify(\"No new content\", {\n            type: \"ok\",\n            id: \"TriggerImport\",\n            timeout: 2000\n        });\n        return;\n    }\n    RED.clipboard.import();\n\n    setTimeout(() => {\n        $('#red-ui-clipboard-dialog-import-text').val(\n            JSON.stringify(content)\n        ).trigger(\"paste\");\n\n        if (payload.autoimport) {\n            setTimeout(() => {\n                $('#red-ui-clipboard-dialog-ok').trigger('click');\n                node.send({ payload: \"ok\" })\n            }, 435);\n        } else {\n            node.send({ payload: \"ok\" })\n        }\n    }, 300);\n};\n\ndoIt();\n","format":"javascript","x":1947,"y":1313,"wires":[[]]},{"id":"60d1f4c2a3d42187","type":"change","z":"99766e7b3b3f4cdf","g":"e8fbeebbec44ad2f","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"flowContent\": $$.payload\t}\t","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1867,"y":1423,"wires":[["b6cd421b778a1ede"]]}]