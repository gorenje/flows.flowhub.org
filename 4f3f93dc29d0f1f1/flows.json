[{"id":"4f3f93dc29d0f1f1","type":"tab","label":"[OSM] Obtain warmest places","disabled":false,"info":"### Aim\n\nThe idea is to find all the places that are warm and sunny within a radius of a location. \n\nAssume that a place is \"warm and sunny\" if within the last 24 hours, the max temperature was above 20C and the average temperature was above 15C.\n\n### Prerequisites\n\nNode-RED `package.json` needs to include the following packages:\n\n- [overpass-frontend](https://www.npmjs.com/package/overpass-frontend) - [doco](https://rawgit.com/plepe/overpass-frontend/master/doc/OverpassFrontend.html)\n- [geolib](https://www.npmjs.com/package/geolib) - [doco](https://github.com/manuelbieh/geolib#functions)\n\n### Flow Explanation\n\n\n\n### Background\n\n[Aviation Weather Center](https://www.aviationweather.gov) provides the station details, for example for station with [ICAO code](https://en.wikipedia.org/wiki/International_Civil_Aviation_Organization) of [FQIN](https://www.aviationweather.gov/adds/dataserver_current/httpparam?dataSource=metars&requestType=retrieve&format=xml&stationString=FQIN&hoursBeforeNow=12) plus it also provides a curated list of [all stations worldwide](https://www.aviationweather.gov/docs/metar/stations.txt) with latitude and longitude.\n\nThanks to the [OpenWeather](https://github.com/rooper149/OpenWeather) project and this [line of code](https://github.com/rooper149/OpenWeather/blob/a2ac902217d048e539e4e757b45d611262edc08c/OpenWeather/MetarStation.cs#L100) for putting me onto aviation weather.\n\nThe [Open Street Map](https://openstreetmap.org) provides the [overpass api](https://wiki.openstreetmap.org/wiki/Overpass_API) which may be [queried](https://wiki.openstreetmap.org/wiki/Overpass_API#The_map_query) to obtain town and city names.\n\n### Node-RED Learnings\n\n- how to make HTTP requests in parallel using the split-join nodes\n- using the debug node to count messages\n","env":[]},{"id":"a1d4dc59bee5387e","type":"group","z":"4f3f93dc29d0f1f1","g":"c6efee6e78378266","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["a76aa1bc49319486","96f09b92599b03c8","221a1cecf0aa72f6"],"x":1333,"y":422,"w":252,"h":203},{"id":"d2a05e6c6a12df63","type":"group","z":"4f3f93dc29d0f1f1","name":"get weather station details","style":{"label":true},"nodes":["6339393a9d8f3191","1db155010ca59ca9","07a7417299df7690","444775194ca43392"],"x":393,"y":373,"w":675,"h":448},{"id":"c6efee6e78378266","type":"group","z":"4f3f93dc29d0f1f1","name":"for each station within radius request weather details","style":{"label":true},"nodes":["114a853fb932e0d0","fa434e4caeea1684","33c400e8e6c424b7","4c38479e195a9f6a","a1d4dc59bee5387e"],"x":1173,"y":319,"w":1018,"h":397},{"id":"6f9406c1a4ca62cb","type":"group","z":"4f3f93dc29d0f1f1","name":"for closest and warmest stations, get the closets town or city","style":{"label":true},"nodes":["d060c638121b6b7d","ead710965d3c29c0","b8a34267af095804","4a66c625c1ef2bf6","5410f1daaed44838","838902daaeddd7b6"],"x":2489,"y":299,"w":794,"h":476},{"id":"d1321864a92c10b5","type":"group","z":"4f3f93dc29d0f1f1","name":"flow status information","style":{"label":true},"nodes":["95d472391f49fcf3","2ed9caafad1e5306","f8d22dfa44a54989","1b6752398862116a"],"x":744,"y":179,"w":1447,"h":82},{"id":"b10abb9c31d46ff6","type":"group","z":"4f3f93dc29d0f1f1","name":"Open Street Map status for IP","style":{"label":true},"nodes":["3ada41fb5f1a1fda","fdb17a30a5c7c2be","ec7581f71fceed3c"],"x":2491,"y":183,"w":821,"h":82},{"id":"6339393a9d8f3191","type":"http request","z":"4f3f93dc29d0f1f1","g":"d2a05e6c6a12df63","name":"Get list of weather stations","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://www.aviationweather.gov/docs/metar/stations.txt","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":539,"y":414,"wires":[["1db155010ca59ca9"]]},{"id":"1db155010ca59ca9","type":"split","z":"4f3f93dc29d0f1f1","g":"d2a05e6c6a12df63","name":"for each line:","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":582,"y":525,"wires":[["07a7417299df7690","95d472391f49fcf3"]]},{"id":"89f535af536ed8fb","type":"inject","z":"4f3f93dc29d0f1f1","name":"location berlin, radius 1000km","props":[{"p":"payload"},{"p":"myposition","v":"{\"latitude\":52.52437,\"longitude\":13.41053}","vt":"json"},{"p":"radius_meters","v":"1000000","vt":"num"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":230,"y":462,"wires":[["6339393a9d8f3191"]]},{"id":"07a7417299df7690","type":"function","z":"4f3f93dc29d0f1f1","g":"d2a05e6c6a12df63","name":"parse weather station data and ensure \\n station within radius distance to position","func":"var line = msg.payload;\n\nmsg.payload = {\n    icao: line.substring(20,24).trim(),\n    lat: line.substring(39,45).trim(),\n    lon: line.substring(47,54).trim(),\n}\n\nif ( msg.payload.icao.trim().match(/^[A-Z]{4}$/) ) {\n    var mtch = msg.payload.lat.match(/^([0-9]{2,3}) ([0-9]{2,3})([A-Z])$/);\n    if ( mtch ) {\n\n        msg.payload.lat = geolib.toDecimal(`${mtch[1]}° ${mtch[2]}' 0\" ${mtch[3]}`);\n        \n        mtch = msg.payload.lon.match(/^([0-9]{2,3}) ([0-9]{2,3})([A-Z])$/);\n        if ( mtch ) {\n            msg.payload.lon = geolib.toDecimal(`${mtch[1]}° ${mtch[2]}' 0\" ${mtch[3]}`);\n\n            var pt = {\n                latitude: msg.payload.lat,\n                longitude: msg.payload.lon\n            };\n\n            if ( geolib.isPointWithinRadius(pt,msg.myposition,msg.radius_meters) ) {\n                msg.url = `https://www.aviationweather.gov/adds/dataserver_current/httpparam?dataSource=metars&requestType=retrieve&format=xml&stationString=${msg.payload.icao}&hoursBeforeNow=24`\n                return msg\n            } else {\n                msg.payload = false;\n                return msg;\n            }\n        }\n    }\n}\n\nmsg.payload = false;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"geolib","module":"geolib"}],"x":727,"y":641,"wires":[["444775194ca43392"]]},{"id":"97ad80fa5d0d32e9","type":"join","z":"4f3f93dc29d0f1f1","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2351,"y":791,"wires":[["d060c638121b6b7d"]]},{"id":"95d472391f49fcf3","type":"debug","z":"4f3f93dc29d0f1f1","g":"d1321864a92c10b5","name":"total stations worldwide","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":880,"y":220,"wires":[]},{"id":"444775194ca43392","type":"switch","z":"4f3f93dc29d0f1f1","g":"d2a05e6c6a12df63","name":"is station defined?","property":"payload","propertyType":"msg","rules":[{"t":"istype","v":"object","vt":"object"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":952,"y":780,"wires":[["114a853fb932e0d0"],["97ad80fa5d0d32e9"]]},{"id":"a76aa1bc49319486","type":"http request","z":"4f3f93dc29d0f1f1","g":"a1d4dc59bee5387e","name":"request station data","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1459,"y":463,"wires":[["96f09b92599b03c8"]]},{"id":"96f09b92599b03c8","type":"xml","z":"4f3f93dc29d0f1f1","g":"a1d4dc59bee5387e","name":"","property":"payload","attr":"","chr":"","x":1452,"y":531,"wires":[["fa434e4caeea1684","f8d22dfa44a54989"]]},{"id":"114a853fb932e0d0","type":"change","z":"4f3f93dc29d0f1f1","g":"c6efee6e78378266","name":"","rules":[{"t":"set","p":"station_details","pt":"msg","to":"payload","tot":"msg","dc":true},{"t":"set","p":"requestTimeout","pt":"msg","to":"10000","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1279,"y":360,"wires":[["a76aa1bc49319486","1b6752398862116a"]]},{"id":"221a1cecf0aa72f6","type":"catch","z":"4f3f93dc29d0f1f1","g":"a1d4dc59bee5387e","name":"","scope":["a76aa1bc49319486","96f09b92599b03c8"],"uncaught":false,"x":1452,"y":584,"wires":[["4c38479e195a9f6a","2ed9caafad1e5306"]]},{"id":"fa434e4caeea1684","type":"change","z":"4f3f93dc29d0f1f1","g":"c6efee6e78378266","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"station\": $$.station_details,\t    \"details\": $$.payload\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1793,"y":489,"wires":[["33c400e8e6c424b7"]]},{"id":"d060c638121b6b7d","type":"function","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"compute closest and warmest and reduce to top thirty","func":"msg.payload = msg.payload.filter( (obj) =>{\n    return !!obj;\n})\n\nmsg.closest = [...msg.payload];\nmsg.closest.sort( function(a,b) {\n    return (a.distance < b.distance) ? -1 : 1\n});\nmsg.closest.length = 30;\n\nmsg.warmest = [...msg.payload];\nmsg.warmest.sort(function (a, b) {\n    return (a.temperature.avg < b.temperature.avg) ? 1 : -1\n});\nmsg.warmest.length = 30;\n\nmsg.payload = [\n    ...msg.warmest,\n    ...msg.closest\n];\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2715,"y":340,"wires":[["ead710965d3c29c0"]]},{"id":"33c400e8e6c424b7","type":"function","z":"4f3f93dc29d0f1f1","g":"c6efee6e78378266","name":"compute: weather conditions, ensure max temp above 20C and \\n avg above 15C and distance to position","func":"if ( parseInt(msg.payload.details.response.data[0].$.num_results) == 0 ) {\n    msg.payload = false;\n    return msg;\n} \n\nvar temps = [];\n\nvar data = msg.payload.details.response.data[0].METAR;\n\nfor ( var idx = 0 ; idx < data.length ; idx++ ) {\n    temps.push(parseFloat(data[idx].temp_c || 0) )    \n}\n\nmsg.payload = {\n    ...msg.payload,\n    temperature: {\n        max: Math.max(...temps),\n        min: Math.min(...temps),\n        avg: temps.reduce((p, d) => { return p + d }, 0) / temps.length\n    }\n}\n\nif (msg.payload.temperature.max < 20 && msg.payload.temperature.avg < 15 ) {\n    msg.payload = false;\n    return msg;\n}\n\nvar stationLoc = {\n    latitude: msg.payload.station.lat,\n    longitude: msg.payload.station.lon\n};\n\nmsg.payload = {\n    ...msg.payload,\n    distance: geolib.getDistance(msg.myposition, stationLoc, 1)\n};\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"geolib","module":"geolib"}],"x":1935,"y":595,"wires":[["97ad80fa5d0d32e9"]]},{"id":"4c38479e195a9f6a","type":"change","z":"4f3f93dc29d0f1f1","g":"c6efee6e78378266","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":1686,"y":675,"wires":[["97ad80fa5d0d32e9"]]},{"id":"2ed9caafad1e5306","type":"debug","z":"4f3f93dc29d0f1f1","g":"d1321864a92c10b5","name":"failed requests","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":2065,"y":220,"wires":[]},{"id":"f8d22dfa44a54989","type":"debug","z":"4f3f93dc29d0f1f1","g":"d1321864a92c10b5","name":"successful requests","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":1775,"y":220,"wires":[]},{"id":"1b6752398862116a","type":"debug","z":"4f3f93dc29d0f1f1","g":"d1321864a92c10b5","name":"stations within radius","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":1486,"y":220,"wires":[]},{"id":"ead710965d3c29c0","type":"split","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":2733,"y":411,"wires":[["4a66c625c1ef2bf6"]]},{"id":"b8a34267af095804","type":"function","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"Open Street Map request","func":"const overpassClient = new overpassFrontend('//overpass-api.de/api/interpreter');\n\nmsg.orig_payload = { ...msg.payload};\n\noverpassClient.BBoxQuery(\n    msg.payload.osm.query,\n    msg.payload.osm.bbox,\n    {\n        properties: overpassFrontend.TAGS,\n        limit: 5,\n        sort: true\n    },\n\n    function (err, result) {\n        if (result) {\n            node.send({ ...msg, payload: result})\n        } else {\n            node.send({ ...msg, payload: undefined} )\n        }\n    },\n\n    function (err) {\n        if (err) { \n            node.error(err) \n        } else {\n            node.send({ \n                ...msg, \n                complete: true, \n                payload: undefined \n            })\n        }\n    }\n)\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"overpassFrontend","module":"overpass-frontend"}],"x":2828,"y":624,"wires":[["5410f1daaed44838"]]},{"id":"4a66c625c1ef2bf6","type":"function","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"obtain the nearest town or city","func":"msg.payload.station.boundingbox = geolib.getBoundsOfDistance({\n    latitude: msg.payload.station.lat,\n    longitude: msg.payload.station.lon,\n}, 3000);\n\nmsg.payload.osm = {\n    bbox: {\n        minlat: msg.payload.station.boundingbox[0].latitude,\n        minlon: msg.payload.station.boundingbox[0].longitude,\n        maxlat: msg.payload.station.boundingbox[1].latitude,\n        maxlon: msg.payload.station.boundingbox[1].longitude,\n    },\n    query: \"(node[place=town];node[place=city];)\"\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"geolib","module":"geolib"}],"x":2777,"y":499,"wires":[["b8a34267af095804"]]},{"id":"5410f1daaed44838","type":"switch","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":2872,"y":734,"wires":[["838902daaeddd7b6"]]},{"id":"838902daaeddd7b6","type":"function","z":"4f3f93dc29d0f1f1","g":"6f9406c1a4ca62cb","name":"change payload to relevant info","func":"msg.payload = {\n    town: { ...msg.payload.tags },\n    loc: { ...msg.payload.center },\n    temp: { ...msg.orig_payload.temperature },\n    station: { ...msg.orig_payload.station }\n};\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3127,"y":734,"wires":[["d05fcc8d2ce88e08","c2fcb9d44f7f4edd"]]},{"id":"d05fcc8d2ce88e08","type":"debug","z":"4f3f93dc29d0f1f1","name":"show resulting towns and cities","active":true,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"","statusType":"counter","x":3491,"y":680,"wires":[]},{"id":"3ada41fb5f1a1fda","type":"http request","z":"4f3f93dc29d0f1f1","g":"b10abb9c31d46ff6","name":"OSM status for IP","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://overpass-api.de/api/status","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":2852,"y":224,"wires":[["ec7581f71fceed3c"]]},{"id":"fdb17a30a5c7c2be","type":"inject","z":"4f3f93dc29d0f1f1","g":"b10abb9c31d46ff6","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":2597,"y":224,"wires":[["3ada41fb5f1a1fda"]]},{"id":"ec7581f71fceed3c","type":"debug","z":"4f3f93dc29d0f1f1","g":"b10abb9c31d46ff6","name":"show status information","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":3156,"y":224,"wires":[]},{"id":"c2fcb9d44f7f4edd","type":"link out","z":"4f3f93dc29d0f1f1","name":"link out 79","mode":"return","links":[],"x":3379,"y":759,"wires":[]},{"id":"113dc7c68c360cd1","type":"link in","z":"4f3f93dc29d0f1f1","name":"link in 2","links":[],"x":289,"y":378,"wires":[["6339393a9d8f3191"]]}]