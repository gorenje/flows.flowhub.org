[{"id":"ebc05a6d47a9a190","type":"tab","label":"[GitHub] get all commits for repo","disabled":false,"info":"This flow utilises the [GitHub base functionality](https://flowhub.org/f/390ee0021ded4910) flow to obtain all commits in a repository. All prerequistes of that flow must be fulfilled.\n\nThe <a class=\"ahl-node-only\" data-ids=\"fb9be31c6a6872b4\">initial change node</a> in the flow sets the repository details:\n\n- owner: github username\n- repo: repository of interest\n- branch: the branch for which the commits should be retrieved\n\n### Inputs \n\nThe <a class=\"ahl-node-only\" data-ids=\"c19fc1b73848f92d\">link in node</a> is assumed to provide the `msg.github` object, for example: \n\n```javascript\nmsg.github = {\n    owner: 'octokat',\n    repo: 'kittens.robots',\n    branch: 'main'\n};\n```\n\n### Workings\n\nThe flow loops through each commit until it reaches the initial commit. It begins with the latest commit, takes the parent of that commit and repeats.\n\nOnce the parent commit is null, the first commit has been reached.\n\nThe ordering of the commits is reverse order, that is, the latest commit backward to the first commit.\n\n### Output\n\nThe payload output is an array of commit objects, e.g.:\n\n```\nmsg.paylad = [\n    ...\n    {\n        \"sha\": \"cq33b1dqacfb3ceqc3acffdbdqadb1qdf468qb7a\",\n        \"node_id\": \"C_kwDOKAh1BNoAKGM1MDBiMWQ1YWNmYjNjZTVjMzljZmZkYmQ1OWRiMTVkZjQ2ODViN2E\",\n        \"url\": \"https://.../git/commits/cq33b1dqacfb3ceqc3acffdbdqadb1qdf468qb7a\",\n        \"html_url\": \"https://.../commit/cq33b1dqacfb3ceqc3acffdbdqadb1qdf468qb7a\",\n        \"author\": {\n            \"name\": \"Author Name\",\n            \"email\": \"author@example.org\",\n            \"date\": \"2323-17-31T32:31:qZ\"\n        },\n        \"committer\": {\n            \"name\": \"Committer Name\",\n            \"email\": \"commit@fubar.org\",\n            \"date\": \"2323-17-31T32:31:qZ\"\n        },\n        \"tree\": {\n            \"sha\": \"cea3f28d6ae3aeq71f6qa6aqab48e3q473abq8\",\n            \"url\": \"https://.../git/trees/cea3f28d6ae3aeq71f6qa6aqab48e3q473abq8\"\n        },\n        \"message\": \"top level commit message\",\n        \"parents\": [\n            {\n            \"sha\": \"f76da2fecadec7aq1bc36b667eq3qb312eddae8d\",\n            \"url\": \"https://.../commits/3fq8f183c1q7372b68177q873f4bf7a1cac1feeb\",\n            \"html_url\": \"https://.../commit/3fq8f183c1q7372b68177q873f4bf7a1cac1feeb\"\n            }\n        ],\n        \"verification\": {\n            \"verified\": false,\n            \"reason\": \"unsigned\",\n            \"signature\": null,\n            \"payload\": null\n        },\n    }\n  ...\n]\n```","env":[]},{"id":"370f94720362e3b4","type":"group","z":"ebc05a6d47a9a190","name":"Version 1: get all commits for repo, commit by commit","style":{"label":true},"nodes":["20bbad33969051ee","e95730737b5a7c74","4559aaa37c73c4c7","ff2ee2a8eac4a1a1","802fe3437bb47294","8c40b10c98e6ce53","7f51c5c544864e09","4760c5b231d3f976","c4fc321626a07186","fb9be31c6a6872b4"],"x":700,"y":392,"w":1188,"h":302},{"id":"034fba117ca367e8","type":"group","z":"ebc05a6d47a9a190","name":"Version 2: using pagination API to retrieve all commits","style":{"label":true},"nodes":["fe556335a4bf9ca1","69be2272a38e0946","1d4cb1e8799b11e4","21241c302bee7147","a362f04de3abb8ee","9c0f5115e7e1af8d"],"x":838,"y":792,"w":804,"h":384},{"id":"20bbad33969051ee","type":"link call","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"[github] current repo version","links":["c90bd91e45e1ac7e"],"linkType":"static","timeout":"30","x":846,"y":558,"wires":[["802fe3437bb47294"]]},{"id":"e95730737b5a7c74","type":"link call","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"[github] get commits for sha","links":["dbdea53966e72031"],"linkType":"static","timeout":"30","x":1273,"y":653,"wires":[["4559aaa37c73c4c7"]]},{"id":"4559aaa37c73c4c7","type":"function","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"push commit onto stack and set next commit sha","func":"msg.commits.push({...msg.payload})\n\nmsg.payload = (msg.payload.parents && msg.payload.parents[0] && msg.payload.parents[0].sha);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1428,"y":605,"wires":[["4760c5b231d3f976","c4fc321626a07186"]]},{"id":"ff2ee2a8eac4a1a1","type":"switch","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"is loop done?","property":"payload","propertyType":"msg","rules":[{"t":"nnull"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":1172,"y":433,"wires":[["e95730737b5a7c74"],["8c40b10c98e6ce53"]]},{"id":"802fe3437bb47294","type":"change","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"set parent_sha and commits","rules":[{"t":"set","p":"parent_sha","pt":"msg","to":"payload","tot":"msg"},{"t":"set","p":"commits","pt":"msg","to":"[]","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":849,"y":650,"wires":[["e95730737b5a7c74"]]},{"id":"8c40b10c98e6ce53","type":"function","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"commits become payload","func":"msg.payload = [...msg.commits];\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1735,"y":439,"wires":[["8eff4fa451f7eebd"]]},{"id":"4760c5b231d3f976","type":"link out","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"link out 103","mode":"link","links":["7f51c5c544864e09"],"x":1292,"y":555,"wires":[]},{"id":"7f51c5c544864e09","type":"link in","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"link in 3","links":["4760c5b231d3f976"],"x":1109,"y":481,"wires":[["ff2ee2a8eac4a1a1"]]},{"id":"fe556335a4bf9ca1","type":"change","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"set page and allcommits collector","rules":[{"t":"set","p":"allcommits","pt":"msg","to":"[]","tot":"json"},{"t":"set","p":"page","pt":"msg","to":"1","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1004,"y":833,"wires":[["9c0f5115e7e1af8d"]]},{"id":"69be2272a38e0946","type":"function","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"reduce commit details to what is required","func":"if ( msg.payload.length > 0 ) {\n    msg.page += 1\n\n    msg.allcommits = msg.allcommits.concat(msg.payload)\n    return [msg, undefined];\n} else {\n    return [undefined, msg];\n}\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1115,"y":1131,"wires":[["1d4cb1e8799b11e4"],["a362f04de3abb8ee"]],"outputLabels":["continue","done"]},{"id":"1d4cb1e8799b11e4","type":"link call","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"","links":["dd62847c663f56d7"],"linkType":"static","timeout":"30","x":1127,"y":1010,"wires":[["69be2272a38e0946","21241c302bee7147"]]},{"id":"21241c302bee7147","type":"debug","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"message count","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"","statusType":"counter","x":1510,"y":920,"wires":[]},{"id":"29c25b52983e7014","type":"inject","z":"ebc05a6d47a9a190","name":"Trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":214,"y":741,"wires":[["06d9a1beef369e94"]]},{"id":"a362f04de3abb8ee","type":"debug","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"allcommits","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"allcommits","targetType":"msg","statusVal":"","statusType":"auto","x":1526,"y":1135,"wires":[]},{"id":"27da6b7221689f7b","type":"inject","z":"ebc05a6d47a9a190","name":"Trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":189,"y":429,"wires":[["6c92a68c3ff4fc7f"]]},{"id":"8eff4fa451f7eebd","type":"debug","z":"ebc05a6d47a9a190","name":"allcommits","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1992,"y":298,"wires":[]},{"id":"fb9be31c6a6872b4","type":"change","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"owner,branch,repo","rules":[{"t":"set","p":"repo","pt":"msg","to":"github.repo","tot":"msg"},{"t":"set","p":"owner","pt":"msg","to":"github.owner","tot":"msg"},{"t":"set","p":"branch","pt":"msg","to":"github.branch","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":863,"y":478,"wires":[["20bbad33969051ee"]]},{"id":"c4fc321626a07186","type":"debug","z":"ebc05a6d47a9a190","g":"370f94720362e3b4","name":"message count","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"","statusType":"counter","x":1762,"y":640,"wires":[]},{"id":"6c92a68c3ff4fc7f","type":"JsonSchemaValidatorWithDocu","z":"ebc05a6d47a9a190","name":"","property":"payload","propertyType":"msg","checkentireobject":false,"func":"{\n    \"title\": \"Requirements for `msg.github` for getting commits for repo.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"branch\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"branch\": {\n            \"type\": \"string\",\n            \"description\": \"Branch name for which commits should be retrieved.\"\n        }\n    }\n}","schematitle":"Requirements for `msg.github` for getting commits for repo.","x":542,"y":314,"wires":[["fb9be31c6a6872b4"]],"info":"## Requirements for \\`msg.github\\` for getting commits for repo. Type\n\n`object` ([Requirements for \\`msg.github\\` for getting commits for repo.](definition.md))\n\n# Requirements for \\`msg.github\\` for getting commits for repo. Properties\n\n| Property          | Type     | Required | Nullable       | Defined by                                                                                                                      |\n| :---------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------ |\n| [owner](#owner)   | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\")   |\n| [repo](#repo)     | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")     |\n| [branch](#branch) | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-branch.md \"undefined#/properties/branch\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## branch\n\nBranch name for which commits should be retrieved.\n\n`branch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-branch.md \"undefined#/properties/branch\")\n\n### branch Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## branch Type\n\n`string`\n"},{"id":"06d9a1beef369e94","type":"JsonSchemaValidatorWithDocu","z":"ebc05a6d47a9a190","name":"","property":"github","propertyType":"msg","checkentireobject":false,"func":"{\n    \"title\": \"Requirements for `msg.github` for getting commits for repo.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"branch\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"branch\": {\n            \"type\": \"string\",\n            \"description\": \"Branch name for which commits should be retrieved.\"\n        }\n    }\n}","schematitle":"Requirements for `msg.github` for getting commits for repo.","x":552,"y":740,"wires":[["fe556335a4bf9ca1"]],"info":"## Requirements for \\`msg.github\\` for getting commits for repo. Type\n\n`object` ([Requirements for \\`msg.github\\` for getting commits for repo.](definition.md))\n\n# Requirements for \\`msg.github\\` for getting commits for repo. Properties\n\n| Property          | Type     | Required | Nullable       | Defined by                                                                                                                      |\n| :---------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------ |\n| [owner](#owner)   | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\")   |\n| [repo](#repo)     | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")     |\n| [branch](#branch) | `string` | Required | cannot be null | [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-branch.md \"undefined#/properties/branch\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## branch\n\nBranch name for which commits should be retrieved.\n\n`branch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg.github\\` for getting commits for repo.](definition-properties-branch.md \"undefined#/properties/branch\")\n\n### branch Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## branch Type\n\n`string`\n"},{"id":"9c0f5115e7e1af8d","type":"change","z":"ebc05a6d47a9a190","g":"034fba117ca367e8","name":"owner,branch,repo","rules":[{"t":"set","p":"repo","pt":"msg","to":"github.repo","tot":"msg"},{"t":"set","p":"owner","pt":"msg","to":"github.owner","tot":"msg"},{"t":"set","p":"branch","pt":"msg","to":"github.branch","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1092,"y":917,"wires":[["1d4cb1e8799b11e4"]]}]