[{"id":"ac7774554793f417","type":"tab","label":"Visual Flow Based Programming","disabled":false,"info":"::: aim\n\nDescribe what is Visual Flow Based Programming, visually in one flow or less.\n\n:::\n\n### Description\n\n[Flow Based Programming](https://jpaulm.github.io/fbp/index.html) (FBP) goes back to the 1960s and is a complete paradigm shift placing the focus on data *flow* and not *algorithmic manipulation* of data.\n\nTo begin with, some terminology:\n\n- a *flow* is the program, a flow describes the manipulation of data that *flows* through it,\n- flows consist of *nodes*, these are the computational units that do the work. In Node-RED, nodes are represented by rectangles,\n- wires connect the nodes and describe the path that the data takes through a flow, i.e., the program. Wires are represented by the lines connecting the rectangles.\n\nVisually one can think of:\n\n- a rectangle represents computational work, manipulation of data,\n- a line represents the flow of data, the pathway of the data through the flow diagram\n\nData flows from left to right, data enters a computational unit (i.e. a rectangle) on the left side and exits, having been modified by the computational unit (i.e., rectangle), on the right side.\n\nAs the data moves through the flow, it is molded into shape - imagine a factory assembly line, perhaps a car assembly line. As the car passes along the assembly line, it gradually takes on shape until at the end, the car is complete and driven off to the carpark.\n\nI sometimes call wires *pipes* since for me stuff *flows* through pipes while wires conduct electricity - the term *pipes* makes for me more sense. Additionally, Unix *pipes* are the exact same FBP paradigm only textually.\n\n### Example 1\n\nWith that basis, looking at the <a class=\"ahl-group-only\" data-ids=\"da7936d50a5b762c\">first flow</a>, one sees three computational units connected by two pipes: three nodes and two wires in Node-RED terminology.\n\nLooking closer, the flow has an <a class=\"ahl-node-only\" data-ids=\"e67429070592ba53\">inject node</a> connected to a <a class=\"ahl-node-only\" data-ids=\"c0c373c795859694\">function node</a> which in turn is connected to a <a class=\"ahl-node-only\" data-ids=\"8d61f790f5ea511d\">debug node</a>. We are confronted by node *types* - each computational unit (i.e., node) has a different purpose and that purpose is described by its *type*.\n\nThe types used in this flow are:\n\n- an *inject* node is responsible for *injecting* data into a flow, it is a data generator node,\n- a *function* node is computation defined by Javascript code, it applies its *functionality* to the data passing through,\n- a *debug* node is responsible for providing insights into the data and its current state, a *debug* node displays the data it receives in a panel within Node-RED.\n\nThis flow represents the central concept of flow based programming: somewhere data is generated, somewhere that data is manipulated and somewhere the manipulated data is outputted. Every program, every algorithm and every flow when *focussed on the data*, has three core actions: obtain, manipulate, return.\n\nPutting this together, I can say that the <a class=\"ahl-node-only\" data-ids=\"e67429070592ba53\">inject node</a> obtains the data, the <a class=\"ahl-node-only\" data-ids=\"c0c373c795859694\">function node</a> manipulates the data and the <a class=\"ahl-node-only\" data-ids=\"8d61f790f5ea511d\">debug node</a> returns the data. Above I wrote the rectangles *manipulate* the data but inject and debug do not *manipulate*, i.e., change the data. Manipulation includes generation (in the case of inject) and passing on the data (in the case of debug), so I would argue *all* nodes *manipulate* the data.\n\n\n\n","env":[]},{"id":"da7936d50a5b762c","type":"group","z":"ac7774554793f417","name":"Data flows","style":{"label":true},"nodes":["c0c373c795859694","e67429070592ba53","8d61f790f5ea511d"],"x":29,"y":94,"w":610,"h":82},{"id":"c0c373c795859694","type":"function","z":"ac7774554793f417","g":"da7936d50a5b762c","name":"function","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":334,"y":135,"wires":[["8d61f790f5ea511d"]]},{"id":"e67429070592ba53","type":"inject","z":"ac7774554793f417","g":"da7936d50a5b762c","name":"inject","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":125,"y":135,"wires":[["c0c373c795859694"]]},{"id":"8d61f790f5ea511d","type":"debug","z":"ac7774554793f417","g":"da7936d50a5b762c","name":"debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":543,"y":135,"wires":[]}]