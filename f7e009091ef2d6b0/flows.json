[{"id":"f7e009091ef2d6b0","type":"tab","label":"[NodeDev] Neural-Network Builder","disabled":false,"info":"### Aim\n\nThis flow maintains the [Neural Network Builder](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-neuralnet-builder) node package.\n\n::: requirements\n\n- [nodedev](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-nodedev) nodes are used to maintain the codebase.\n- [nodedev backend flow](https://flowhub.org/f/d0506e991d512ace) for GitHub & NPM interaction.\n\n:::\n\n![img](https://raw.githubusercontent.com/gorenje/flows.flowhub.org/main/4e2d8c13066b705e/preview.png)\n\n::: artifacts\n\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-neuralnet-builder)\n- [Node-RED node page](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-neuralnet-builder)\n- [GitHub Repo](https://github.com/gorenje/node-red-contrib-neuralnet-builder)\n\n:::\n\n### Example Flows\n\n- [Abalone dataset](https://flowhub.org/f/4e2d8c13066b705e)\n- [Multilayer Neural Network](https://flowhub.org/f/0afa833f1084c333)\n\n### Related Flows\n\n- [Nodedev package development](https://flowhub.org/f/b92be5062203ff69)\n\n","env":[]},{"id":"207ab18488b22a2f","type":"group","z":"f7e009091ef2d6b0","name":"Step 1: Install development flow","style":{"label":true},"nodes":["3ba14aa78c1ce3f4"],"x":110,"y":375,"w":472,"h":82},{"id":"2b99b089acea5755","type":"group","z":"f7e009091ef2d6b0","name":"Step 2: Install package locally","style":{"label":true,"fill":"#e3f3d3","fill-opacity":"0.64"},"nodes":["e7918b770f03f5db"],"x":110,"y":489,"w":212,"h":82},{"id":"980c1cbaa5cfa016","type":"PkgFile","z":"f7e009091ef2d6b0","name":"00-base.html","filename":"nodes/00-base.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n\nfunction nbb_labelStyle() {\n  /*\n    because there is not a better hook to connect up the event\n    listener, misuse the label styling for this. Also don't register a\n    new listener each time, maintain only one listener by removing and\n    readding.\n  */\n  var that = this;\n  var functName = \"neuralnet:\" + that.id;\n\n  if ( !window[functName] ) {\n    window[functName] = (e,m) => {\n      if ( m.msg == \"weight-change\" && RED.nodes.node(m.node) ) {\n        (RED.nodes.node(m.node).weights ||= {})[ m.to ] = m.weight;\n\n        if ( that.treeList ) {\n          that.treeList.treeList('data',that.generateTreeListData());\n          setTimeout(function() {\n            if ( that.treeList ) {\n              that.treeList.treeList('show',that.id);\n            }\n          },100);\n        }\n      }\n    }\n  }\n\n  RED.comms.unsubscribe(\"neuralnet:\"+this.id, window[functName]);\n  RED.comms.subscribe(\"neuralnet:\"+this.id, window[functName] );\n\n  return this.name ? \"node_label_italic\":\"\";\n};\n\nfunction nnb_oneditsave() {\n  var that = this;\n  that.treeList = null;\n};\n\nfunction nnb_oneditcancel() {\n  var that = this;\n  that.treeList = null;\n};\n\nfunction nnb_oneditdelete() {\n  var that = this;\n  that.treeList = null;\n};\n\nfunction nnb_oneditresize() {\n  var rows = $(\"#dialog-form>div:not(.node-input-weights-row)\");\n  var height = $(\"#dialog-form\").height();\n  for (var i=0;i<rows.length;i++) {\n    height -= $(rows[i]).outerHeight(true);\n  }\n  var editorRow = $(\"#dialog-form>div.node-input-weights-row\");\n  height -= (parseInt(editorRow.css(\"marginTop\"))+parseInt(editorRow.css(\"marginBottom\")));\n  $(\".node-input-weights-row\").css(\"height\",height+\"px\");\n};\n\nfunction nnb_oneditprepare() {\n  var that = this;\n\n  if ( that.type == \"nbb-input-node\" ) { return; }\n\n  $(\"#node-input-bias\").typedInput({\n    type:\"num\",\n    types:[\"num\"],\n    typeField: \"#node-input-bias-type\"\n  });\n\n  $(\"#node-input-threshold\").typedInput({\n    type:\"num\",\n    types:[\"num\"],\n    typeField: \"#node-input-bias-type\"\n  });\n\n  if ( !that.generateTreeListData ) {\n    that.generateTreeListData = function() {\n      var possibleTypes = [\"nnb-input-node\", \"nnb-output-node\",\n                           \"nnb-layer-node\"];\n      var inLinks = [\n        {\n          label: 'Connection Weights',\n          icon: 'fa fa-link',\n          class: 'red-ui-palette-header',\n          checkbox: false,\n          radio: false,\n          expanded: true,\n          id: that.id,\n          children: [\n          ]\n        }\n      ];\n\n      RED.nodes.eachNode( function(n) {\n        RED.nodes.getNodeLinks(n).forEach(function(l) {\n          if ( l.target.id == that.id && possibleTypes.indexOf(l.source.type) > -1 ) {\n            inLinks[0].children.push( {\n              id: l.source.id,\n              node: RED.nodes.node(l.source.id),\n              label: (\n                (l.source.name || l.source.actfunct || l.source._def.paletteLabel) +\n                  (l.source.bias ? (\": \" + l.source.bias) : \" - \") +\n                  \" Weight: \" + ( (that.weights||{})[l.source.id] || \"1\")\n              ),\n              selected: false,\n              checkbox: false,\n              radio: false\n            })\n          }\n        })\n      });\n      return inLinks\n    };\n  }\n\n  that.treeList = $(\"<div>\")\n    .css({width: \"100%\", height: \"100%\"})\n    .appendTo(\".node-input-weights-row\")\n    .treeList({autoSelect:false})\n    .on('treelistitemmouseover',function(e,item) {\n      if (item.node) {\n        item.node.highlighted = true;\n        item.node.dirty = true;\n        RED.view.redraw();\n      }\n    })\n    .on('treelistitemmouseout',function(e,item) {\n      if (item.node) {\n        item.node.highlighted = false;\n        item.node.dirty = true;\n        RED.view.redraw();\n      }\n    });\n\n  that.treeList.treeList('data',that.generateTreeListData());\n  that.treeList.treeList(\"filter\", null);\n  setTimeout(function() {\n    that.treeList.treeList('show',that.id);\n  },100);\n};\n\n</script>\n","output":"str","x":753,"y":1027,"wires":[["c632aedd561368fe"]]},{"id":"c632aedd561368fe","type":"PkgFile","z":"f7e009091ef2d6b0","name":"05-input-node.html","filename":"nodes/05-input-node.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('nnb-input-node', {\n    category: 'Neural Net',\n    color: '#ffefef',\n    icon: \"subflow.svg\",\n    paletteLabel: \"Input\",\n    defaults: {\n      name: {\n        value:\"\"\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle:    nbb_labelStyle,\n    oneditsave:    nnb_oneditsave,\n    oneditcancel:  nnb_oneditcancel,\n    oneditdelete:  nnb_oneditdelete,\n    oneditresize:  nnb_oneditresize,\n    oneditprepare: nnb_oneditprepare\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"nnb-input-node\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"nnb-input-node\">\n    <p>An input node placed at the beginning of an Neural Network.</p>\n</script>\n","output":"str","x":753,"y":1077,"wires":[["5c5da71affe8664e"]]},{"id":"5c5da71affe8664e","type":"PkgFile","z":"f7e009091ef2d6b0","name":"10-hidden-node.html","filename":"nodes/10-hidden-node.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('nnb-layer-node', {\n    category: 'Neural Net',\n    color: '#ffffef',\n    icon: \"subflow.svg\",\n    paletteLabel: 'Hidden',\n    defaults: {\n      name: {\n        value:\"\"\n      },\n      bias: {\n        value: 0.0,\n        validate:RED.validators.number()\n      },\n      threshold: {\n        value: 0.0,\n        validate:RED.validators.number()\n      },\n      weights: {\n        value: {}\n      },\n      actfunct: {\n        value: \"Identity\"\n      }\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this.actfunct || this._def.paletteLabel) + \": \" + (this.bias || \"0\") + \", \" + (this.threshold || \"0\");\n    },\n\n    labelStyle:    nbb_labelStyle,\n    oneditsave:    nnb_oneditsave,\n    oneditcancel:  nnb_oneditcancel,\n    oneditdelete:  nnb_oneditdelete,\n    oneditresize:  nnb_oneditresize,\n    oneditprepare: nnb_oneditprepare\n\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"nnb-layer-node\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-bias\"><i class=\"fa fa-tag\"></i> Bias</label>\n        <input type=\"text\" id=\"node-input-bias\" placeholder=\"0.0\">\n        <input type=\"hidden\" id=\"node-input-bias-type\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-threshold\"><i class=\"fa fa-tag\"></i> Threshold</label>\n        <input type=\"text\" id=\"node-input-threshold\" placeholder=\"0.0\">\n        <input type=\"hidden\" id=\"node-input-threshold-type\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-actfunct\">Activation Function</span></label>\n        <select id=\"node-input-actfunct\" style=\"width: 70%\">\n            <option value=\"Identity\" selected>Identity</option>\n            <option value=\"Inverse\">Inverse</option>\n            <option value=\"BinaryStep\">BinaryStep</option>\n            <option value=\"Bipolar\">Bipolar</option>\n            <option value=\"SoftStep\">SoftStep</option>\n            <option value=\"Sigmoid\">Sigmoid</option>\n            <option value=\"Logistic\">Logistic</option>\n            <option value=\"BipolarSigmoid\">BipolarSigmoid</option>\n            <option value=\"Tanh\">Tanh</option>\n            <option value=\"HardTanh\">HardTanh</option>\n            <option value=\"ArcTan\">ArcTan</option>\n            <option value=\"SoftSign\">SoftSign</option>\n            <option value=\"ElliotSig\">ElliotSig</option>\n            <option value=\"Erf\">Erf</option>\n            <option value=\"Sinc\">Sinc</option>\n            <option value=\"Sinusoid\">Sinusoid</option>\n            <option value=\"Gaussian\">Gaussian</option>\n            <option value=\"ISRU\">ISRU</OPTION>\n            <option value=\"ReLU\">ReLU</option>\n            <option value=\"GELU\">GELU</OPTION>\n            <option value=\"PReLU\">PReLU</option>\n            <option value=\"ELU\">ELU</OPTION>\n            <option value=\"SELU\">SELU</OPTION>\n            <option value=\"SoftPlus\">SoftPlus</option>\n            <option value=\"Mish\">Mish</option>\n            <option value=\"SQNL\">SQNL</OPTION>\n            <option value=\"BentIdentity\">BentIdentity</option>\n            <option value=\"Swish1\">Swish1</option>\n            <option value=\"SiLU\">SiLU</option>\n        </select>\n    </div>\n\n    <div class=\"form-row node-input-weights-row\"></div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"nnb-layer-node\">\n    <p>A hidden node designed to be placed between input and output nodes.</p>\n</script>\n","output":"str","x":753,"y":1127,"wires":[["a2b859b42fb3219c"]]},{"id":"a2b859b42fb3219c","type":"PkgFile","z":"f7e009091ef2d6b0","name":"15-output-node.html","filename":"nodes/15-output-node.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('nnb-output-node', {\n    category: 'Neural Net',\n    color: '#efefef',\n    icon: \"subflow.svg\",\n    paletteLabel: 'Output',\n    defaults: {\n      name: {\n        value:\"\"\n      },\n      weights: {\n        value: {}\n      }\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle:    nbb_labelStyle,\n    oneditsave:    nnb_oneditsave,\n    oneditcancel:  nnb_oneditcancel,\n    oneditdelete:  nnb_oneditdelete,\n    oneditresize:  nnb_oneditresize,\n    oneditprepare: nnb_oneditprepare\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"nnb-output-node\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n\n    <div class=\"form-row node-input-weights-row\"></div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"nnb-output-node\">\n    <p>An output node placed at the end of a Neural Network.</p>\n</script>\n","output":"str","x":753,"y":1177,"wires":[["a8978734d0ae6a40"]]},{"id":"a8978734d0ae6a40","type":"PkgFile","z":"f7e009091ef2d6b0","name":"25-backprop.html","filename":"nodes/25-backprop.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('nnb-backprop',{\n    color: '#e3edef',\n    icon: \"subflow.svg\",\n    category: 'Neural Net',\n    paletteLabel: \"Backprop\",\n    defaults: {\n      name: {\n        value:\"\",\n      },\n      scope: {\n        value:null,\n        type:\"*[]\"\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditprepare: function() {\n      var node = this;\n      var scope = node.scope || [];\n\n      this._resize = function() {\n        var rows = $(\"#dialog-form>div:not(.node-input-target-list-row)\");\n        var height = $(\"#dialog-form\").height();\n        for (var i=0;i<rows.length;i++) {\n          height -= $(rows[i]).outerHeight(true);\n        }\n        var editorRow = $(\"#dialog-form>div.node-input-target-list-row\");\n        editorRow.css(\"height\",height+\"px\");\n      };\n\n      var search = $(\"#node-input-backprop-target-filter\").searchBox({\n        style: \"compact\",\n        delay: 300,\n        change: function() {\n          var val = $(this).val().trim().toLowerCase();\n          if (val === \"\") {\n            dirList.treeList(\"filter\", null);\n            search.searchBox(\"count\",\"\");\n          } else {\n            var count = dirList.treeList(\"filter\", function(item) {\n              return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1\n            });\n            search.searchBox(\"count\",count+\" / \"+candidateNodes.length);\n          }\n        }\n      });\n\n      var dirList = $(\"#node-input-backprop-target-container-div\").css({\n        width: \"100%\",\n        height: \"100%\"\n      }).treeList({multi:true}).on(\"treelistitemmouseover\", function(e, item) {\n        item.node.highlighted = true;\n        item.node.dirty = true;\n        RED.view.redraw();\n      }).on(\"treelistitemmouseout\", function(e, item) {\n        item.node.highlighted = false;\n        item.node.dirty = true;\n        RED.view.redraw();\n      });\n      var candidateNodes = RED.nodes.filterNodes({z:node.z,\n                                                  type:\"nnb-output-node\"});\n      var allChecked = true;\n      var items = [];\n      var nodeItemMap = {};\n\n      candidateNodes.forEach(function(n) {\n        if (n.id === node.id) {\n          return;\n        }\n        var isChecked = scope.indexOf(n.id) !== -1;\n\n        allChecked = allChecked && isChecked;\n\n        var nodeDef = RED.nodes.getType(n.type);\n        var label;\n        var sublabel;\n        if (nodeDef) {\n          var l = nodeDef.label;\n          label = (typeof l === \"function\" ? l.call(n) : l)||\"\";\n          sublabel = n.type;\n          if (sublabel.indexOf(\"subflow:\") === 0) {\n            var subflowId = sublabel.substring(8);\n            var subflow = RED.nodes.subflow(subflowId);\n            sublabel = \"subflow : \"+subflow.name;\n          }\n        }\n        if (!nodeDef || !label) {\n          label = n.type;\n        }\n        nodeItemMap[n.id] = {\n          node: n,\n          label: label,\n          sublabel: sublabel,\n          selected: isChecked,\n          checkbox: true\n        };\n        items.push(nodeItemMap[n.id]);\n      });\n\n      dirList.treeList('data',items);\n\n      $(\"#node-input-backprop-target-select\").on(\"click\", function(e) {\n        e.preventDefault();\n        var preselected = dirList.treeList('selected').map(function(n) {return n.node.id});\n        RED.tray.hide();\n        RED.view.selectNodes({\n          selected: preselected,\n          onselect: function(selection) {\n            RED.tray.show();\n            var newlySelected = {};\n            selection.forEach(function(n) {\n              newlySelected[n.id] = true;\n              if (nodeItemMap[n.id]) {\n                nodeItemMap[n.id].treeList.select(true);\n              }\n            })\n            preselected.forEach(function(id) {\n              if (!newlySelected[id]) {\n                nodeItemMap[id].treeList.select(false);\n              }\n            })\n          },\n          oncancel: function() {\n            RED.tray.show();\n          },\n          filter: function(n) {\n            return n.id !== node.id;\n          }\n        });\n      })\n    },\n\n    oneditsave: function() {\n      this.scope = $(\"#node-input-backprop-target-container-div\").treeList('selected').map(function(i) { return i.node.id})\n    },\n\n    oneditresize: function(size) {\n      this._resize();\n    }\n\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"nnb-backprop\">\n  <div class=\"form-row node-input-target-row\">\n    <button id=\"node-input-backprop-target-select\" class=\"red-ui-button\" data-i18n=\"common.label.selectNodes\">Select</button>\n  </div>\n\n  <div class=\"form-row node-input-target-row node-input-target-list-row\" style=\"position: relative; min-height: 100px\">\n    <div style=\"position: absolute; top: -30px; right: 0;\"><input type=\"text\" id=\"node-input-backprop-target-filter\"></div>\n    <div id=\"node-input-backprop-target-container-div\"></div>\n  </div>\n\n  <div class=\"form-row\">\n    <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"common.label.name\">Name</span></label>\n    <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]common.label.name\" placeholder=\"Name\">\n  </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"nnb-backprop\">\n  <p>Triggers the backpropagtion step when input comes in. Sends message once complete.</p>\n</script>\n","output":"str","x":753,"y":1227,"wires":[["abf9a30eba7efd63"]]},{"id":"abf9a30eba7efd63","type":"PkgFile","z":"f7e009091ef2d6b0","name":"30-trainer.html","filename":"nodes/30-trainer.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('nnb-trainer',{\n    color: '#e5e4ef',\n    icon: \"subflow.svg\",\n    category: 'Neural Net',\n    paletteLabel: \"Trainer\",\n    defaults: {\n      name: {\n        value:\"\",\n      },\n      scope: {\n        value:null,\n        type:\"*[]\"\n      },\n      learningrate: {\n        value:0.3,\n        required: true,\n        validate:RED.validators.number()\n      },\n      weightmin: {\n        value:-1000,\n        required: true,\n        validate:RED.validators.number()\n      },\n      weightmax: {\n        value:1000,\n        required: true,\n        validate:RED.validators.number()\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditprepare: function() {\n      var node = this;\n      var scope = node.scope || [];\n\n      this._resize = function() {\n        var rows = $(\"#dialog-form>div:not(.node-input-target-list-row)\");\n        var height = $(\"#dialog-form\").height();\n        for (var i=0;i<rows.length;i++) {\n          height -= $(rows[i]).outerHeight(true);\n        }\n        var editorRow = $(\"#dialog-form>div.node-input-target-list-row\");\n        editorRow.css(\"height\",height+\"px\");\n      };\n\n      var search = $(\"#node-input-trainer-target-filter\").searchBox({\n        style: \"compact\",\n        delay: 300,\n        change: function() {\n          var val = $(this).val().trim().toLowerCase();\n          if (val === \"\") {\n            dirList.treeList(\"filter\", null);\n            search.searchBox(\"count\",\"\");\n          } else {\n            var count = dirList.treeList(\"filter\", function(item) {\n              return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1\n            });\n            search.searchBox(\"count\",count+\" / \"+candidateNodes.length);\n          }\n        }\n      });\n\n      var dirList = $(\"#node-input-trainer-target-container-div\").css({\n        width: \"100%\",\n        height: \"100%\"\n      }).treeList({multi:true}).on(\"treelistitemmouseover\", function(e, item) {\n        item.node.highlighted = true;\n        item.node.dirty = true;\n        RED.view.redraw();\n      }).on(\"treelistitemmouseout\", function(e, item) {\n        item.node.highlighted = false;\n        item.node.dirty = true;\n        RED.view.redraw();\n      });\n      var candidateNodes = RED.nodes.filterNodes({z:node.z,\n                                                  type:\"nnb-input-node\"});\n      var allChecked = true;\n      var items = [];\n      var nodeItemMap = {};\n\n      candidateNodes.forEach(function(n) {\n        if (n.id === node.id) {\n          return;\n        }\n        var isChecked = scope.indexOf(n.id) !== -1;\n\n        allChecked = allChecked && isChecked;\n\n        var nodeDef = RED.nodes.getType(n.type);\n        var label;\n        var sublabel;\n        if (nodeDef) {\n          var l = nodeDef.label;\n          label = (typeof l === \"function\" ? l.call(n) : l)||\"\";\n          sublabel = n.type;\n          if (sublabel.indexOf(\"subflow:\") === 0) {\n            var subflowId = sublabel.substring(8);\n            var subflow = RED.nodes.subflow(subflowId);\n            sublabel = \"subflow : \"+subflow.name;\n          }\n        }\n        if (!nodeDef || !label) {\n          label = n.type;\n        }\n        nodeItemMap[n.id] = {\n          node: n,\n          label: label,\n          sublabel: sublabel,\n          selected: isChecked,\n          checkbox: true\n        };\n        items.push(nodeItemMap[n.id]);\n      });\n\n      dirList.treeList('data',items);\n\n      $(\"#node-input-trainer-target-select\").on(\"click\", function(e) {\n        e.preventDefault();\n        var preselected = dirList.treeList('selected').map(function(n) {return n.node.id});\n        RED.tray.hide();\n        RED.view.selectNodes({\n          selected: preselected,\n          onselect: function(selection) {\n            RED.tray.show();\n            var newlySelected = {};\n            selection.forEach(function(n) {\n              newlySelected[n.id] = true;\n              if (nodeItemMap[n.id]) {\n                nodeItemMap[n.id].treeList.select(true);\n              }\n            })\n            preselected.forEach(function(id) {\n              if (!newlySelected[id]) {\n                nodeItemMap[id].treeList.select(false);\n              }\n            })\n          },\n          oncancel: function() {\n            RED.tray.show();\n          },\n          filter: function(n) {\n            return n.id !== node.id;\n          }\n        });\n      })\n    },\n\n    oneditsave: function() {\n      this.scope = $(\"#node-input-trainer-target-container-div\").treeList('selected').map(function(i) { return i.node.id})\n    },\n\n    oneditresize: function(size) {\n      this._resize();\n    }\n\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"nnb-trainer\">\n  <div class=\"form-row\">\n    <label for=\"node-input-learningrate\"><i class=\"fa fa-tag\"></i> <span>Learning Rate</span></label>\n    <input type=\"text\" id=\"node-input-learningrate\" placeholder=\"0.4\">\n    <input type=\"hidden\" id=\"node-input-learningrate\">\n  </div>\n\n  <div class=\"form-row\"><i class=\"fa fa-sign-in\"></i> <span>Weight Range</span>:</div>\n  <div class=\"form-row\"><label></label>\n        <span>Min</span>: <input type=\"text\" id=\"node-input-weightmin\" style=\"width:100px;\"/>\n        &nbsp;&nbsp;<span>Max</span>: <input type=\"text\" id=\"node-input-weightmax\" style=\"width:100px;\"/>\n  </div>\n\n  <div class=\"form-row node-input-target-row\">\n    <button id=\"node-input-trainer-target-select\" class=\"red-ui-button\" data-i18n=\"common.label.selectNodes\">Select</button>\n  </div>\n\n  <div class=\"form-row node-input-target-row node-input-target-list-row\" style=\"position: relative; min-height: 100px\">\n    <div style=\"position: absolute; top: -30px; right: 0;\"><input type=\"text\" id=\"node-input-trainer-target-filter\"></div>\n    <div id=\"node-input-trainer-target-container-div\"></div>\n  </div>\n\n  <div class=\"form-row\">\n    <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"common.label.name\">Name</span></label>\n    <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n  </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"nnb-trainer\">\n  <p>Trainer node for the construction of an artificial neural network.</p>\n</script>\n","output":"str","x":753,"y":1277,"wires":[["a7ebd90571ea89cd"]]},{"id":"a7ebd90571ea89cd","type":"PkgFile","z":"f7e009091ef2d6b0","name":"00-base.js","filename":"nodes/00-base.js","format":"javascript","syntax":"mustache","template":"/* empty */\n","output":"str","x":1040,"y":1024,"wires":[["b699199092ce4487"]]},{"id":"b699199092ce4487","type":"PkgFile","z":"f7e009091ef2d6b0","name":"05-input-node.js","filename":"nodes/05-input-node.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  RED.nodes.registerType(\"nnb-input-node\",\n                         require('./lib/common.js').neuralNode.InputNode(RED) );\n}\n","output":"str","x":1040,"y":1074,"wires":[["94ebc74bcd2f3264"]]},{"id":"94ebc74bcd2f3264","type":"PkgFile","z":"f7e009091ef2d6b0","name":"10-hidden-node.js","filename":"nodes/10-hidden-node.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  RED.nodes.registerType(\"nnb-layer-node\",\n                         require('./lib/common.js').neuralNode.HiddenNode(RED) );\n}\n","output":"str","x":1040,"y":1124,"wires":[["7187d4b482e9b73d"]]},{"id":"7187d4b482e9b73d","type":"PkgFile","z":"f7e009091ef2d6b0","name":"15-output-node.js","filename":"nodes/15-output-node.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  RED.nodes.registerType(\"nnb-output-node\",\n                         require('./lib/common.js').neuralNode.OutputNode(RED) );\n}\n","output":"str","x":1040,"y":1174,"wires":[["dbcc5d1dc7c319ca"]]},{"id":"dbcc5d1dc7c319ca","type":"PkgFile","z":"f7e009091ef2d6b0","name":"25-backprop.js","filename":"nodes/25-backprop.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function PropCompleted(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.values = [];\n\n    node.on(\"input\",function(msg, send, done) {\n      if ( msg.topic == \"reset\" ) {\n        node.values = [];\n        return;\n      }\n\n      if ( msg.topic == \"training-done\" ) {\n        /* Assume this is connected to the trainer node and just echo\n         * the message back to it - it's generated by the trainer.\n         */\n        send(msg);\n        done();\n        return;\n      }\n\n      /*\n       * Here the node expects as many 'output' messages as the scope, i.e.,\n       * the output neurons it is connected to. Once all outputs have\n       * arrived, a backpropagation may be triggered.\n       */\n      if ( msg.topic == \"output\" ) {\n        if ( cfg.scope.indexOf(msg.output_node_id) < 0 ) {\n          return;\n        }\n\n        node.values.push({ ...msg });\n\n        if ( node.values.length == cfg.scope.length ) {\n          send({ topic: \"output-generated\", values: node.values });\n          done();\n          return\n        }\n\n        return;\n      }\n\n      if ( msg.topic == \"trigger-backprop\" ) {\n\n        if ( node.values.length < cfg.scope.length ) {\n          send(msg);\n          done();\n          return;\n        }\n\n        send(msg);\n        node.status({ fill:\"green\", shape:\"dot\", text:\"started backprop\" });\n\n        var error_values = {\n          \"total\": 0\n        }\n        for ( var idx = 0 ; idx < node.values.length ; idx++ ) {\n          var outdata = node.values[idx];\n\n          var node_error = Math.pow( outdata.desired_value -\n                                     outdata.value, 2) * 0.5;\n\n          error_values[outdata.output_node_id] = node_error;\n          error_values[\"total\"] += node_error;\n        }\n\n        for ( var idx = 0 ; idx < node.values.length ; idx++ ) {\n          var output_nde = RED.nodes.getNode( node.values[idx].output_node_id );\n\n          output_nde.backprop({\n            current_value: node.values[idx].value,\n            desired_value: node.values[idx].desired_value,\n            error_values:  { ...error_values }\n          });\n        }\n\n        node.status({});\n        node.bp_call_counter = 0;\n        node.values = [];\n        send({topic: \"backprop-completed\"});\n        done();\n      }\n    });\n  }\n  RED.nodes.registerType(\"nnb-backprop\",PropCompleted);\n}\n","output":"str","x":1040,"y":1224,"wires":[["c6996e59a0b7510c"]]},{"id":"c6996e59a0b7510c","type":"PkgFile","z":"f7e009091ef2d6b0","name":"30-trainer.js","filename":"nodes/30-trainer.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function PropCompleted(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.stop_training = false;\n    node.done_training = false;\n\n    /*\n     * The logic here is that we count how many output nodes there are and\n     * multipe that number by the number of input nodes. Each output nodes\n     * generates an event when it's done its reset. We collect these events\n     * and count how many we received. Once we have gotten the input times\n     * output number of events, we trigger a reset-completed event on this\n     * node. That triggers a fast-forward on the network.\n     *\n     * In truth, input times output is baseline number of events. There are\n     * many more depending on the connections within the network. Messages\n     * are copied and spread out over  the network, so there are many many\n     * more potential \"reset-complete\" events from the output nodes.\n     */\n    node.trigger_reset = () => {\n      var msg = {}\n      msg.resetid = RED.util.generateId();\n      msg.topic = 'reset';\n\n      var outnodescntr = 0;\n      RED.nodes.eachNode( function(n) {\n        if ( n.z == node.z && n.type == 'nnb-output-node' && n.d == undefined ) {\n          outnodescntr += 1\n        }\n      });\n\n      var cntr = {};\n      for ( var idx = 0 ; idx < cfg.scope.length; idx++ ) {\n        cntr[cfg.scope[idx]] = outnodescntr;\n      }\n\n      var hndlr = function(objmsg) {\n        cntr[objmsg.input_node_id] -= 1\n\n        var flag = true;\n        for ( var idx = 0 ; idx < cfg.scope.length; idx++ ) {\n          flag = flag && (cntr[cfg.scope[idx]] < 1)\n        }\n\n        if ( flag ) {\n          node.off( 'reset-complete:' + objmsg.resetid, hndlr );\n          node.emit('input', { topic: 'reset-completed' });\n        }\n      }\n      node.on('reset-complete:'+msg.resetid, hndlr);\n\n      /* send reset message to all input nodes */\n      for ( var idx = 0 ; idx < cfg.scope.length; idx++ ) {\n        RED.nodes.getNode( cfg.scope[idx] ).emit('input', msg );\n      }\n    };\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    /*\n     * Deal with input messages.\n    */\n    node.on(\"input\",function(msg, send, done) {\n      if ( msg.topic == \"dataset\" ) {\n        node.trainingset_index = 0;\n        node.training_size     = parseInt(msg.training_size);\n\n        node.testingset_index  = 0;\n        node.testing_size      = parseInt(msg.testing_size);\n\n        node.dataset           = msg.payload;\n        node.stop_training     = false\n        node.done_training     = false;\n\n        node.trigger_reset()\n        return;\n      }\n\n      if ( msg.topic == \"backprop-completed\" || msg.topic == \"training-done\" ) {\n        /* trigger a network reset - this allows doing an evaluation of a\n           data point.\n         */\n        node.trigger_reset();\n        return;\n      }\n\n      if ( msg.topic == \"output-generated\" ) {\n        if ( node.done_training ) {\n          send({ ...msg,\n                 topic: \"test-output\",\n                 idx: node.testingset_index\n          });\n          node.trigger_reset();\n        } else {\n          /* intention that when this is connected to the backprop\n             node, this will cause an training loop since the backprop generates\n             this message when it has collected it's data for doing a backprop.\n           */\n          send({...msg, topic: \"trigger-backprop\"});\n          done();\n        }\n\n        return;\n      }\n\n      if ( msg.topic == \"random-weights\" ) {\n        for ( var idx = 0 ; idx < cfg.scope.length; idx++ ) {\n          msg = { ...msg,\n                  max: parseFloat(cfg.weightmax),\n                  min: parseFloat(cfg.weightmin),\n          };\n          RED.nodes.getNode( cfg.scope[idx] ).emit('input', msg );\n        }\n        return;\n      }\n\n      /* Capture reset and send datapoint. For each computation of the network\n         it needs to be reset, be for back propagation or testing the test\n         data (see below). Hence once the reset has gone through the entire\n         network and come out the other end, a new datapoint can be pushed into\n         the network.\n       */\n      if ( msg.topic == \"reset-completed\" && node.done_training == false ) {\n        if ( (node.trainingset_index < node.training_size) && !node.stop_training ) {\n          var datapoint = node.dataset[node.trainingset_index];\n\n          for ( var idx = 0 ; idx < cfg.scope.length; idx++ ) {\n            var nde = RED.nodes.getNode( cfg.scope[idx] );\n\n            nde.emit('input', { ...msg,\n                                topic: \"\",\n                                value: datapoint[nde.name],\n                                dp: {...datapoint}\n            });\n          }\n\n          node.trainingset_index += 1;\n\n          node.status( {\n            fill:\"green\",\n            shape:\"dot\",\n            text:\"training \" + node.trainingset_index + \" / \" + node.training_size\n          });\n        } else {\n          node.status( {\n            fill:\"green\",\n            shape:\"dot\",\n            text:\"training done\"\n          });\n\n          node.trainingset_index = 0;\n          node.testingset_index = 0;\n          node.done_training = true;\n\n          send({ topic: \"training-done\" });\n          done();\n        }\n\n        return;\n      }\n\n      /* this is the reset completed but for handling testing data */\n      if ( msg.topic == \"reset-completed\" && node.done_training == true ) {\n        if ((node.testingset_index + node.training_size) > node.dataset.length ||\n            (node.testingset_index >= node.testing_size) ) {\n\n          setTimeout( () => { node.status({}) }, 450);\n          node.done_training = false;\n          node.stop_training = false;\n          done();\n\n          return;\n        }\n\n        var datapoint = node.dataset[node.testingset_index +\n                                     node.training_size];\n\n        for ( var ndIdx = 0 ; ndIdx < cfg.scope.length; ndIdx++ ) {\n          var nde = RED.nodes.getNode( cfg.scope[ndIdx] );\n\n          nde.emit('input', { ...msg,\n                              topic: \"\",\n                              value: datapoint[nde.name],\n                              dp: {...datapoint}\n          });\n        }\n\n        node.testingset_index++;\n\n        node.status( {\n          fill:\"blue\",\n          shape:\"dot\",\n          text:\"testing \" + node.testingset_index + \" / \" + node.testing_size\n        });\n      }\n\n      /*\n         training can't be halted since the backend is far faster than the\n         frontend.\n       */\n      if ( msg.topic == \"halt\" ) {\n        node.stop_training = true\n        return;\n      }\n    });\n  }\n\n  RED.nodes.registerType(\"nnb-trainer\",PropCompleted);\n}\n","output":"str","x":1040,"y":1274,"wires":[["b1842d1663b7e7f3"]]},{"id":"b1842d1663b7e7f3","type":"PkgFile","z":"f7e009091ef2d6b0","name":"actfunctions.js","filename":"nodes/lib/actfunctions.js","format":"javascript","syntax":"mustache","template":"/*!\n * activation-functions - v2.0.0 - 2020\n * https://github.com/howion/activation-functions\n *\n * Copyright (c) 2018 howion\n * Licensed under the MIT license */\n\n/**\n * Identity function: x -> x\n * @param {number} $x\n */\nmodule.exports.Identity = function($x) {\n    return $x;\n};\n\n/**\n * Inverse function: x -> 1-x\n * @param {number} $x\n */\nmodule.exports.Inverse = function($x) {\n    return (1 - $x);\n};\n\n/**\n * BinaryStep function: x -> (x<0 ? 0 : 1)\n * @param {number} $x\n */\nmodule.exports.BinaryStep = function($x) {\n    return (($x < 0) ? 0 : 1);\n};\n\n/**\n * Bipolar function: x -> (x>0 ? 1 : 0)\n * @param {number} $x\n */\nmodule.exports.Bipolar = function($x) {\n    return (($x>0) ? 1 : -1);\n};\n\n/**\n * Logistic, Sigmoid, or SoftStep function: x -> (1/(1+e^-x))\n * @param {number} $x\n */\nmodule.exports.Logistic = module.exports.Sigmoid = module.exports.SoftStep = function($x) {\n    return 1 / (1 + Math.exp(-$x));\n};\n\n/**\n * BipolarSigmoid function: x -> (x>0 ? 1 : 0)\n * @param {number} $x\n */\nmodule.exports.BipolarSigmoid = function($x) {\n    return (2*module.exports.Sigmoid($x) - 1);\n};\n\n/**\n * Same as Math.tanh\n * @param {number} $x (in radians)\n */\nmodule.exports.Tanh = function($x) {\n    return Math.tanh($x);\n};\n\n/**\n * HardTanh function: x-> max(-1, min(1, x))\n * @param {number} $x (in radians)\n */\nmodule.exports.HardTanh = function($x) {\n    return Math.max(-1, Math.min(1, $x));\n};\n\n/**\n * Same as Math.atan\n * @param {number} $x (in radians)\n */\nmodule.exports.ArcTan = function($x) {\n    return Math.atan($x);\n};\n\n/**\n * ElliotSig, or SoftSign function: x -> (x/(1+|x|))\n * @param {number} $x\n */\nmodule.exports.ElliotSig = module.exports.SoftSign = function($x) {\n    return $x / ( 1 + Math.abs($x) );\n};\n\n/**\n * Erf (Error) function: x -> erf(x)\n * @param {number} $x (in radians)\n */\nmodule.exports.Erf = function($x) {\n    var a1 =  0.254829592;\n    var a2 = -0.284496736;\n    var a3 =  1.421413741;\n    var a4 = -1.453152027;\n    var a5 =  1.061405429;\n    var p  =  0.3275911;\n\n    var sign = (($x < 0) ? -1: 1);\n    $x = Math.abs($x);\n\n    var t = 1.0/(1.0 + p*$x);\n    var y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*Math.exp(-($x**2));\n\n    return sign*y;\n};\n\n/**\n * Sinc function: x -> (sinx/x)\n * @param {number} $x (in radians)\n */\nmodule.exports.Sinc = function($x) {\n    return (($x == 0) ? 1 : (Math.sin($x) / $x));\n};\n\n/**\n * Same as Math.sin\n * @param {number} $x (in radians)\n */\nmodule.exports.Sinusoid = function($x) {\n    return Math.sin($x);\n};\n\n/**\n * Gaussian function: x -> e^(-x^2)\n * @param {number} $x\n */\nmodule.exports.Gaussian = function($x) {\n    return Math.exp(-($x**2));\n};\n\n/**\n * ISRU (Inverse Square Root Unit) function: x -> x/sqrt(1+x^2)\n * @param {number} $x\n */\nmodule.exports.ISRU = function($x, $a) {\n    return ( $x / Math.sqrt(1 + $a*($x**2)) );\n};\n\n/**\n * ReLU (Rectified linear unit) function: x -> max(0, x)\n * @param {number} $x\n */\nmodule.exports.ReLU = function($x) {\n    return Math.max(0, $x);\n};\n\n/**\n * GELU (Gaussian error linear unit) function: x -> (x/2){1+erf[x/sqrt(2)]}\n *\n * See: https://arxiv.org/abs/1606.08415\n * @param {number} $x\n */\nmodule.exports.GELU = function($x) {\n    return ($x/2)*(1+ module.exports.Erf($x/Math.SQRT2));\n};\n\n/**\n * PReLU (Parameteric rectified linear unit) function: x -> ((x<0) ? ax : x)\n *\n * See: https://arxiv.org/abs/1502.01852\n * @param {number} $x\n */\nmodule.exports.PReLU = function($x, $a) {\n    return (($x < 0) ? ($a * $x) : $x);\n};\n\n/**\n * ELU (Exponential Linear Unit) function: x -> ((x>0) ? x : (a*(e^x -1)))\n *\n * See: https://arxiv.org/abs/1511.07289\n * @param {number} $x\n */\nmodule.exports.ELU = function($x, $a) {\n    return (($x > 0) ? $x : ($a*Math.expm1($x)));\n};\n\n/**\n * SELU (Scaled Exponential Linear Unit) function: x -> 1.0507*ELU(1.67326, x)\n *\n * See: https://arxiv.org/abs/1706.02515\n * @param {number} $x\n */\nmodule.exports.SELU = function($x) {\n    return 1.0507 * module.exports.ELU($x, 1.67326);\n};\n\n/**\n * SoftPlus function: x -> ln(1+e^x)\n * @param {number} $x\n */\nmodule.exports.SoftPlus = function($x) {\n    return Math.log(1 + Math.exp($x));\n};\n\n/**\n * Mish function: x -> x*tanh(SoftPlus(x)=ln(1+e^x))\n *\n * See: https://github.com/digantamisra98/Mish\n * @param {number} $x (in radians)\n */\nmodule.exports.Mish = function($x) {\n    return $x*Math.tanh(module.exports.SoftPlus($x));\n};\n\n/**\n * SQNL (Square nonlinearity) function: x -> ...\n * @param {number} $x\n */\nmodule.exports.SQNL = function($x) {\n    if ($x > +2) { return +1; }\n    if ($x < -2) { return -1; }\n    if ($x < 0)  { return $x + ($x**2)/4; }\n    /* -2=<x<0: */ return $x + ($x**2)/4;\n};\n\n/**\n * BentIdentity function: x -> [{sqrt(x^2 + 1) - 1}/2 + x]\n * @param {number} $x\n */\nmodule.exports.BentIdentity = function($x) {\n    return ((Math.sqrt(($x**2) + 1) - 1)/2) + $x;\n};\n\n/**\n * (Sigmoid linear unit) SiLU, or Swish1 function: x -> (x/(1+e^-x))\n * @param {number} $x\n */\nmodule.exports.SiLU = module.exports.Swish1 = function($x) {\n    return $x * module.exports.Sigmoid($x);\n};\n","output":"str","x":1259,"y":1360,"wires":[["c8dc92725a8cd23e"]]},{"id":"c8dc92725a8cd23e","type":"PkgFile","z":"f7e009091ef2d6b0","name":"common.js","filename":"nodes/lib/common.js","format":"javascript","syntax":"mustache","template":"const nnb_utils = {\n  statusBP: (node) => {\n    node.status({fill:\"blue\",shape:\"dot\",text:\"backprop\"});\n    setTimeout( () => { node.status({}); },450);\n  },\n  statusFW: (node) => {\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"forward\"});\n    setTimeout( () => { node.status({}); },450);\n  },\n  statusRW: (node) => {\n    node.status({fill:\"grey\",shape:\"dot\",text:\"randomised weights\"});\n    setTimeout( () => { node.status({}); },450);\n  },\n  statusFired: (node,val) => {\n    node.status({fill:\"green\",shape:\"dot\",text:\"fired - \" + val});\n    setTimeout( () => {\n      node.status({fill:\"green\", shape:\"ring\", text:(\"\" + val)})\n    }, 450);\n  },\n  statusNotFired: (node,val) => {\n    node.status({fill:\"red\",shape:\"dot\",text:\"not fired - \" + val});\n    setTimeout( () => {\n      node.status({fill:\"red\", shape:\"ring\", text:(\"\" + val)})\n    },450);\n  },\n  commNewWeight: (nde,to,newWeight,red) => {\n    red.comms.publish(\"neuralnet:\" + nde, red.util.encodeObject({\n      msg:    \"weight-change\",\n      node:   nde,\n      to:     to,\n      weight: newWeight\n    }));\n  },\n  actFuncts: require(\"./actfunctions.js\"),\n\n  /* magic constants from the trainer node */\n  learningRate: (node,red) => {\n    var rVal = 0.3;\n\n    red.nodes.eachNode( function(n) {\n      // z --> same flow, d --> true if disabled, else undefined.\n      if (n.z == node.z && n.type == 'nnb-trainer' && n.d == undefined) {\n        rVal = parseFloat(n.learningrate);\n        return;\n      }\n    });\n\n    return rVal;\n  },\n\n  clampWeight: (weight,node,red) => {\n    var rVal = weight;\n\n    red.nodes.eachNode( function(n) {\n      // z --> same flow, d --> true if disabled, else undefined.\n      if (n.z == node.z && n.type == 'nnb-trainer' && n.d == undefined) {\n        rVal = Math.max( parseFloat(n.weightmin),\n                         Math.min( parseFloat(n.weightmax), weight ) );\n        return;\n      }\n    });\n\n    return rVal;\n  },\n};\n\nfunction NeuralNodes() {\n  const nodeCache = (function(){\n    let registry = {\n      wiresOut: {},\n      wiresIn: {},\n      weights: {},\n    };\n\n    return {\n      addNode(id,wires) {\n        registry.wiresOut[id] = wires;\n\n        for ( var idx = 0; idx < wires.length; idx+=1 ) {\n          (registry.wiresIn[wires[idx]] ||= []).push( id );\n        }\n        return undefined;\n      },\n      countWiresIn(id) {\n        return (registry.wiresIn[id] || []).length;\n      },\n      wiresIn(id) {\n        return registry.wiresIn[id] || [];\n      },\n      weightFor(nodeId, prevNodeId) {\n        if ( registry.weights[ nodeId ] && registry.weights[ nodeId ][ prevNodeId ] != undefined ) {\n          /* done to ensure that 0.0 is also a possible value */\n          return registry.weights[ nodeId ][ prevNodeId ];\n        } else {\n          return 1.0;\n        }\n      },\n      setWeightFor(nodeId, prevNodeId, weight ) {\n        (registry.weights[ nodeId ] ||= {})[ prevNodeId ] = weight;\n      },\n      reset() {\n        registry = {\n          wiresOut: {},\n          wiresIn: {},\n          weights: {},\n        };\n      }\n    }\n  })();\n\n  return {\n\n    InputNode: (RED) => {\n      function OnMessageNeuralNode(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        nodeCache.addNode( node.id, node.wires[0] );\n\n        node.backprop = (msg) => {\n          /* here endth the backprogation */\n          nnb_utils.statusBP(node);\n        };\n\n        node.on('close', function() {\n          nodeCache.reset();\n        });\n\n        node.on('input', function(msg,send,done) {\n          msg ||= {};\n\n          if ( msg.topic == \"reset\" ) {\n            send({ ...msg, input_node_id: node.id });\n            if ( done ) ( done() );\n            return;\n          }\n\n          if ( msg.topic == \"random-weights\" ) {\n            nnb_utils.statusRW(node);\n            send(msg);\n            done();\n            return;\n          }\n          nnb_utils.statusFW(node);\n\n          msg.upstream_node_id = node.id;\n          msg.value = msg.value;\n          msg.fired = \"yes\";\n\n          nnb_utils.statusFired(node,msg.value);\n          send(msg);\n          if ( done ) ( done() );\n        });\n      };\n\n      return OnMessageNeuralNode;\n    },\n\n\n    HiddenNode: (RED) => {\n      function OnMessageNeuralNode(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        nodeCache.addNode( node.id, node.wires[0] );\n\n        node.trigger_count = nodeCache.countWiresIn(node.id);\n        node.values = [];\n\n        /*\n         * Backpropagation computation for hidden neuron.\n         *\n         * This goes backwards through the network, it starts with\n         * the output neurons and passes backwards towards the input\n         * nodes.\n         *\n         * Because nodes will have backprop triggered multiple times, this\n         * is an improvised backpropagation algorithm. A proper backprop\n         * algorithm takes a holistic view of the network and considers\n         * the entire network. That is not the case in this situation since\n         * messages are being passed from one node to the other. This makes\n         * the whole thing slightly random since it also depends on the\n         * order in which backprop(...) method is called.\n         */\n        node.backprop = (msg) => {\n          if ( node.values.length == 0 ) { return };\n\n          nnb_utils.statusBP(node);\n\n          if ( msg.nodetype == \"output\" || msg.nodetype == \"hidden\" ) {\n            for ( var idx = 0; idx < node.values.length ; idx++ ) {\n              if ( node.values[idx].fired == \"no\" ) { continue; }\n\n              var upstream_node = RED.nodes.getNode(\n                node.values[idx].upstream_node_id\n              )\n\n              var weightDelta = (\n                node.values[idx].weight *\n                ( msg.nodetype == \"hidden\" ? msg.value_percent : msg.weight_percent ) *\n                (node.values[idx].value / msg.prev_value) *\n                nnb_utils.learningRate(node,RED) *\n                ( node.values[idx].value > msg.prev_value ? -1 : 1 )\n              );\n\n              var newWeight = nnb_utils.clampWeight(\n                node.values[idx].weight + weightDelta,\n                node,\n                RED\n              );\n\n              nodeCache.setWeightFor(node.id, upstream_node.id, newWeight);\n              nnb_utils.commNewWeight(node.id, upstream_node.id, newWeight, RED);\n\n              upstream_node.backprop({\n                ...msg,\n                nodetype: \"hidden\",\n                value_percent: node.values[idx].value / msg.prev_value,\n                weight_delta: weightDelta,\n                prev_value:  node.values[idx].value,\n                prev_weight: node.values[idx].weight,\n              });\n            }\n          }\n        };\n\n        /*\n         * Flow restart.\n         */\n        node.on('close', function() {\n          nodeCache.reset();\n        });\n\n        /*\n         * Fast forward, reset and weight setting.\n         *\n         * This goes forward through the network and therefore uses\n         * Node-RED send to pass messages between neurons.\n         */\n        node.on('input', function(msg,send,done) {\n          msg ||= {};\n\n          var t = {};\n\n          if ( msg.topic == \"reset\" ) {\n            node.trigger_count = nodeCache.countWiresIn(node.id);\n            node.values = [];\n\n            send(msg);\n            if ( done ) ( done() );\n\n            return;\n          }\n\n          if ( msg.topic == \"random-weights\" ) {\n            var inWires = nodeCache.wiresIn(node.id);\n\n            if ( inWires.length == 0 ) { return };\n\n            for ( var idx = 0; idx < inWires.length ; idx++ ) {\n              var newWeight = (Math.random() * (msg.max-msg.min)) + msg.min;\n              nodeCache.setWeightFor( node.id, inWires[idx], newWeight);\n              nnb_utils.commNewWeight( node.id, inWires[idx], newWeight, RED);\n            }\n\n            nnb_utils.statusRW(node);\n\n            send(msg);\n            done();\n            return;\n          }\n\n          nnb_utils.statusFW(node);\n\n          node.trigger_count = node.trigger_count - 1;\n          node.values.push( {\n            upstream_node_id: msg.upstream_node_id,\n            weight: nodeCache.weightFor( node.id, msg.upstream_node_id ),\n            value: msg.value,\n            fired: msg.fired\n          });\n\n          if ( node.trigger_count == 0 ) {\n            var value = 0;\n            var didSomethingFire = false;\n\n            for ( var idx = 0 ; idx < node.values.length ; idx+=1 ) {\n              var v = node.values[idx];\n\n              if ( v.fired == \"yes\" ) {\n                didSomethingFire = true;\n                value += (v.weight * v.value);\n              }\n            }\n\n            msg.value = nnb_utils.actFuncts[cfg.actfunct]( parseFloat(cfg.bias) + value );\n            msg.upstream_node_id = node.id;\n\n            if ( msg.value > cfg.threshold && didSomethingFire) {\n              msg.fired = \"yes\";\n              nnb_utils.statusFired(node,msg.value);\n            } else {\n              msg.fired = \"no\";\n              nnb_utils.statusNotFired(node,msg.value);\n            }\n\n            send(msg);\n            if ( done ) ( done() );\n          }\n        });\n      };\n\n      return OnMessageNeuralNode;\n    },\n\n\n    OutputNode: (RED) => {\n      function OnMessageNeuralNode(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        nodeCache.addNode( node.id, node.wires[0] );\n\n        node.trigger_count = 0;\n\n        /*\n         * Backpropagation computation for output neuron.\n         *\n         * This goes backwards through the network, it starts with\n         * the output neurons and passes backwards towards the input\n         * nodes. The input nodes then signal the completion of the\n         * backpropagation.\n         */\n        node.backprop = function(msg) {\n          var inWires = nodeCache.wiresIn(node.id);\n\n          if ( inWires.length == 0 ) { return };\n\n          nnb_utils.statusBP(node);\n\n          var weights_total = 0;\n          for ( var idx = 0; idx < node.values.length ; idx++ ) {\n            if ( node.values[idx].fired == \"no\" ) {\n              continue;\n            }\n            weights_total += node.values[idx].weight;\n          }\n\n          /*\n           * avoid division by zero errors - take a \"random\" value.\n           */\n          if ( weights_total == 0 ) {\n            weights_total = inWires.length;\n          }\n\n          for ( var idx = 0; idx < node.values.length ; idx++ ) {\n            if ( node.values[idx].fired == \"no\" ) {\n              continue;\n            }\n\n            var upstream_node = RED.nodes.getNode(\n              node.values[idx].upstream_node_id\n            )\n\n            var weightDelta = (msg.desired_value - msg.current_value) * (\n              msg.current_value * (1 - msg.current_value)\n            );\n\n            var newWeight = nnb_utils.clampWeight(\n              node.values[idx].weight + (nnb_utils.learningRate(node,RED) *\n                                                                 weightDelta),\n              node,\n              RED\n            );\n\n            nodeCache.setWeightFor(node.id,upstream_node.id,newWeight);\n            nnb_utils.commNewWeight(node.id,upstream_node.id,newWeight,RED);\n\n            upstream_node.backprop({\n              ...msg,\n              nodetype:       \"output\",\n              weight_delta:   weightDelta,\n              prev_value:     node.values[idx].value,\n              weight_percent: node.values[idx].weight / weights_total\n            });\n          }\n        }\n\n        node.on('close', function() {\n          nodeCache.reset();\n        });\n\n        /*\n         * Fast forward, reset and weight setting.\n         *\n         * This is goes forward through the network and therefore uses\n         * Node-RED send to pass messages between neurons.\n         */\n        node.on('input', function(msg,send,done) {\n          msg ||= {};\n\n          /*\n           * A reset message is sent through the network to reset all value\n           * collectors. After this message, comes a fast-forward message,\n           * followed by a backpropagation step and then the reset message ...\n           * and so on.\n           */\n          if ( msg.topic == \"reset\" ) {\n            /*\n             * Trigger count is the number of messages this node should receive\n             * before generating it's output. Nominally this is the number\n             * of inWires however nodes might have been disabled, disabling\n             * the input but not removing the wire.\n             */\n            node.trigger_count = 0;\n\n            /*\n             * Wires might exist but the connecting node might have\n             * been disabled.\n             */\n            var inWires = nodeCache.wiresIn(node.id);\n            for ( var idx = 0; idx < inWires.length; idx++ ) {\n              var nd = RED.nodes.getNode( inWires[idx] );\n              /* d -> disabled, if undefined, node is enabled */\n              if ( nd && nd.d == undefined ) {\n                node.trigger_count++;\n              }\n            }\n            node.values = [];\n\n            RED.nodes.eachNode( function(n) {\n              // z --> same flow, d --> true if disabled, else undefined.\n              if (n.z == node.z && n.type == 'nnb-trainer' && n.d == undefined) {\n                RED.nodes.getNode( n.id ).emit('reset-complete:' + msg.resetid,\n                                               msg );\n              }\n            });\n\n            send(msg);\n            done();\n\n            return;\n          }\n\n          /*\n           * Initialise the weights between neurons randomly. Bounds for\n           * weights are defined in the message as 'max' and 'min'.\n           */\n          if ( msg.topic == \"random-weights\" ) {\n            var inWires = nodeCache.wiresIn(node.id);\n\n            if ( inWires.length == 0 ) { return };\n\n            for ( var idx = 0; idx < inWires.length ; idx++ ) {\n              var newWeight = (Math.random() * (msg.max - msg.min)) + msg.min;\n              nodeCache.setWeightFor( node.id, inWires[idx], newWeight);\n              nnb_utils.commNewWeight( node.id, inWires[idx], newWeight, RED);\n            }\n\n            nnb_utils.statusRW(node);\n            return;\n          }\n\n          /*\n           * This is the fast-forward step, that is generate a value for each\n           * input. That becomes the current value for the propagation\n           * step that follows after this.\n           */\n          node.trigger_count = node.trigger_count - 1;\n          node.values.push( {\n            upstream_node_id: msg.upstream_node_id,\n            weight: nodeCache.weightFor(node.id, msg.upstream_node_id),\n            value: msg.value,\n            fired: msg.fired\n          });\n          nnb_utils.statusFW(node);\n\n          if ( node.trigger_count == 0 ) {\n            var value = 0;\n\n            for ( var idx = 0 ; idx < node.values.length ; idx+=1 ) {\n              var v = node.values[idx];\n\n              if ( v.fired == \"yes\" ) {\n                value += (v.weight * v.value);\n              }\n            }\n\n            msg.value            = value;\n            msg.desired_value    = msg.dp[node.name];\n            msg.output_node_id   = node.id;\n            msg.output_node_name = node.name;\n            msg.topic            = \"output\";\n\n            delete msg.upstream_node_id;\n            delete msg.fired;\n\n            nnb_utils.statusFired(node, \"got: \" + msg.value + \" exp: \" +\n                                        msg.desired_value);\n            send(msg);\n            done();\n          }\n        });\n      };\n\n      return OnMessageNeuralNode;\n    },\n  };\n};\n\n/*\n * This setup is inspired from link-in/out nodes which also create a node\n * wide cache. This does the same but for separate nodes, i.e. link-in/out\n * define the nodes within the model, this is slightly different because\n * the nodes are defined in the .js files found above this directory.\n *\n * That's why this magic variable is defined here - so that the cache is the\n * singleton accross all types of neural net nodes.\n */\nconst magic = NeuralNodes();\nmodule.exports.neuralNode = {\n  InputNode: magic.InputNode,\n  OutputNode: magic.OutputNode,\n  HiddenNode: magic.HiddenNode\n};\n","output":"str","x":1259,"y":1410,"wires":[["b8afd5d68acb2463"]]},{"id":"b8afd5d68acb2463","type":"PkgFile","z":"f7e009091ef2d6b0","name":"abalone-automatic.json","filename":"examples/abalone-automatic.json","format":"json","syntax":"plain","template":"[\n    {\n        \"id\": \"4e2d8c13066b705e\",\n        \"type\": \"tab\",\n        \"label\": \"Abalone - automatic\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"cc1971e4013987fa\",\n        \"type\": \"group\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"Artificial Neural Network (ANN)\",\n        \"style\": {\n            \"label\": true,\n            \"label-position\": \"s\",\n            \"color\": \"#999999\"\n        },\n        \"nodes\": [\n            \"41622f3473cfb56f\",\n            \"4f14ac62f8f069f2\",\n            \"123aae41b26bfe8e\",\n            \"2b84e5bbb64fe0cb\",\n            \"313665e04e61359b\",\n            \"39677c738305356f\",\n            \"b85af86ca0340368\",\n            \"e60677f1ea7d46b6\",\n            \"fb3498f0d536a1cf\",\n            \"28b88f6d78f5b28e\",\n            \"cb5155fe5b33e067\",\n            \"38ee46896e8afc70\",\n            \"c52b1dce2c3cdb66\",\n            \"ad9e2d4b22036fbf\",\n            \"ae0306299c5e6fe7\",\n            \"06821941ee4e1839\",\n            \"7e2084fcfa0b4107\",\n            \"317faf983c665e9b\",\n            \"774ee06a687c9b44\"\n        ],\n        \"x\": 273,\n        \"y\": 489.00003269740523,\n        \"w\": 1277,\n        \"h\": 655.9999825613838\n    },\n    {\n        \"id\": \"41622f3473cfb56f\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.3442429853094819,\n            \"b68f5f83b42f3f75\": -0.0002897356220859461,\n            \"c6fe8ffe09f6b49a\": 0.00004005095654421773,\n            \"6c448b340d14c153\": 0.06475372958913558,\n            \"aee8146be4148868\": -0.004546592262518454,\n            \"b3dea75bed3045a7\": -0.00006137015498810685,\n            \"3d57239420fd0729\": -0.014027131523875648,\n            \"c03913d2e07ed895\": -0.00023342403029628792,\n            \"123aae41b26bfe8e\": -0.02148748134979617,\n            \"2b84e5bbb64fe0cb\": -0.0817146336836876,\n            \"39677c738305356f\": -0.10572543634865089,\n            \"b85af86ca0340368\": 0.5040180049572328,\n            \"e60677f1ea7d46b6\": -0.031194338380013804,\n            \"fb3498f0d536a1cf\": -0.30498689327785955,\n            \"28b88f6d78f5b28e\": 0.3206453497718304,\n            \"cb5155fe5b33e067\": 0.2194562465153123\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 867,\n        \"y\": 692.3333282470703,\n        \"wires\": [\n            [\n                \"317faf983c665e9b\",\n                \"774ee06a687c9b44\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4f14ac62f8f069f2\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.5129913330032997,\n            \"b68f5f83b42f3f75\": -0.758074854862596,\n            \"c6fe8ffe09f6b49a\": -0.8102858681452546,\n            \"6c448b340d14c153\": -0.04021179092785754,\n            \"aee8146be4148868\": 0.21767480006275453,\n            \"b3dea75bed3045a7\": -0.9048057192221864,\n            \"3d57239420fd0729\": 0.2186834457940083,\n            \"c03913d2e07ed895\": -0.9092781754050884,\n            \"123aae41b26bfe8e\": 0.6810727309992829,\n            \"2b84e5bbb64fe0cb\": 0.008813969689328894,\n            \"39677c738305356f\": 0.004980262763959632,\n            \"b85af86ca0340368\": -0.8021361036856175,\n            \"e60677f1ea7d46b6\": -0.028047947084213966,\n            \"fb3498f0d536a1cf\": 0.264317167710268,\n            \"28b88f6d78f5b28e\": 0.19419302205867991,\n            \"cb5155fe5b33e067\": 0.3793058672789181\n        },\n        \"actfunct\": \"Sinusoid\",\n        \"x\": 877,\n        \"y\": 754.0000152587891,\n        \"wires\": [\n            [\n                \"774ee06a687c9b44\",\n                \"317faf983c665e9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"123aae41b26bfe8e\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Gender\",\n        \"x\": 359,\n        \"y\": 530.0000326974052,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"2b84e5bbb64fe0cb\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Length\",\n        \"x\": 369,\n        \"y\": 610.8571730633172,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"06821941ee4e1839\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ],\n        \"info\": \"Sex,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\"\n    },\n    {\n        \"id\": \"313665e04e61359b\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Rings\",\n        \"weights\": {\n            \"088c8d356c830f6d\": 1,\n            \"9d7374590e08a1ea\": 0.8539994423584765,\n            \"d7ca0b7b9d5f2df5\": 0.018718954449526315,\n            \"86f077bb176c0b9e\": null,\n            \"840b927f9097a0ab\": null,\n            \"6be3952086799015\": null,\n            \"d1e47a7e37be8d5d\": -128.8287356283184,\n            \"8de98739b9044e35\": null,\n            \"f845421bd28d0944\": null,\n            \"4ad9e52c3209a507\": null,\n            \"9fa0d4f1b742dfce\": null,\n            \"b3b0f69e3e88f309\": 0.5,\n            \"91cc49775bf95761\": 0.5,\n            \"14d39e537e3e4673\": 1,\n            \"4abb348e7263de40\": 1,\n            \"2bbca30b8fe54a89\": 1,\n            \"b6d3156a1b7950f2\": 1,\n            \"97cc2cf089fd432b\": 1,\n            \"b409a42929e0b2b4\": 1,\n            \"f147a41c14cf792a\": 1,\n            \"47fb8f7c29cb5643\": -0.006763502852086571,\n            \"2e2a5ef6ef1593d5\": -0.019064616546362243,\n            \"317faf983c665e9b\": 1,\n            \"774ee06a687c9b44\": 1\n        },\n        \"x\": 1474,\n        \"y\": 771.0000762939453,\n        \"wires\": [\n            [\n                \"bb0ad883c48368ef\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"bb0ad883c48368ef\",\n        \"type\": \"nnb-backprop\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"\",\n        \"scope\": [\n            \"313665e04e61359b\"\n        ],\n        \"x\": 1759,\n        \"y\": 456.99993896484375,\n        \"wires\": [\n            [\n                \"ac32b2a02aedee86\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ac32b2a02aedee86\",\n        \"type\": \"nnb-trainer\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"\",\n        \"scope\": [\n            \"123aae41b26bfe8e\",\n            \"2b84e5bbb64fe0cb\",\n            \"39677c738305356f\",\n            \"b85af86ca0340368\",\n            \"e60677f1ea7d46b6\",\n            \"fb3498f0d536a1cf\",\n            \"28b88f6d78f5b28e\",\n            \"cb5155fe5b33e067\"\n        ],\n        \"learningrate\": \"0.04\",\n        \"weightmin\": \"-1\",\n        \"weightmax\": \"1\",\n        \"x\": 1753,\n        \"y\": 227,\n        \"wires\": [\n            [\n                \"bb0ad883c48368ef\",\n                \"f9a88ecd59c5d986\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"cff4f050653ed502\",\n        \"type\": \"csv\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"dataset - 4177 entries\",\n        \"sep\": \",\",\n        \"hdrin\": false,\n        \"hdrout\": \"all\",\n        \"multi\": \"mult\",\n        \"ret\": \"\\\\n\",\n        \"temp\": \"Gender,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\",\n        \"skip\": \"0\",\n        \"strings\": true,\n        \"include_empty_strings\": \"\",\n        \"include_null_values\": \"\",\n        \"x\": 943,\n        \"y\": 344,\n        \"wires\": [\n            [\n                \"463033903251f2df\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"74cf1b8c67e81cdc\",\n        \"type\": \"http request\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 510,\n        \"y\": 343.9999694824219,\n        \"wires\": [\n            [\n                \"cff4f050653ed502\"\n            ]\n        ],\n        \"info\": \"Details available here:\\n\\nhttps://archive.ics.uci.edu/ml/datasets/Abalone\\n\\nData:\\n\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/abalone/\\n\\n\"\n    },\n    {\n        \"id\": \"6ac0dc3be346274e\",\n        \"type\": \"inject\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"Load dataset\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 276,\n        \"y\": 283.99998474121094,\n        \"wires\": [\n            [\n                \"74cf1b8c67e81cdc\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"463033903251f2df\",\n        \"type\": \"function\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"remap gender & set topic\",\n        \"func\": \"var _genderMap = {\\n    'M': 0.01,\\n    'F': 0.02,\\n    'I': 0.03\\n};\\n\\nfor ( var idx = 0; idx < msg.payload.length ; idx++ ) {\\n    msg.payload[idx].Gender = _genderMap[msg.payload[idx].Gender]\\n}\\n\\nmsg.topic = \\\"dataset\\\";\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1220,\n        \"y\": 344,\n        \"wires\": [\n            [\n                \"60606a3b44c63da6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"39677c738305356f\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Diameter\",\n        \"x\": 359,\n        \"y\": 691.7143134292292,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"ae0306299c5e6fe7\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b85af86ca0340368\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Height\",\n        \"x\": 369,\n        \"y\": 772.5714537951411,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e60677f1ea7d46b6\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Whole\",\n        \"x\": 369,\n        \"y\": 853.4285941610531,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fb3498f0d536a1cf\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Shucked\",\n        \"x\": 359,\n        \"y\": 934.285734526965,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"28b88f6d78f5b28e\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Viscera\",\n        \"x\": 359,\n        \"y\": 1015.142874892877,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"cb5155fe5b33e067\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"Shell\",\n        \"x\": 369,\n        \"y\": 1096.000015258789,\n        \"wires\": [\n            [\n                \"41622f3473cfb56f\",\n                \"4f14ac62f8f069f2\",\n                \"38ee46896e8afc70\",\n                \"c52b1dce2c3cdb66\",\n                \"06821941ee4e1839\",\n                \"ad9e2d4b22036fbf\",\n                \"ae0306299c5e6fe7\",\n                \"7e2084fcfa0b4107\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"33d9a54d09b3f7cc\",\n        \"type\": \"inject\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"randomise weights\",\n        \"props\": [\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"random-weights\",\n        \"x\": 299,\n        \"y\": 225.3332977294922,\n        \"wires\": [\n            [\n                \"ac32b2a02aedee86\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"60606a3b44c63da6\",\n        \"type\": \"change\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"set training and test sizes\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"training_size\",\n                \"pt\": \"msg\",\n                \"to\": \"32\",\n                \"tot\": \"num\"\n            },\n            {\n                \"t\": \"set\",\n                \"p\": \"testing_size\",\n                \"pt\": \"msg\",\n                \"to\": \"20\",\n                \"tot\": \"num\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1495,\n        \"y\": 343.33331298828125,\n        \"wires\": [\n            [\n                \"ac32b2a02aedee86\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"38ee46896e8afc70\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.06377806745778017,\n            \"b68f5f83b42f3f75\": -0.5191529460848671,\n            \"c6fe8ffe09f6b49a\": -0.3277284352989841,\n            \"6c448b340d14c153\": 0.9250734519836256,\n            \"aee8146be4148868\": -0.00454659226251845,\n            \"b3dea75bed3045a7\": 0.2303658244140131,\n            \"3d57239420fd0729\": 0.8551077070899943,\n            \"c03913d2e07ed895\": -0.4602164673646334,\n            \"123aae41b26bfe8e\": 0.27389596744039857,\n            \"2b84e5bbb64fe0cb\": -0.47095496844774787,\n            \"39677c738305356f\": -0.5849190037923223,\n            \"b85af86ca0340368\": -0.5404216009756434,\n            \"e60677f1ea7d46b6\": -0.5733642521198775,\n            \"fb3498f0d536a1cf\": -0.6099540515223081,\n            \"28b88f6d78f5b28e\": -0.42186457206935357,\n            \"cb5155fe5b33e067\": -0.838240413849623\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 867,\n        \"y\": 632.3333282470703,\n        \"wires\": [\n            [\n                \"317faf983c665e9b\",\n                \"774ee06a687c9b44\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c52b1dce2c3cdb66\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"b68f5f83b42f3f75\": 0.000010442528307690134,\n            \"6c448b340d14c153\": 0.0010644690593154009,\n            \"aee8146be4148868\": 0.00003155582584975163,\n            \"b3dea75bed3045a7\": 0.000002580326670235231,\n            \"3d57239420fd0729\": 0.0009688101440572079,\n            \"69b3b4d075b73e0b\": -0.04418034167739243,\n            \"c6fe8ffe09f6b49a\": 0.000008516425028398338,\n            \"c03913d2e07ed895\": -0.00002594859396165819,\n            \"123aae41b26bfe8e\": 0.8236210565761717,\n            \"2b84e5bbb64fe0cb\": 0.016168800831502458,\n            \"39677c738305356f\": -0.2551645670318612,\n            \"b85af86ca0340368\": 0.0668027563044244,\n            \"e60677f1ea7d46b6\": -0.005372912014720729,\n            \"fb3498f0d536a1cf\": 0.23887219478853278,\n            \"28b88f6d78f5b28e\": 0.29212353552927695,\n            \"cb5155fe5b33e067\": 0.08733273210536997\n        },\n        \"actfunct\": \"SELU\",\n        \"x\": 867,\n        \"y\": 809.3333282470703,\n        \"wires\": [\n            [\n                \"774ee06a687c9b44\",\n                \"317faf983c665e9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ad9e2d4b22036fbf\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.2697501619550997,\n            \"b68f5f83b42f3f75\": -0.0006492693409407074,\n            \"c6fe8ffe09f6b49a\": 0.005593659056350576,\n            \"6c448b340d14c153\": 0.005596178945094108,\n            \"aee8146be4148868\": 0.000036911167179977144,\n            \"b3dea75bed3045a7\": -0.01601735674581917,\n            \"3d57239420fd0729\": -0.050473187991846205,\n            \"c03913d2e07ed895\": -0.06289544160574616,\n            \"123aae41b26bfe8e\": 0.8954165138113563,\n            \"2b84e5bbb64fe0cb\": -0.8347078314967761,\n            \"39677c738305356f\": 0.131184762867853,\n            \"b85af86ca0340368\": -0.9329675310511291,\n            \"e60677f1ea7d46b6\": 0.03728927953796628,\n            \"fb3498f0d536a1cf\": -1,\n            \"28b88f6d78f5b28e\": 0.22989078418956682,\n            \"cb5155fe5b33e067\": -1\n        },\n        \"actfunct\": \"Sinc\",\n        \"x\": 867,\n        \"y\": 932.3333282470703,\n        \"wires\": [\n            [\n                \"774ee06a687c9b44\",\n                \"317faf983c665e9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ae0306299c5e6fe7\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": 0.3841789158152365,\n            \"b68f5f83b42f3f75\": 1.26139696789249e-8,\n            \"c6fe8ffe09f6b49a\": 0.004853808609101314,\n            \"6c448b340d14c153\": 0.006299288486772927,\n            \"aee8146be4148868\": -0.005457250832927505,\n            \"b3dea75bed3045a7\": -0.0008083136232581649,\n            \"3d57239420fd0729\": 0.08437564120220878,\n            \"c03913d2e07ed895\": -0.04246353994792084,\n            \"123aae41b26bfe8e\": 0.40027674979863576,\n            \"2b84e5bbb64fe0cb\": -0.20427020893078296,\n            \"39677c738305356f\": 0.3434101242228617,\n            \"b85af86ca0340368\": 0.40097135107537873,\n            \"e60677f1ea7d46b6\": -0.03979758938254013,\n            \"fb3498f0d536a1cf\": 0.006595462020216176,\n            \"28b88f6d78f5b28e\": -0.3329563666977065,\n            \"cb5155fe5b33e067\": -0.6295943057221993\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 867,\n        \"y\": 987.0000762939453,\n        \"wires\": [\n            [\n                \"774ee06a687c9b44\",\n                \"317faf983c665e9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"06821941ee4e1839\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": 0.647061096416059,\n            \"b68f5f83b42f3f75\": 0.285876682746115,\n            \"c6fe8ffe09f6b49a\": -0.5305270910492642,\n            \"6c448b340d14c153\": 0.013361201229471712,\n            \"aee8146be4148868\": 0.005457250832927506,\n            \"b3dea75bed3045a7\": 0.10532894825967729,\n            \"3d57239420fd0729\": 0.030808943018973297,\n            \"c03913d2e07ed895\": 0.6734951332981663,\n            \"123aae41b26bfe8e\": 0.13866788982353784,\n            \"2b84e5bbb64fe0cb\": -0.10089767079272537,\n            \"39677c738305356f\": -0.28943692201621574,\n            \"b85af86ca0340368\": -1,\n            \"e60677f1ea7d46b6\": 0.0029239549658363635,\n            \"fb3498f0d536a1cf\": -0.019593675214028668,\n            \"28b88f6d78f5b28e\": 1,\n            \"cb5155fe5b33e067\": 0.028220742990421058\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 867,\n        \"y\": 871.3333282470703,\n        \"wires\": [\n            [\n                \"774ee06a687c9b44\",\n                \"317faf983c665e9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"7e2084fcfa0b4107\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"b68f5f83b42f3f75\": -6.280768371481855e-7,\n            \"6c448b340d14c153\": -0.0003356167523939958,\n            \"aee8146be4148868\": -0.005457250832927504,\n            \"b3dea75bed3045a7\": -0.0010507647041465911,\n            \"3d57239420fd0729\": -0.042265077377327834,\n            \"69b3b4d075b73e0b\": 0.553365135966607,\n            \"c6fe8ffe09f6b49a\": 0.0027634383382546205,\n            \"c03913d2e07ed895\": 0.023666926174236387,\n            \"123aae41b26bfe8e\": -0.6899638959477719,\n            \"2b84e5bbb64fe0cb\": 1,\n            \"39677c738305356f\": 1,\n            \"b85af86ca0340368\": -1,\n            \"e60677f1ea7d46b6\": 0.13067127911902526,\n            \"fb3498f0d536a1cf\": -1,\n            \"28b88f6d78f5b28e\": -1,\n            \"cb5155fe5b33e067\": 0.8008597486425162\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 877,\n        \"y\": 573.3333282470703,\n        \"wires\": [\n            [\n                \"317faf983c665e9b\",\n                \"774ee06a687c9b44\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"317faf983c665e9b\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"088c8d356c830f6d\": 0.14253634292745856,\n            \"4abb348e7263de40\": -0.11565748100858195,\n            \"f147a41c14cf792a\": 0.0011921733813730004,\n            \"9d7374590e08a1ea\": -0.019524417493297783,\n            \"2bbca30b8fe54a89\": -0.33068218380668274,\n            \"b6d3156a1b7950f2\": -0.8485366450239248,\n            \"97cc2cf089fd432b\": 0.0014149442652957684,\n            \"b409a42929e0b2b4\": 0.04313564948252452,\n            \"41622f3473cfb56f\": 0.2406922974878498,\n            \"4f14ac62f8f069f2\": 0.18377209273820072,\n            \"38ee46896e8afc70\": 0.8879318667909291,\n            \"c52b1dce2c3cdb66\": 0.49934425323338116,\n            \"ad9e2d4b22036fbf\": 0.5484448288952884,\n            \"ae0306299c5e6fe7\": -0.5166872860545063,\n            \"06821941ee4e1839\": -0.1951634051465436,\n            \"7e2084fcfa0b4107\": 0.6024816647611144\n        },\n        \"actfunct\": \"BipolarSigmoid\",\n        \"x\": 1287,\n        \"y\": 715.3333282470703,\n        \"wires\": [\n            [\n                \"313665e04e61359b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"774ee06a687c9b44\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"g\": \"cc1971e4013987fa\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"9d7374590e08a1ea\": -0.5862679321070237,\n            \"2bbca30b8fe54a89\": -0.000017595378559804052,\n            \"b6d3156a1b7950f2\": 0.0000171108315393487,\n            \"97cc2cf089fd432b\": 0.00007891590610621171,\n            \"b409a42929e0b2b4\": 0.3309477082866717,\n            \"f147a41c14cf792a\": 0.00025642505453558385,\n            \"088c8d356c830f6d\": 0.004987102354816544,\n            \"4abb348e7263de40\": 0.005297655952413493,\n            \"41622f3473cfb56f\": -0.24043395688036018,\n            \"4f14ac62f8f069f2\": -0.5597217530447092,\n            \"38ee46896e8afc70\": -0.10373640439918735,\n            \"c52b1dce2c3cdb66\": 0.43841192735420786,\n            \"ad9e2d4b22036fbf\": -0.032472950197119814,\n            \"ae0306299c5e6fe7\": 0.24122040718900642,\n            \"06821941ee4e1839\": -0.06341695594779714,\n            \"7e2084fcfa0b4107\": 0.24248906776302973\n        },\n        \"actfunct\": \"ElliotSig\",\n        \"x\": 1267,\n        \"y\": 820.3333282470703,\n        \"wires\": [\n            [\n                \"313665e04e61359b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"61fd04f77fbb5dcb\",\n        \"type\": \"comment\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"Description test data available there --> https://archive.ics.uci.edu/ml/datasets/Abalone\",\n        \"info\": \"\",\n        \"x\": 471,\n        \"y\": 93,\n        \"wires\": []\n    },\n    {\n        \"id\": \"c5f4edab9227651b\",\n        \"type\": \"debug\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"show test output\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"values\",\n        \"targetType\": \"msg\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1886,\n        \"y\": 145,\n        \"wires\": []\n    },\n    {\n        \"id\": \"f9a88ecd59c5d986\",\n        \"type\": \"switch\",\n        \"z\": \"4e2d8c13066b705e\",\n        \"name\": \"\",\n        \"property\": \"topic\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"test-output\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1660,\n        \"y\": 145,\n        \"wires\": [\n            [\n                \"c5f4edab9227651b\"\n            ]\n        ]\n    }\n]","output":"str","x":671,"y":1500,"wires":[["9fa25fc60382e8d9"]]},{"id":"9fa25fc60382e8d9","type":"PkgFile","z":"f7e009091ef2d6b0","name":"abalone-complex.json","filename":"examples/abalone-complex.json","format":"json","syntax":"plain","template":"[\n    {\n        \"id\": \"0afa833f1084c333\",\n        \"type\": \"tab\",\n        \"label\": \"Neural Network - Abalone\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"fefbabb1dc935830\",\n        \"type\": \"group\",\n        \"z\": \"0afa833f1084c333\",\n        \"style\": {\n            \"stroke\": \"#999999\",\n            \"stroke-opacity\": \"1\",\n            \"fill\": \"none\",\n            \"fill-opacity\": \"1\",\n            \"label\": true,\n            \"label-position\": \"nw\",\n            \"color\": \"#a4a4a4\"\n        },\n        \"nodes\": [\n            \"519c4315d03702ad\",\n            \"e3efa26167dec45e\",\n            \"0d8880cccb2004b7\",\n            \"50b1fd62bbc6a4c6\",\n            \"4bf6bcd18fb5cd9f\",\n            \"9b3b3c86bb4bc1bb\",\n            \"d735558d636b6f9d\",\n            \"817d23967665cd23\",\n            \"b3ba48bf7e8e4ced\",\n            \"e4c264a057850c7f\",\n            \"9a5dd5dca69ddcc8\",\n            \"17bb1dcede9faa10\",\n            \"ad7f6d051b687234\",\n            \"bae53332f5f2ad17\",\n            \"c9d58a13955486c8\",\n            \"899fab71fc7767b4\",\n            \"44ee72b6e1213ba6\",\n            \"ce5d10f29e46f9ef\",\n            \"10109fb31198afb9\",\n            \"4618614714adaed0\",\n            \"85fc4a4d833c87c3\",\n            \"16f41f45b727e9ee\",\n            \"24e3b2c3c979f46a\"\n        ],\n        \"x\": 106,\n        \"y\": 367.00001743861617,\n        \"w\": 1605,\n        \"h\": 552\n    },\n    {\n        \"id\": \"519c4315d03702ad\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"bae53332f5f2ad17\": 1,\n            \"c9d58a13955486c8\": 0.24915981100393383,\n            \"44ee72b6e1213ba6\": 0.5538815846146992,\n            \"ce5d10f29e46f9ef\": -0.3560149428222258,\n            \"10109fb31198afb9\": 0.5746140654178498,\n            \"4618614714adaed0\": -0.07297303875331698,\n            \"85fc4a4d833c87c3\": 0.44037358215272676,\n            \"16f41f45b727e9ee\": 0.1756311768636605\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 678,\n        \"y\": 681.3333333333333,\n        \"wires\": [\n            [\n                \"0d8880cccb2004b7\",\n                \"d735558d636b6f9d\",\n                \"817d23967665cd23\",\n                \"b3ba48bf7e8e4ced\",\n                \"e4c264a057850c7f\",\n                \"50b1fd62bbc6a4c6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e3efa26167dec45e\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"bae53332f5f2ad17\": -0.07990969793915982,\n            \"c9d58a13955486c8\": 0.9263399032123873,\n            \"44ee72b6e1213ba6\": 0.18683528218860293,\n            \"ce5d10f29e46f9ef\": -0.25894790251463407,\n            \"10109fb31198afb9\": 0.9570635650376484,\n            \"4618614714adaed0\": -0.6569711873114554,\n            \"85fc4a4d833c87c3\": 0.7851518394108148,\n            \"16f41f45b727e9ee\": -0.1271675520447232\n        },\n        \"actfunct\": \"Sinc\",\n        \"x\": 678,\n        \"y\": 470,\n        \"wires\": [\n            [\n                \"0d8880cccb2004b7\",\n                \"d735558d636b6f9d\",\n                \"817d23967665cd23\",\n                \"b3ba48bf7e8e4ced\",\n                \"e4c264a057850c7f\",\n                \"50b1fd62bbc6a4c6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"0d8880cccb2004b7\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"e3efa26167dec45e\": 0.8087797449138562,\n            \"9b3b3c86bb4bc1bb\": 0.12434326332845487,\n            \"519c4315d03702ad\": 0.7294424867628053,\n            \"4bf6bcd18fb5cd9f\": 0.7344774722000476\n        },\n        \"actfunct\": \"BipolarSigmoid\",\n        \"x\": 1029,\n        \"y\": 462,\n        \"wires\": [\n            [\n                \"17bb1dcede9faa10\",\n                \"9a5dd5dca69ddcc8\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"50b1fd62bbc6a4c6\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"e3efa26167dec45e\": -0.2223250641114194,\n            \"9b3b3c86bb4bc1bb\": -0.7659684113053129,\n            \"519c4315d03702ad\": -0.9376503821456725,\n            \"4bf6bcd18fb5cd9f\": 0.7389249158038336\n        },\n        \"actfunct\": \"BinaryStep\",\n        \"x\": 1029,\n        \"y\": 804,\n        \"wires\": [\n            [\n                \"9a5dd5dca69ddcc8\",\n                \"17bb1dcede9faa10\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4bf6bcd18fb5cd9f\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"bae53332f5f2ad17\": 0.6609725873316874,\n            \"c9d58a13955486c8\": 0.32375620261651905,\n            \"44ee72b6e1213ba6\": -0.20674297922544094,\n            \"ce5d10f29e46f9ef\": 0.8177173475968083,\n            \"10109fb31198afb9\": -0.034088858864447236,\n            \"4618614714adaed0\": 0.013499277360524697,\n            \"85fc4a4d833c87c3\": -0.8361497084776031,\n            \"16f41f45b727e9ee\": 0.1712996966025364\n        },\n        \"actfunct\": \"Inverse\",\n        \"x\": 678,\n        \"y\": 787,\n        \"wires\": [\n            [\n                \"0d8880cccb2004b7\",\n                \"d735558d636b6f9d\",\n                \"817d23967665cd23\",\n                \"b3ba48bf7e8e4ced\",\n                \"e4c264a057850c7f\",\n                \"50b1fd62bbc6a4c6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9b3b3c86bb4bc1bb\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"bae53332f5f2ad17\": 0.08560535233278652,\n            \"c9d58a13955486c8\": -0.6535157077363176,\n            \"44ee72b6e1213ba6\": 1,\n            \"ce5d10f29e46f9ef\": -0.7659350526587875,\n            \"10109fb31198afb9\": 0.303511755003624,\n            \"4618614714adaed0\": 0.7730384464307913,\n            \"85fc4a4d833c87c3\": -0.8616416966003344,\n            \"16f41f45b727e9ee\": -0.26686848846124694\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 678,\n        \"y\": 575.6666666666666,\n        \"wires\": [\n            [\n                \"0d8880cccb2004b7\",\n                \"d735558d636b6f9d\",\n                \"817d23967665cd23\",\n                \"b3ba48bf7e8e4ced\",\n                \"e4c264a057850c7f\",\n                \"50b1fd62bbc6a4c6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"d735558d636b6f9d\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"519c4315d03702ad\": -1,\n            \"e3efa26167dec45e\": 0.32815701618286164,\n            \"4bf6bcd18fb5cd9f\": 0.03128795185102318,\n            \"9b3b3c86bb4bc1bb\": -1\n        },\n        \"actfunct\": \"Inverse\",\n        \"x\": 1029,\n        \"y\": 529,\n        \"wires\": [\n            [\n                \"17bb1dcede9faa10\",\n                \"9a5dd5dca69ddcc8\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"817d23967665cd23\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"e3efa26167dec45e\": -0.4798620942959402,\n            \"9b3b3c86bb4bc1bb\": 0.8113286015842165,\n            \"519c4315d03702ad\": 0.23477840238573505,\n            \"4bf6bcd18fb5cd9f\": 0.3310075502740415\n        },\n        \"actfunct\": \"HardTanh\",\n        \"x\": 1029,\n        \"y\": 597,\n        \"wires\": [\n            [\n                \"17bb1dcede9faa10\",\n                \"9a5dd5dca69ddcc8\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b3ba48bf7e8e4ced\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"e3efa26167dec45e\": 0.6526637647501715,\n            \"9b3b3c86bb4bc1bb\": -0.6893341681224384,\n            \"519c4315d03702ad\": -0.11979931021348629,\n            \"4bf6bcd18fb5cd9f\": -0.10727673060566634\n        },\n        \"actfunct\": \"ReLU\",\n        \"x\": 1029,\n        \"y\": 660,\n        \"wires\": [\n            [\n                \"17bb1dcede9faa10\",\n                \"9a5dd5dca69ddcc8\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e4c264a057850c7f\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"e3efa26167dec45e\": 0.13984508012364805,\n            \"9b3b3c86bb4bc1bb\": -0.027252054412977098,\n            \"519c4315d03702ad\": 0.7748228325774217,\n            \"4bf6bcd18fb5cd9f\": -0.5327273966351238\n        },\n        \"actfunct\": \"Sinc\",\n        \"x\": 1029,\n        \"y\": 740,\n        \"wires\": [\n            [\n                \"17bb1dcede9faa10\",\n                \"9a5dd5dca69ddcc8\",\n                \"ad7f6d051b687234\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9a5dd5dca69ddcc8\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"0d8880cccb2004b7\": -0.6140727968998164,\n            \"50b1fd62bbc6a4c6\": 0.24591481256341918,\n            \"d735558d636b6f9d\": -0.892459470843869,\n            \"817d23967665cd23\": -0.8204543425442382,\n            \"b3ba48bf7e8e4ced\": -0.8491896759753587,\n            \"e4c264a057850c7f\": 0.9813530952951326\n        },\n        \"actfunct\": \"Inverse\",\n        \"x\": 1354,\n        \"y\": 626,\n        \"wires\": [\n            [\n                \"899fab71fc7767b4\",\n                \"24e3b2c3c979f46a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"17bb1dcede9faa10\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"0d8880cccb2004b7\": 0.8215818408323705,\n            \"817d23967665cd23\": -0.12283951166031759,\n            \"b3ba48bf7e8e4ced\": -0.7552033872791113,\n            \"e4c264a057850c7f\": -0.6257898202543881,\n            \"50b1fd62bbc6a4c6\": 0.5670883327302403,\n            \"d735558d636b6f9d\": -0.950188122806408\n        },\n        \"actfunct\": \"ElliotSig\",\n        \"x\": 1354,\n        \"y\": 692,\n        \"wires\": [\n            [\n                \"899fab71fc7767b4\",\n                \"24e3b2c3c979f46a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ad7f6d051b687234\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"\",\n        \"bias\": \"1\",\n        \"threshold\": \"0.0\",\n        \"weights\": {\n            \"0d8880cccb2004b7\": 0.6831158231915705,\n            \"50b1fd62bbc6a4c6\": -0.9285111572490305,\n            \"d735558d636b6f9d\": -0.36500212967386225,\n            \"817d23967665cd23\": -0.7516747520650643,\n            \"b3ba48bf7e8e4ced\": 0.4652044065386797,\n            \"e4c264a057850c7f\": -0.0663880529936565\n        },\n        \"actfunct\": \"Inverse\",\n        \"x\": 1354,\n        \"y\": 561,\n        \"wires\": [\n            [\n                \"899fab71fc7767b4\",\n                \"24e3b2c3c979f46a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"bae53332f5f2ad17\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Gender\",\n        \"x\": 192,\n        \"y\": 408.00001743861617,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c9d58a13955486c8\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Length\",\n        \"x\": 202,\n        \"y\": 475.1428745814733,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ],\n        \"info\": \"Sex,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\"\n    },\n    {\n        \"id\": \"899fab71fc7767b4\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Rings\",\n        \"weights\": {\n            \"17bb1dcede9faa10\": 0.8906608383171797,\n            \"9a5dd5dca69ddcc8\": -1,\n            \"ad7f6d051b687234\": -1\n        },\n        \"x\": 1634,\n        \"y\": 574,\n        \"wires\": [\n            [\n                \"2d820d8b94a425fd\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"2d820d8b94a425fd\",\n        \"type\": \"nnb-backprop\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"\",\n        \"scope\": [\n            \"899fab71fc7767b4\",\n            \"24e3b2c3c979f46a\"\n        ],\n        \"x\": 1497,\n        \"y\": 220,\n        \"wires\": [\n            [\n                \"875da1e5259eda6a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"875da1e5259eda6a\",\n        \"type\": \"nnb-trainer\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"\",\n        \"scope\": [\n            \"bae53332f5f2ad17\",\n            \"c9d58a13955486c8\",\n            \"44ee72b6e1213ba6\",\n            \"ce5d10f29e46f9ef\",\n            \"10109fb31198afb9\",\n            \"4618614714adaed0\",\n            \"85fc4a4d833c87c3\",\n            \"16f41f45b727e9ee\"\n        ],\n        \"learningrate\": \"0.01\",\n        \"weightmin\": \"-1\",\n        \"weightmax\": \"1\",\n        \"x\": 1491,\n        \"y\": 38,\n        \"wires\": [\n            [\n                \"5d2625c4843e3b53\",\n                \"2d820d8b94a425fd\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ca4c5393f4aede91\",\n        \"type\": \"csv\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"dataset - 4177 entries\",\n        \"sep\": \",\",\n        \"hdrin\": false,\n        \"hdrout\": \"all\",\n        \"multi\": \"mult\",\n        \"ret\": \"\\\\n\",\n        \"temp\": \"Gender,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\",\n        \"skip\": \"0\",\n        \"strings\": true,\n        \"include_empty_strings\": \"\",\n        \"include_null_values\": \"\",\n        \"x\": 831,\n        \"y\": 249,\n        \"wires\": [\n            [\n                \"4dfc1198196f0de2\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b485abb1a5504c62\",\n        \"type\": \"http request\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 699,\n        \"y\": 173,\n        \"wires\": [\n            [\n                \"ca4c5393f4aede91\"\n            ]\n        ],\n        \"info\": \"Details available here:\\n\\nhttps://archive.ics.uci.edu/ml/datasets/Abalone\\n\\nData:\\n\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/abalone/\\n\\n\"\n    },\n    {\n        \"id\": \"500652a2017b2e29\",\n        \"type\": \"inject\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"Starting training\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 577,\n        \"y\": 251,\n        \"wires\": [\n            [\n                \"b485abb1a5504c62\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4dfc1198196f0de2\",\n        \"type\": \"function\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"remap gender & set topic\",\n        \"func\": \"var _sexMap = {\\n    'M': 1,\\n    'F': 2,\\n    'I': 3\\n};\\n\\nfor ( var idx = 0; idx < msg.payload.length ; idx++ ) {\\n    msg.payload[idx].Gender = _sexMap[msg.payload[idx].Gender]\\n}\\n\\nmsg.topic = \\\"dataset\\\";\\n\\n/* Dataset has 4177 values */\\nmsg.training_size = 317;\\nmsg.testing_size = 10;\\n\\nmsg.training_size = 10;\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 979,\n        \"y\": 172,\n        \"wires\": [\n            [\n                \"875da1e5259eda6a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"44ee72b6e1213ba6\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Diameter\",\n        \"x\": 192,\n        \"y\": 542.2857317243304,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ce5d10f29e46f9ef\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Height\",\n        \"x\": 202,\n        \"y\": 609.4285888671875,\n        \"wires\": [\n            [\n                \"9b3b3c86bb4bc1bb\",\n                \"e3efa26167dec45e\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"10109fb31198afb9\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Whole\",\n        \"x\": 202,\n        \"y\": 676.5714460100446,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4618614714adaed0\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Shucked\",\n        \"x\": 192,\n        \"y\": 743.7143031529017,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"85fc4a4d833c87c3\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Viscera\",\n        \"x\": 192,\n        \"y\": 810.8571602957588,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"16f41f45b727e9ee\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Shell\",\n        \"x\": 202,\n        \"y\": 878.0000174386162,\n        \"wires\": [\n            [\n                \"e3efa26167dec45e\",\n                \"9b3b3c86bb4bc1bb\",\n                \"519c4315d03702ad\",\n                \"4bf6bcd18fb5cd9f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"24e3b2c3c979f46a\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"0afa833f1084c333\",\n        \"g\": \"fefbabb1dc935830\",\n        \"name\": \"Shell\",\n        \"weights\": {\n            \"17bb1dcede9faa10\": 0.3111332905597384,\n            \"9a5dd5dca69ddcc8\": 1,\n            \"ad7f6d051b687234\": 1\n        },\n        \"x\": 1635,\n        \"y\": 675,\n        \"wires\": [\n            [\n                \"2d820d8b94a425fd\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"d2f3026b65b8fe3c\",\n        \"type\": \"debug\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"show test output\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"values\",\n        \"targetType\": \"msg\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1722,\n        \"y\": 127,\n        \"wires\": []\n    },\n    {\n        \"id\": \"5d2625c4843e3b53\",\n        \"type\": \"switch\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"\",\n        \"property\": \"topic\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"test-output\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1664,\n        \"y\": 38,\n        \"wires\": [\n            [\n                \"d2f3026b65b8fe3c\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fbd1a59204a478ce\",\n        \"type\": \"inject\",\n        \"z\": \"0afa833f1084c333\",\n        \"name\": \"randomise weights\",\n        \"props\": [\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"random-weights\",\n        \"x\": 606,\n        \"y\": 39,\n        \"wires\": [\n            [\n                \"875da1e5259eda6a\"\n            ]\n        ]\n    }\n]","output":"str","x":671,"y":1550,"wires":[["96f54ff15a3cf89d"]]},{"id":"96f54ff15a3cf89d","type":"PkgFile","z":"f7e009091ef2d6b0","name":"abalone-manual.json","filename":"examples/abalone-manual.json","format":"json","syntax":"plain","template":"[\n    {\n        \"id\": \"0b7db789c2b6bb19\",\n        \"type\": \"tab\",\n        \"label\": \"Abalone - manual\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"05f3a02d7253f092\",\n        \"type\": \"group\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"Artificial Neural Network (ANN)\",\n        \"style\": {\n            \"label\": true,\n            \"label-position\": \"s\"\n        },\n        \"nodes\": [\n            \"088c8d356c830f6d\",\n            \"9d7374590e08a1ea\",\n            \"69b3b4d075b73e0b\",\n            \"b68f5f83b42f3f75\",\n            \"620171f821496e36\",\n            \"c6fe8ffe09f6b49a\",\n            \"6c448b340d14c153\",\n            \"aee8146be4148868\",\n            \"b3dea75bed3045a7\",\n            \"3d57239420fd0729\",\n            \"c03913d2e07ed895\",\n            \"4abb348e7263de40\",\n            \"2bbca30b8fe54a89\",\n            \"b6d3156a1b7950f2\",\n            \"97cc2cf089fd432b\",\n            \"b409a42929e0b2b4\",\n            \"f147a41c14cf792a\",\n            \"47fb8f7c29cb5643\",\n            \"2e2a5ef6ef1593d5\"\n        ],\n        \"x\": 236,\n        \"y\": 506.6667044503349,\n        \"w\": 1298,\n        \"h\": 655.9999825613838\n    },\n    {\n        \"id\": \"088c8d356c830f6d\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": 0.9951878412515284,\n            \"b68f5f83b42f3f75\": -0.8155389448715592,\n            \"c6fe8ffe09f6b49a\": 0.18462701935655887,\n            \"6c448b340d14c153\": -0.2023333358487581,\n            \"aee8146be4148868\": -0.2884867252578076,\n            \"b3dea75bed3045a7\": -0.03760911093231699,\n            \"3d57239420fd0729\": -0.6390244983000488,\n            \"c03913d2e07ed895\": -0.7051425899045815\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 830,\n        \"y\": 710,\n        \"wires\": [\n            [\n                \"47fb8f7c29cb5643\",\n                \"2e2a5ef6ef1593d5\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9d7374590e08a1ea\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.5177779153607249,\n            \"b68f5f83b42f3f75\": 0.4530068720510818,\n            \"c6fe8ffe09f6b49a\": -0.045729663504824644,\n            \"6c448b340d14c153\": 0.3917513843752625,\n            \"aee8146be4148868\": 0.10040414130754818,\n            \"b3dea75bed3045a7\": 0.8707315841275945,\n            \"3d57239420fd0729\": -0.6884405258902112,\n            \"c03913d2e07ed895\": -0.5115177785658349\n        },\n        \"actfunct\": \"Sinusoid\",\n        \"x\": 840,\n        \"y\": 771.6666870117188,\n        \"wires\": [\n            [\n                \"2e2a5ef6ef1593d5\",\n                \"47fb8f7c29cb5643\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"69b3b4d075b73e0b\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Gender\",\n        \"x\": 322,\n        \"y\": 547.6667044503349,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b68f5f83b42f3f75\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Length\",\n        \"x\": 332,\n        \"y\": 628.5238448162469,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"b409a42929e0b2b4\",\n                \"f147a41c14cf792a\"\n            ]\n        ],\n        \"info\": \"Sex,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\"\n    },\n    {\n        \"id\": \"620171f821496e36\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Rings\",\n        \"weights\": {\n            \"088c8d356c830f6d\": 1,\n            \"9d7374590e08a1ea\": 0.8539994423584765,\n            \"d7ca0b7b9d5f2df5\": 0.018718954449526315,\n            \"86f077bb176c0b9e\": null,\n            \"840b927f9097a0ab\": null,\n            \"6be3952086799015\": null,\n            \"d1e47a7e37be8d5d\": -128.8287356283184,\n            \"8de98739b9044e35\": null,\n            \"f845421bd28d0944\": null,\n            \"4ad9e52c3209a507\": null,\n            \"9fa0d4f1b742dfce\": null,\n            \"b3b0f69e3e88f309\": 0.5,\n            \"91cc49775bf95761\": 0.5,\n            \"14d39e537e3e4673\": 1,\n            \"4abb348e7263de40\": 1,\n            \"2bbca30b8fe54a89\": 1,\n            \"b6d3156a1b7950f2\": 1,\n            \"97cc2cf089fd432b\": 1,\n            \"b409a42929e0b2b4\": 1,\n            \"f147a41c14cf792a\": 1,\n            \"47fb8f7c29cb5643\": -0.9855484462765275,\n            \"2e2a5ef6ef1593d5\": 0.23444469288536657\n        },\n        \"x\": 1458,\n        \"y\": 772.666748046875,\n        \"wires\": [\n            [\n                \"5b87723b51ae8934\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"5b87723b51ae8934\",\n        \"type\": \"nnb-backprop\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"\",\n        \"scope\": [\n            \"620171f821496e36\"\n        ],\n        \"x\": 1674,\n        \"y\": 455.33331298828125,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"3d89f50ceffe4d65\",\n        \"type\": \"nnb-trainer\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"\",\n        \"scope\": [\n            \"69b3b4d075b73e0b\",\n            \"b68f5f83b42f3f75\",\n            \"c6fe8ffe09f6b49a\",\n            \"6c448b340d14c153\",\n            \"aee8146be4148868\",\n            \"b3dea75bed3045a7\",\n            \"3d57239420fd0729\",\n            \"c03913d2e07ed895\"\n        ],\n        \"learningrate\": \"0.04\",\n        \"weightmin\": \"-1\",\n        \"weightmax\": \"1\",\n        \"x\": 1529,\n        \"y\": 321.3333435058594,\n        \"wires\": [\n            [\n                \"5b87723b51ae8934\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6ebd079754be0f9c\",\n        \"type\": \"csv\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"dataset - 4177 entries\",\n        \"sep\": \",\",\n        \"hdrin\": false,\n        \"hdrout\": \"all\",\n        \"multi\": \"mult\",\n        \"ret\": \"\\\\n\",\n        \"temp\": \"Gender,Length,Diameter,Height,Whole,Shucked,Viscera,Shell,Rings\",\n        \"skip\": \"0\",\n        \"strings\": true,\n        \"include_empty_strings\": \"\",\n        \"include_null_values\": \"\",\n        \"x\": 836,\n        \"y\": 223.6666717529297,\n        \"wires\": [\n            [\n                \"fd10675ff318d748\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"083b458fe7360f87\",\n        \"type\": \"http request\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 586,\n        \"y\": 166.66665649414062,\n        \"wires\": [\n            [\n                \"6ebd079754be0f9c\"\n            ]\n        ],\n        \"info\": \"Details available here:\\n\\nhttps://archive.ics.uci.edu/ml/datasets/Abalone\\n\\nData:\\n\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/abalone/\\n\\n\"\n    },\n    {\n        \"id\": \"4f62b368ca17f0ae\",\n        \"type\": \"inject\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"Load dataset\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 332,\n        \"y\": 256.66668701171875,\n        \"wires\": [\n            [\n                \"083b458fe7360f87\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fd10675ff318d748\",\n        \"type\": \"function\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"remap gender & set topic\",\n        \"func\": \"var _genderMap = {\\n    'M': 0.01,\\n    'F': 0.02,\\n    'I': 0.03\\n};\\n\\nfor ( var idx = 0; idx < msg.payload.length ; idx++ ) {\\n    msg.payload[idx].Gender = _genderMap[msg.payload[idx].Gender]\\n}\\n\\nmsg.topic = \\\"dataset\\\";\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 953,\n        \"y\": 274.66668701171875,\n        \"wires\": [\n            [\n                \"122a1ff6479a7738\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c6fe8ffe09f6b49a\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Diameter\",\n        \"x\": 322,\n        \"y\": 709.3809851821588,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"97cc2cf089fd432b\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6c448b340d14c153\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Height\",\n        \"x\": 332,\n        \"y\": 790.2381255480708,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"aee8146be4148868\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Whole\",\n        \"x\": 332,\n        \"y\": 871.0952659139828,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b3dea75bed3045a7\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Shucked\",\n        \"x\": 322,\n        \"y\": 951.9524062798947,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"3d57239420fd0729\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Viscera\",\n        \"x\": 322,\n        \"y\": 1032.8095466458067,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c03913d2e07ed895\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"Shell\",\n        \"x\": 332,\n        \"y\": 1113.6666870117188,\n        \"wires\": [\n            [\n                \"088c8d356c830f6d\",\n                \"9d7374590e08a1ea\",\n                \"4abb348e7263de40\",\n                \"2bbca30b8fe54a89\",\n                \"b409a42929e0b2b4\",\n                \"b6d3156a1b7950f2\",\n                \"97cc2cf089fd432b\",\n                \"f147a41c14cf792a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"3078b9ae65404707\",\n        \"type\": \"inject\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"randomise weights\",\n        \"props\": [\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"random-weights\",\n        \"x\": 1347,\n        \"y\": 244,\n        \"wires\": [\n            [\n                \"3d89f50ceffe4d65\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"122a1ff6479a7738\",\n        \"type\": \"change\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"set training and test sizes\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"training_size\",\n                \"pt\": \"msg\",\n                \"to\": \"212\",\n                \"tot\": \"num\"\n            },\n            {\n                \"t\": \"set\",\n                \"p\": \"testing_size\",\n                \"pt\": \"msg\",\n                \"to\": \"100\",\n                \"tot\": \"num\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1052,\n        \"y\": 321.3333435058594,\n        \"wires\": [\n            [\n                \"3d89f50ceffe4d65\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"aa6077f4add1bceb\",\n        \"type\": \"inject\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"trigger fast forward\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"backprop-completed\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 1347,\n        \"y\": 382,\n        \"wires\": [\n            [\n                \"3d89f50ceffe4d65\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4abb348e7263de40\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.9038197669140656,\n            \"b68f5f83b42f3f75\": -0.25059928869145337,\n            \"c6fe8ffe09f6b49a\": -0.1408622004908667,\n            \"6c448b340d14c153\": -0.45986069349650405,\n            \"aee8146be4148868\": -0.5377965032756248,\n            \"b3dea75bed3045a7\": -0.2379251443326706,\n            \"3d57239420fd0729\": 0.3722886383793547,\n            \"c03913d2e07ed895\": -0.22010404433174732\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 830,\n        \"y\": 650,\n        \"wires\": [\n            [\n                \"47fb8f7c29cb5643\",\n                \"2e2a5ef6ef1593d5\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"2bbca30b8fe54a89\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"b68f5f83b42f3f75\": 0.7503902061898196,\n            \"6c448b340d14c153\": -0.8985080546882698,\n            \"aee8146be4148868\": 0.4097165387195085,\n            \"b3dea75bed3045a7\": -0.5297045061642149,\n            \"3d57239420fd0729\": -0.9341359827918531,\n            \"69b3b4d075b73e0b\": 0.21675257790816796,\n            \"c6fe8ffe09f6b49a\": -0.28623036950970876,\n            \"c03913d2e07ed895\": -0.903733184031095\n        },\n        \"actfunct\": \"SELU\",\n        \"x\": 830,\n        \"y\": 827,\n        \"wires\": [\n            [\n                \"2e2a5ef6ef1593d5\",\n                \"47fb8f7c29cb5643\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b6d3156a1b7950f2\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.38511228307407935,\n            \"b68f5f83b42f3f75\": 0.32474710621676495,\n            \"c6fe8ffe09f6b49a\": -0.3177759929062997,\n            \"6c448b340d14c153\": -0.4558223375053763,\n            \"aee8146be4148868\": -1,\n            \"b3dea75bed3045a7\": 0.47181096599838385,\n            \"3d57239420fd0729\": -0.7022841298322582,\n            \"c03913d2e07ed895\": 0.2966845299335937\n        },\n        \"actfunct\": \"Sinc\",\n        \"x\": 830,\n        \"y\": 950,\n        \"wires\": [\n            [\n                \"2e2a5ef6ef1593d5\",\n                \"47fb8f7c29cb5643\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"97cc2cf089fd432b\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": 0.5043635613651494,\n            \"b68f5f83b42f3f75\": 0.7002034633323178,\n            \"c6fe8ffe09f6b49a\": 0.7160570195328184,\n            \"6c448b340d14c153\": -0.2238234797411761,\n            \"aee8146be4148868\": -0.17020162276046275,\n            \"b3dea75bed3045a7\": 0.013915310758511547,\n            \"3d57239420fd0729\": 0.4554993536266342,\n            \"c03913d2e07ed895\": 0.2719462423432761\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 830,\n        \"y\": 1004.666748046875,\n        \"wires\": [\n            [\n                \"2e2a5ef6ef1593d5\",\n                \"47fb8f7c29cb5643\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b409a42929e0b2b4\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"0\",\n        \"weights\": {\n            \"69b3b4d075b73e0b\": -0.4802011945527064,\n            \"b68f5f83b42f3f75\": 0.7542146508704595,\n            \"c6fe8ffe09f6b49a\": 0.09624858668283964,\n            \"6c448b340d14c153\": 0.24129070760248733,\n            \"aee8146be4148868\": 0.24205756703592637,\n            \"b3dea75bed3045a7\": 0.5336704862601088,\n            \"3d57239420fd0729\": 0.16663617044721274,\n            \"c03913d2e07ed895\": 0.6978259868148148\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 830,\n        \"y\": 889,\n        \"wires\": [\n            [\n                \"2e2a5ef6ef1593d5\",\n                \"47fb8f7c29cb5643\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"f147a41c14cf792a\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": \"0\",\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"b68f5f83b42f3f75\": 0.7855501281220887,\n            \"6c448b340d14c153\": 0.8826555915713254,\n            \"aee8146be4148868\": -0.8466044266734777,\n            \"b3dea75bed3045a7\": 0.267917454579933,\n            \"3d57239420fd0729\": 0.6506704235917514,\n            \"69b3b4d075b73e0b\": -0.2823775591278322,\n            \"c6fe8ffe09f6b49a\": 0.051391319237032704,\n            \"c03913d2e07ed895\": -0.17873849600113692\n        },\n        \"actfunct\": \"Logistic\",\n        \"x\": 840,\n        \"y\": 591,\n        \"wires\": [\n            [\n                \"47fb8f7c29cb5643\",\n                \"2e2a5ef6ef1593d5\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"47fb8f7c29cb5643\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"088c8d356c830f6d\": -0.45573867503996807,\n            \"4abb348e7263de40\": 0.011501834338031225,\n            \"f147a41c14cf792a\": 0.3839191207145281,\n            \"9d7374590e08a1ea\": 1,\n            \"2bbca30b8fe54a89\": -0.6503701014522177,\n            \"b6d3156a1b7950f2\": -0.21735426173289474,\n            \"97cc2cf089fd432b\": -0.1379093601971835,\n            \"b409a42929e0b2b4\": 0.3949505274618345\n        },\n        \"actfunct\": \"BipolarSigmoid\",\n        \"x\": 1250,\n        \"y\": 733,\n        \"wires\": [\n            [\n                \"620171f821496e36\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"2e2a5ef6ef1593d5\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"g\": \"05f3a02d7253f092\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-1\",\n        \"weights\": {\n            \"9d7374590e08a1ea\": 0.6215391747111038,\n            \"2bbca30b8fe54a89\": -0.31018907460132267,\n            \"b6d3156a1b7950f2\": 0.2735461430264992,\n            \"97cc2cf089fd432b\": 1,\n            \"b409a42929e0b2b4\": 0.5247199355059952,\n            \"f147a41c14cf792a\": 1,\n            \"088c8d356c830f6d\": 0.5479088713803492,\n            \"4abb348e7263de40\": 0.9290588586737377\n        },\n        \"actfunct\": \"ElliotSig\",\n        \"x\": 1234,\n        \"y\": 838,\n        \"wires\": [\n            [\n                \"620171f821496e36\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"07204a4a3c6e3bcd\",\n        \"type\": \"inject\",\n        \"z\": \"0b7db789c2b6bb19\",\n        \"name\": \"trigger backprop\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"trigger-backprop\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 1349,\n        \"y\": 455.33331298828125,\n        \"wires\": [\n            [\n                \"5b87723b51ae8934\"\n            ]\n        ]\n    }\n]","output":"str","x":671,"y":1600,"wires":[["cac9744dbbf9470a"]]},{"id":"cac9744dbbf9470a","type":"PkgFile","z":"f7e009091ef2d6b0","name":"bands.json","filename":"examples/bands.json","format":"json","syntax":"plain","template":"[\n    {\n        \"id\": \"34dff9962b6572f6\",\n        \"type\": \"tab\",\n        \"label\": \"Balance and Scale\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"33e85d10192dce30\",\n        \"type\": \"group\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"Artifcial Neural Network (ANN)\",\n        \"style\": {\n            \"label\": true,\n            \"label-position\": \"s\"\n        },\n        \"nodes\": [\n            \"232760b445acef87\",\n            \"34ad3ddc86cfb74b\",\n            \"e0ec19b8bb90dad1\",\n            \"46e624d6d4f1d0bc\",\n            \"30d4ccdc5ba2766c\",\n            \"a36718dcaf101c19\",\n            \"8d5fd29609d79b5a\",\n            \"90c0f7fdc23a7e5b\",\n            \"f478775b6ad2eb92\"\n        ],\n        \"x\": 108,\n        \"y\": 473,\n        \"w\": 1023,\n        \"h\": 317\n    },\n    {\n        \"id\": \"d887e4a6d16c0d1e\",\n        \"type\": \"comment\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"About the dataset --> https://archive.ics.uci.edu/ml/datasets/Balance+Scale\",\n        \"info\": \"\",\n        \"x\": 378,\n        \"y\": 73,\n        \"wires\": []\n    },\n    {\n        \"id\": \"afa4c52b22a8eff4\",\n        \"type\": \"csv\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"dataset - 625 entries\",\n        \"sep\": \",\",\n        \"hdrin\": false,\n        \"hdrout\": \"all\",\n        \"multi\": \"mult\",\n        \"ret\": \"\\\\n\",\n        \"temp\": \"ClassName,LeftWeight,LeftDistance,RightWeight,RightDistance\",\n        \"skip\": \"0\",\n        \"strings\": true,\n        \"include_empty_strings\": \"\",\n        \"include_null_values\": \"\",\n        \"x\": 750,\n        \"y\": 265,\n        \"wires\": [\n            [\n                \"52b2cf3ec2c6964a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"11ba6dd0cb9df461\",\n        \"type\": \"http request\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 463,\n        \"y\": 202.99996948242188,\n        \"wires\": [\n            [\n                \"afa4c52b22a8eff4\"\n            ]\n        ],\n        \"info\": \"Details available here:\\n\\nhttps://archive.ics.uci.edu/ml/datasets/Abalone\\n\\nData:\\n\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/abalone/\\n\\n\"\n    },\n    {\n        \"id\": \"87b93bfb04053c01\",\n        \"type\": \"inject\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"Load dataset\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 199,\n        \"y\": 142.99998474121094,\n        \"wires\": [\n            [\n                \"11ba6dd0cb9df461\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"52b2cf3ec2c6964a\",\n        \"type\": \"function\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"remap class name & set topic\",\n        \"func\": \"var _classNameMap = {\\n    'B': 0,\\n    'L': 1,\\n    'R': 2\\n};\\n\\nfor ( var idx = 0; idx < msg.payload.length ; idx++ ) {\\n    msg.payload[idx].ClassName = _classNameMap[msg.payload[idx].ClassName]\\n}\\n\\nmsg.topic = \\\"dataset\\\";\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 982,\n        \"y\": 196,\n        \"wires\": [\n            [\n                \"a8a8262399bb5508\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a8a8262399bb5508\",\n        \"type\": \"change\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"set training and test sizes\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"training_size\",\n                \"pt\": \"msg\",\n                \"to\": \"500\",\n                \"tot\": \"num\"\n            },\n            {\n                \"t\": \"set\",\n                \"p\": \"testing_size\",\n                \"pt\": \"msg\",\n                \"to\": \"50\",\n                \"tot\": \"num\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1087,\n        \"y\": 267.33331298828125,\n        \"wires\": [\n            [\n                \"fa90305f76aa8466\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"232760b445acef87\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"LeftWeight\",\n        \"x\": 224,\n        \"y\": 514,\n        \"wires\": [\n            [\n                \"30d4ccdc5ba2766c\",\n                \"a36718dcaf101c19\",\n                \"90c0f7fdc23a7e5b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"34ad3ddc86cfb74b\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"RightWeight\",\n        \"x\": 224,\n        \"y\": 590,\n        \"wires\": [\n            [\n                \"30d4ccdc5ba2766c\",\n                \"a36718dcaf101c19\",\n                \"90c0f7fdc23a7e5b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e0ec19b8bb90dad1\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"LeftDistance\",\n        \"x\": 224,\n        \"y\": 664,\n        \"wires\": [\n            [\n                \"30d4ccdc5ba2766c\",\n                \"a36718dcaf101c19\",\n                \"90c0f7fdc23a7e5b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"46e624d6d4f1d0bc\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"RightDistance\",\n        \"x\": 214,\n        \"y\": 741,\n        \"wires\": [\n            [\n                \"30d4ccdc5ba2766c\",\n                \"a36718dcaf101c19\",\n                \"90c0f7fdc23a7e5b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"30d4ccdc5ba2766c\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-3\",\n        \"weights\": {\n            \"232760b445acef87\": 0.04907153684374577,\n            \"34ad3ddc86cfb74b\": 0.3893954289056374,\n            \"e0ec19b8bb90dad1\": -0.4783156613453521,\n            \"46e624d6d4f1d0bc\": 0.34263815804502396\n        },\n        \"actfunct\": \"Erf\",\n        \"x\": 502,\n        \"y\": 627,\n        \"wires\": [\n            [\n                \"8d5fd29609d79b5a\",\n                \"f478775b6ad2eb92\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a36718dcaf101c19\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-3\",\n        \"weights\": {\n            \"34ad3ddc86cfb74b\": 0.038837580299953434,\n            \"232760b445acef87\": -0.11387590277565374,\n            \"e0ec19b8bb90dad1\": 0.3671164767936883,\n            \"46e624d6d4f1d0bc\": 0.08523604359691905\n        },\n        \"actfunct\": \"BentIdentity\",\n        \"x\": 524,\n        \"y\": 693,\n        \"wires\": [\n            [\n                \"8d5fd29609d79b5a\",\n                \"f478775b6ad2eb92\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"8d5fd29609d79b5a\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"ClassName\",\n        \"weights\": {\n            \"a36718dcaf101c19\": -0.378428004240595,\n            \"30d4ccdc5ba2766c\": -0.138279656095462,\n            \"90c0f7fdc23a7e5b\": 2,\n            \"f478775b6ad2eb92\": 0.3357201323215342\n        },\n        \"x\": 1035,\n        \"y\": 632,\n        \"wires\": [\n            [\n                \"c56bc1ef5fddc752\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c56bc1ef5fddc752\",\n        \"type\": \"nnb-backprop\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"\",\n        \"scope\": [\n            \"8d5fd29609d79b5a\"\n        ],\n        \"x\": 1294,\n        \"y\": 443,\n        \"wires\": [\n            [\n                \"fa90305f76aa8466\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fa90305f76aa8466\",\n        \"type\": \"nnb-trainer\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"\",\n        \"scope\": [\n            \"232760b445acef87\",\n            \"34ad3ddc86cfb74b\",\n            \"e0ec19b8bb90dad1\",\n            \"46e624d6d4f1d0bc\"\n        ],\n        \"learningrate\": \"0.01\",\n        \"weightmin\": \"-0.5\",\n        \"weightmax\": \"0.5\",\n        \"x\": 1290,\n        \"y\": 353,\n        \"wires\": [\n            [\n                \"c56bc1ef5fddc752\",\n                \"72fa901e872ceb52\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"060dbd8d79e7f5e4\",\n        \"type\": \"inject\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"randomise weights\",\n        \"props\": [\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"random-weights\",\n        \"x\": 224,\n        \"y\": 358,\n        \"wires\": [\n            [\n                \"fa90305f76aa8466\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"7760d99cd046f7a9\",\n        \"type\": \"debug\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"show test output\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"values\",\n        \"targetType\": \"msg\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1520,\n        \"y\": 186,\n        \"wires\": []\n    },\n    {\n        \"id\": \"72fa901e872ceb52\",\n        \"type\": \"switch\",\n        \"z\": \"34dff9962b6572f6\",\n        \"name\": \"\",\n        \"property\": \"topic\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"test-output\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1328,\n        \"y\": 188,\n        \"wires\": [\n            [\n                \"7760d99cd046f7a9\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"90c0f7fdc23a7e5b\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"232760b445acef87\": 0.09078334229144769,\n            \"34ad3ddc86cfb74b\": 0.12137813772499095,\n            \"e0ec19b8bb90dad1\": 0.2899143407574285,\n            \"46e624d6d4f1d0bc\": -0.3238874114159891\n        },\n        \"actfunct\": \"Gaussian\",\n        \"x\": 523,\n        \"y\": 558,\n        \"wires\": [\n            [\n                \"f478775b6ad2eb92\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"f478775b6ad2eb92\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"34dff9962b6572f6\",\n        \"g\": \"33e85d10192dce30\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": \"-3\",\n        \"weights\": {\n            \"30d4ccdc5ba2766c\": -0.11450028613517782,\n            \"a36718dcaf101c19\": 0.16085082108577842,\n            \"90c0f7fdc23a7e5b\": 0.07741503058879817\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 825,\n        \"y\": 569,\n        \"wires\": [\n            [\n                \"8d5fd29609d79b5a\"\n            ]\n        ]\n    }\n]","output":"str","x":671,"y":1650,"wires":[["d81625841760ebe2"]]},{"id":"d81625841760ebe2","type":"PkgFile","z":"f7e009091ef2d6b0","name":"created.json","filename":"examples/created.json","format":"json","syntax":"plain","template":"[\n    {\n        \"id\": \"b84187e6663b4f0f\",\n        \"type\": \"tab\",\n        \"label\": \"Create Own ANN\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"bcf16de22a2dd926\",\n        \"type\": \"http request\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 614,\n        \"y\": 224,\n        \"wires\": [\n            [\n                \"d736e4fd724c3e38\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"d736e4fd724c3e38\",\n        \"type\": \"csv\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"sep\": \",\",\n        \"hdrin\": \"\",\n        \"hdrout\": \"all\",\n        \"multi\": \"mult\",\n        \"ret\": \"\\\\n\",\n        \"temp\": \"ClassName,LeftWeight,LeftDistance,RightWeight,RightDistance\",\n        \"skip\": \"0\",\n        \"strings\": true,\n        \"include_empty_strings\": \"\",\n        \"include_null_values\": \"\",\n        \"x\": 969,\n        \"y\": 313,\n        \"wires\": [\n            [\n                \"38b98524cdf29b2b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"38b98524cdf29b2b\",\n        \"type\": \"function\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"function 1\",\n        \"func\": \"var _classNameMap = {\\n    'B': 0,\\n    'L': 1,\\n    'R': 2\\n};\\n\\nfor (var idx = 0; idx < msg.payload.length; idx++) {\\n    msg.payload[idx].ClassName = _classNameMap[msg.payload[idx].ClassName]\\n}\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1128,\n        \"y\": 231,\n        \"wires\": [\n            [\n                \"ba2a56b6927f2410\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ba2a56b6927f2410\",\n        \"type\": \"change\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"training_size\",\n                \"pt\": \"msg\",\n                \"to\": \"100\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"set\",\n                \"p\": \"testing_size\",\n                \"pt\": \"msg\",\n                \"to\": \"20\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"set\",\n                \"p\": \"topic\",\n                \"pt\": \"msg\",\n                \"to\": \"dataset\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1316,\n        \"y\": 271,\n        \"wires\": [\n            [\n                \"9362f38c3a9c18aa\",\n                \"c1cd79f50a66e59a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"07bc94f397bd76d6\",\n        \"type\": \"inject\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 178,\n        \"y\": 142,\n        \"wires\": [\n            [\n                \"bcf16de22a2dd926\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9362f38c3a9c18aa\",\n        \"type\": \"debug\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"debug 3\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1529,\n        \"y\": 189,\n        \"wires\": []\n    },\n    {\n        \"id\": \"5cca47fa699e8f76\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"LeftWeight\",\n        \"x\": 346,\n        \"y\": 502,\n        \"wires\": [\n            [\n                \"f6524b5480362736\",\n                \"a4e00aac7d23cbe7\",\n                \"a649dff5f0f83a1a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"5cfd64143e4796b8\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"LeftDistance\",\n        \"x\": 386,\n        \"y\": 582,\n        \"wires\": [\n            [\n                \"a4e00aac7d23cbe7\",\n                \"a649dff5f0f83a1a\",\n                \"f6524b5480362736\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e99f7640b70e3c3f\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"RightWeight\",\n        \"x\": 384,\n        \"y\": 652,\n        \"wires\": [\n            [\n                \"a649dff5f0f83a1a\",\n                \"a4e00aac7d23cbe7\",\n                \"f6524b5480362736\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"24bfb016c56c78bf\",\n        \"type\": \"nnb-input-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"RightDistance\",\n        \"x\": 406,\n        \"y\": 740,\n        \"wires\": [\n            [\n                \"a4e00aac7d23cbe7\",\n                \"f6524b5480362736\",\n                \"a649dff5f0f83a1a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"044bc92e13fcdae9\",\n        \"type\": \"nnb-output-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"ClassName\",\n        \"weights\": {\n            \"9a502b1595e61695\": 1,\n            \"923805530cfe602f\": 1\n        },\n        \"x\": 1169,\n        \"y\": 592,\n        \"wires\": [\n            [\n                \"1214f638182d24c8\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"f6524b5480362736\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"5cca47fa699e8f76\": 1,\n            \"5cfd64143e4796b8\": 1,\n            \"e99f7640b70e3c3f\": 1,\n            \"24bfb016c56c78bf\": 1\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 646,\n        \"y\": 541,\n        \"wires\": [\n            [\n                \"9a502b1595e61695\",\n                \"923805530cfe602f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a4e00aac7d23cbe7\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"5cca47fa699e8f76\": 0.0024060274564870325,\n            \"5cfd64143e4796b8\": 2.2162986477794252e-9,\n            \"e99f7640b70e3c3f\": 1.1352443498254041e-9,\n            \"24bfb016c56c78bf\": 8.516950560469825e-10\n        },\n        \"actfunct\": \"Sinusoid\",\n        \"x\": 706,\n        \"y\": 642,\n        \"wires\": [\n            [\n                \"923805530cfe602f\",\n                \"9a502b1595e61695\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a649dff5f0f83a1a\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"5cca47fa699e8f76\": 1,\n            \"5cfd64143e4796b8\": 1,\n            \"e99f7640b70e3c3f\": 1,\n            \"24bfb016c56c78bf\": 1\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 720,\n        \"y\": 703,\n        \"wires\": [\n            [\n                \"9a502b1595e61695\",\n                \"923805530cfe602f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9a502b1595e61695\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"f6524b5480362736\": 1,\n            \"a4e00aac7d23cbe7\": 1,\n            \"a649dff5f0f83a1a\": 1\n        },\n        \"actfunct\": \"Identity\",\n        \"x\": 934,\n        \"y\": 567,\n        \"wires\": [\n            [\n                \"044bc92e13fcdae9\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"923805530cfe602f\",\n        \"type\": \"nnb-layer-node\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"bias\": 0,\n        \"threshold\": 0,\n        \"weights\": {\n            \"f6524b5480362736\": 6.005297760685008e-19,\n            \"a4e00aac7d23cbe7\": 0.8618870138568867,\n            \"a649dff5f0f83a1a\": 6.005297760685008e-19\n        },\n        \"actfunct\": \"Sigmoid\",\n        \"x\": 955,\n        \"y\": 652,\n        \"wires\": [\n            [\n                \"044bc92e13fcdae9\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"1214f638182d24c8\",\n        \"type\": \"nnb-backprop\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"scope\": [\n            \"044bc92e13fcdae9\"\n        ],\n        \"x\": 1427,\n        \"y\": 534,\n        \"wires\": [\n            [\n                \"c1cd79f50a66e59a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c1cd79f50a66e59a\",\n        \"type\": \"nnb-trainer\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"scope\": [\n            \"5cca47fa699e8f76\",\n            \"5cfd64143e4796b8\",\n            \"e99f7640b70e3c3f\",\n            \"24bfb016c56c78bf\"\n        ],\n        \"learningrate\": \"0.04\",\n        \"weightmin\": \"-1\",\n        \"weightmax\": \"1\",\n        \"x\": 1410,\n        \"y\": 401,\n        \"wires\": [\n            [\n                \"1214f638182d24c8\",\n                \"eb4f5c5ab9fe1fdd\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"eb4f5c5ab9fe1fdd\",\n        \"type\": \"switch\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"property\": \"topic\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"test-output\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1581,\n        \"y\": 363,\n        \"wires\": [\n            [\n                \"e39b013025093a28\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e39b013025093a28\",\n        \"type\": \"debug\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"debug 4\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"values\",\n        \"targetType\": \"msg\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1743,\n        \"y\": 319,\n        \"wires\": []\n    },\n    {\n        \"id\": \"abae18dec6e640d0\",\n        \"type\": \"inject\",\n        \"z\": \"b84187e6663b4f0f\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"random-weights\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 1078,\n        \"y\": 406,\n        \"wires\": [\n            [\n                \"c1cd79f50a66e59a\"\n            ]\n        ]\n    }\n]","output":"str","x":671,"y":1700,"wires":[["dca7abf167c0e5dd"]]},{"id":"19283a77ac09f7d5","type":"PkgFile","z":"f7e009091ef2d6b0","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\": \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"keywords\": [\n    \"node-red\", \"artificial neural networks\", \"ANN\"\n  ],\n  \"homepage\": \"https://github.com/gorenje/node-red-contrib-neuralnet-builder#README.md\",\n  \"license\": \"SEE LICENSE IN https://github.com/gorenje/node-red-contrib-neuralnet-builder#LICENSE\",\n  \"author\": \"Gerrit Riessen <nodered@spreads-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"node-red\": {\n    \"version\": \">=2.0.0\",\n    \"nodes\": {\n      \"base\": \"nodes/00-base.js\",\n      \"input-node\": \"nodes/05-input-node.js\",\n      \"hidden-node\": \"nodes/10-hidden-node.js\",\n      \"output-node\": \"nodes/15-output-node.js\",\n      \"backprop\": \"nodes/25-backprop.js\",\n      \"trainer\": \"nodes/30-trainer.js\"\n    }\n  },\n  \"description\": \"{{{ pdescription }}}\",\n  \"directories\": {\n    \"example\": \"examples\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/gorenje/node-red-contrib-neuralnet-builder.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/gorenje/node-red-contrib-neuralnet-builder/issues\"\n  }\n}\n","output":"str","x":894,"y":815,"wires":[["4123bb9a4f9d3faa"]]},{"id":"4123bb9a4f9d3faa","type":"PkgFile","z":"f7e009091ef2d6b0","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"## Artificial Neural Network Builder\n\nNode-RED Nodes for creating [Artificial Neural Networks](https://en.wikipedia.org/wiki/Artificial_neural_network) (ANNs) in [Node-Red](https://nodered.org).\n\nArtificial Intelligence (AI) is (at time of writing) all the rage, but many outside the AI community do not have a mental image of the underlying technology driving the AI revolution.\n\nANNs are the basis for AI technology. ANNs are structures based on our ideas of how our brains work: interconnected neurons that \"fire\" when a certain threshold is reached. This firing is passed along a neurons connections to other neurons that fire accordingly, i.e., when a threshold is reached.\n\nANNs have three distinct neuron types: input, hidden and output. The input nodes pass (both training and testing) data into the ANN, the hidden nodes have connections and weights and represent the working core of an ANN. The output nodes simply passes the final output of the hidden nodes computation out of the network.\n\nTodays ANNs are extremely complex and contain millions of neurons and billions of connections between them. The purpose of this package is not aimed at creating an ANN that would compete with ChatGPT.\n\n## Purpose\n\nThree main purposes for this project:\n\n1. I wanted to gain a better understanding on how to create my own Node-RED nodes and what is possible,\n2. I wanted to gain a better understanding of the server-frontend communication possibilities, and\n3. I wanted to provide a demonstration of how ANNs work and how they are constructed.\n\nOf those, the first two have been fulfilled with the third being fulfilled in the sense that one can get a feel for how ANNs are constructed and trained but one does not get a working ANN.\n\nThe reason that ANN does not train is because the back propagation algorithm is broken. This breakage is a known-unknown since the triggering of the back propagation is not done as it is normally done.\n\nBack propagation normally takes the entire ANN into consideration and does one pass over the complete ANN, making weight changes accordingly. This ANN builder does not do that, instead it \"propagates\" the changes in weights back through the ANN via the connections between nodes, i.e., going backwards along the existing connections. This means that changes to weights are done multiple times as the difference in output nodes errors are propagated back through the ANN.\n\nTherefore take this software as a good way to demonstrate the principles of how ANNs work, however **do not rely** on it to do anything else that might be useful. In that sense, this art not science.\n\n## Basic workings of ANNs\n\nThis is a very rough and simplified description of the authors understanding of how ANNs work. **No guarantee of accuracy is made**.\n\n![Simple Artificial Neural Network](assets/neuralnet01.png)\n\nThe above is a very simple ANN found in the [balances and scale](examples/bands.json) flow. The pink nodes are the input nodes,  the yellow the hidden nodes and the grey is the output node. The neuron connections are normal Node-RED connections between nodes.\n\nEach hidden node has an activation function (that it's name in the image) which supplies a function to generate the nodes output. Each hidden node takes all its connections, computes a total value based on the value generated by the linked node multiplied by the weight on the connection between the two nodes. The node than adds a bias value (the first number after the name) to the computed value and then passes that value to the activation function. The result is compared to a threshold (the second number of the node name) and if the value is larger than the threshold, the node (aka neuron) \"fires\", i.e. is active.\n\nThe value is passed to all nodes connected to it and each node than uses that value to compute it's own value. This is repeated for each layer defined in the network, until the output layer is reached and output values are generated.\n\nWhat is not shown are the weights on each connection. These weights are adjusted during the back-propagation step. To view the weights, double click on and hidden or output node and the weights are shown in the properties window of the node.\n\nBack propagation is the correction of connection weights based on the difference between desired output and actual output. This error is propagated *backwards* through the ANN from the output nodes to the input nodes. Along the way, the weights on each relevant connection is adjusted. \"Relevant connection\" because connections between nodes that did not fire are not adjusted.\n\nThis is repeated for the entire training data. Normally ANNs are trained using training data, with which the weights on connections are adjusted until the output nodes produce the desired outputs - as defined in the training data.\n\n## Known Unknowns\n\n- No internationalisation\n- No localisation\n- Non-working back-propagation algorithm\n- No extensive documentation other than this readme\n- Spaghetti code with no tests\n\n## Unknown Knowns\n\n- Many.\n\n## Usage\n\nEach network is assumed to be created in a separate Node-RED flow tab. Each network should have exactly one Trainer node and one Backprop node.\n\nThe ANN itself can have as many input, hidden and output nodes as required. There is a special interconnectedness between the trainer node and the input nodes, as there is a special interrelatedness with output nodes and the backprop node. Both trainer and backprop nodes need to be connected to the input and output nodes respectively.\n\nThe basic manual training is shown in the [abalone manual](examples/abalone-manual.json) flow:\n\n![Abalone Manual](assets/abalone-manual.gif)\n\nFirst the connection weights are randomly set, then the training data is loaded. Third the fast forward is triggered. This simply passes a datapoint through the network and computes and output values. The triggering the backprop step causes the weights to be adjusted *backwardly* through the network, hence the weights change.\n\nThe manual flow is rather repetitive therefore the is an automatic version that does all this automatically. By linking the backprop node to the trainer node and vice versa, the training only has to be triggered once. The training is triggered by loading the dataset. As demonstrated in the [abalone automatic](examples/abalone-automatic.json) flow:\n\n![Abalone Automatic](assets/abalone-automatic.gif)\n\nThis also shows that the testing step that is also done automatically. These are the debug outputs. Each represent a single test datapoint (taken from the original training set) and a debug message is generated containing the output name, the desired value and the actually generated value.\n\n### Shape does not matter\n\nClassic ANNs have all nodes from each layer connected to all nodes in the previous layer, but as [balance and scale](examples/bands.json) ANN demonstrates, this need not be the case. As long as there is a pathway between an input node and an output node, the ANN will work.\n\n### Creating an ANN\n\nFor this example the [Balance and Scale](https://archive.ics.uci.edu/ml/datasets/Balance+Scale) dataset is taken and the completed [flow is here](examples/created.json).\n\n![Create own ANN](assets/create-own.gif)\n\nThings of note here:\n\n- The datasource is retrieved and parsed. Import is that CSV data is generated into a single array and that the header names are included in each datapoint,\n- the input and output nodes have the same names as the columns of the training data\n- the trainer and the backprop nodes are linked to the input and output nodes respectively. Additional the backprop node is connected to all output nodes.\n- the trainer has weight limits and a learning rate that can be set.\n\n## Prior Art\n\n- Backpropagation algorithm inspired by:\nhttps://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/\n\n- Activation functions where taken from https://github.com/howion/activation-functions\n\n- Datasets come from https://archive.ics.uci.edu/ml/datasets.php\n","output":"str","x":894,"y":865,"wires":[["980c1cbaa5cfa016"]]},{"id":"150755852e939532","type":"PkgFile","z":"f7e009091ef2d6b0","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":893,"y":763,"wires":[["19283a77ac09f7d5"]]},{"id":"dca7abf167c0e5dd","type":"link out","z":"f7e009091ef2d6b0","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":1432,"y":1703,"wires":[]},{"id":"3ba14aa78c1ce3f4","type":"FlowHubPull","z":"f7e009091ef2d6b0","g":"207ab18488b22a2f","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","x":346,"y":416,"wires":[[]]},{"id":"e7918b770f03f5db","type":"NodeDevOps","z":"f7e009091ef2d6b0","g":"2b99b089acea5755","name":"","pname":"@gregoriusrippenstein/node-red-contrib-neuralnet-builder","pversion":"0.0.8","pauthorname":"Gerrit Riessen","pauthoremail":"gerrit@openmindmap.org","pdescription":"Node-RED Nodes for creating Artificial Neural Networks (ANNs) using Node-Red.","noderedinstall":true,"randompackagename":false,"ignore_package_check":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-neuralnet-builder","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"version bump to 0.0.8","npmpublish":false,"npmunpublish":false,"npmotp":"111999","x":226,"y":530,"wires":[["150755852e939532"]]}]