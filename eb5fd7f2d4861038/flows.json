[{"id":"eb5fd7f2d4861038","type":"tab","label":"[NodeDev] Example creating happynode","disabled":false,"info":"::: aim\n\nAnother example of using the [nodedev](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) node package.\n\n:::\n","env":[]},{"id":"946cfa0e49d8d130","type":"group","z":"eb5fd7f2d4861038","name":"Step 1: Click to generate package files","style":{"label":true},"nodes":["826006936821430b"],"x":12,"y":327,"w":272,"h":82},{"id":"11337f2c07f9b17e","type":"group","z":"eb5fd7f2d4861038","name":"Step 1a: These files are generated by the NodeFactory","style":{"label":true},"nodes":["6c1e15580e597363","69ee24a5d84f014f","2c60d08d6d801f66","cd752e51e06af21d","7ee6bd9a50ac5625"],"x":485,"y":215,"w":349,"h":282},{"id":"30a51b7f3b4c9e7f","type":"group","z":"eb5fd7f2d4861038","name":"Step 2: Add the NodeDevOps node and connect it","style":{"label":true},"nodes":["c1bb69b0d2a601d7"],"x":217,"y":99,"w":323,"h":82},{"id":"00b841cf5e587e30","type":"group","z":"eb5fd7f2d4861038","name":"Step 3: Connect the tarball and Node-RED install nodes","style":{"label":true},"nodes":["77907d578b32bd6e","816291faeac5a1ed"],"x":752,"y":561,"w":357,"h":180},{"id":"826006936821430b","type":"NodeFactory","z":"eb5fd7f2d4861038","g":"946cfa0e49d8d130","name":"Generate Package Files","nodename":"HappyNode","color":"#87A980","hasbutton":true,"hasinput":false,"outputcount":1,"category":"nodedev","summary":"This is a happy node.","description":"This node is designed with happiness in mind.","icon":"font-awesome/fa-smile-o","frt2bakcomm":true,"bak2frtcomm":true,"createmanifest":true,"x":148,"y":368,"wires":[[]]},{"id":"6c1e15580e597363","type":"PkgFile","z":"eb5fd7f2d4861038","g":"11337f2c07f9b17e","name":"HappyNode.js","filename":"nodes/happynode.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function HappyNodeFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    /* msg handler, in this case pass the message on unchanged */\n    node.on(\"input\", function(msg, send, done) {\n        RED.comms.publish(\"HappyNode:message-from-backend\",\n               RED.util.encodeObject({\n                    ...msg,\n                    \"data\": \"happiness from the server\",\n                })\n        );\n        send(msg);\n        done();\n    });\n  }\n\n  RED.nodes.registerType(\"HappyNode\", HappyNodeFunctionality);\n\n  RED.httpAdmin.post(\"/HappyNode/:id\",\n    RED.auth.needsPermission(\"HappyNode.write\"),\n    (req, res) => {\n      var node = RED.nodes.getNode(req.params.id);\n      if (node != null) {\n        try {\n          if (req.body && node.type == \"HappyNode\") {\n              /* here goes the code for handling a request from the frontend */\n\n              /* this sends the request to the input handler above */\n              node.receive(req.body);\n\n              /* this tells the frontend that all went well */\n              res.status(200).send({\n                \"status\": \"ok\"\n              })\n          } else {\n            res.sendStatus(404);\n          }\n        } catch (err) {\n          console.error(err);\n          res.status(500).send(err.toString());\n          node.error(\"HappyNode: Submission failed: \" + err.toString())\n        }\n      } else {\n        res.sendStatus(404);\n      }\n    });\n}\n","output":"str","x":601,"y":406,"wires":[["69ee24a5d84f014f"]]},{"id":"69ee24a5d84f014f","type":"PkgFile","z":"eb5fd7f2d4861038","g":"11337f2c07f9b17e","name":"HappyNode.html","filename":"nodes/happynode.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n  \n    function sendToBackend(node,data = {}) {\n\n      $.ajax({\n        url:         \"HappyNode/\" + node.id,\n        type:        \"POST\",\n        contentType: \"application/json; charset=utf-8\",\n\n        data: JSON.stringify({\n          ...data,\n          hello:  \"world\",\n        }),\n\n        success: function (resp) {\n          RED.notify(\"Successfully sent happiness to the Node-RED server\", {\n            type: \"warning\",\n            id: \"HappyNode\",\n            timeout: 2000\n          });\n        },\n\n        error: function (jqXHR, textStatus, errorThrown) {\n          if (jqXHR.status == 404) {\n            RED.notify(\"Node has not yet been deployed, please deploy.\", \"error\");\n          } else if (jqXHR.status == 405) {\n            RED.notify(\"Not Allowed.\", \"error\");\n          } else if (jqXHR.status == 500) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"inject.errors.failed\")\n            }), \"error\");\n          } else if (jqXHR.status == 0) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.no-response\")\n            }), \"error\");\n          } else {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.unexpected\", {\n                status: jqXHR.status, message: textStatus }) }), \"error\");\n          }\n        }\n      });\n    }\n\n  function frontendSupportFunction() {\n  }\n\n  var functTwo = (arg) => {\n\n  };\n  \n  RED.nodes.registerType('HappyNode',{\n    color: '#87A980',\n    icon: \"font-awesome/fa-smile-o\",\n    category: 'nodedev',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    inputs: 0,\n\n    outputs: 1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n      this.messageFromBackendHandler = (topic,dataobj) => {\n        console.log( \"here goes the code for handling a message from the backend\", topic, dataobj);\n\n        RED.notify(\"Server sent happiness to the frontend.\", {\n            type: \"success\",\n            id: \"HappyNode\",\n            timeout: 2000\n        });\n      };\n      RED.comms.subscribe('HappyNode:message-from-backend',this.messageFromBackendHandler);\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    onpaletteremove: function() {\n      RED.comms.unsubscribe('HappyNode:message-from-backend',this.messageFromBackendHandler);\n    },\n\n\n    button: {\n      enabled: function() {\n        return !this.changed\n      },\n\n      onclick: function () {\n        if (this.changed) {\n          return RED.notify(RED._(\"notification.warning\", {\n            message: RED._(\"notification.warnings.undeployedChanges\")\n          }), \"warning\");\n        }\n\n        var that = this;\n        sendToBackend(that, {\"payload\": \"Happoiness sent from the frontend\"})\n\n        /* here goes the button code to be executed on click */\n      }\n    },\n\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"HappyNode\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"HappyNode\">\n  <p>This is a happy node.</p>\n  This node is designed with happiness in mind.\n</script>\n","output":"str","x":601,"y":456,"wires":[["77907d578b32bd6e"]]},{"id":"2c60d08d6d801f66","type":"PkgFile","z":"eb5fd7f2d4861038","g":"11337f2c07f9b17e","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"# LICENSE\n\nLicense texts comes here.\n\n","output":"str","x":601,"y":256,"wires":[["cd752e51e06af21d"]]},{"id":"cd752e51e06af21d","type":"PkgFile","z":"eb5fd7f2d4861038","g":"11337f2c07f9b17e","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# HappyNode\n\nDescribe what the package does here.\n\n","output":"str","x":601,"y":306,"wires":[["7ee6bd9a50ac5625"]]},{"id":"7ee6bd9a50ac5625","type":"PkgFile","z":"eb5fd7f2d4861038","g":"11337f2c07f9b17e","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"keywords\": [\n    \"node-red\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}#readme\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"Joe Blog <joe.blog@spreads-the.love>\",\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n       \"happynode\": \"nodes/happynode.js\"\n    }\n  },\n\n  \"description\": \"Description of what these nodes do.\",\n  \"repository\": {\n    \"type\": \"github\",\n    \"url\": \"git+https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":601,"y":356,"wires":[["6c1e15580e597363"]]},{"id":"c1bb69b0d2a601d7","type":"NodeDevOps","z":"eb5fd7f2d4861038","g":"30a51b7f3b4c9e7f","name":"","pname":"@johnsmith/node-red-contrib-happy-node","pversion":"0.0.1","noderedinstall":true,"randompackagename":true,"gitcommit":false,"gitcheckforchange":false,"githubowner":"","githubrepo":"","githubbranch":"main","githubauthor":"","githubauthoremail":"","githubmessage":"","npmpublish":false,"npmunpublish":false,"npmotp":"","x":333,"y":140,"wires":[["2c60d08d6d801f66"]]},{"id":"77907d578b32bd6e","type":"NpmTarBall","z":"eb5fd7f2d4861038","g":"00b841cf5e587e30","name":"","x":848,"y":602,"wires":[["816291faeac5a1ed"]]},{"id":"816291faeac5a1ed","type":"NodeRedInstall","z":"eb5fd7f2d4861038","g":"00b841cf5e587e30","name":"","x":925,"y":700,"wires":[[]]}]