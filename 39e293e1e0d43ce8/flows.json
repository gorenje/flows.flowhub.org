[{"id":"39e293e1e0d43ce8","type":"tab","label":"[Experimental] FlowHub compute engine","disabled":false,"info":"::: aim\n\nSetting up an external Node-RED engine as a headless compute engine. \n\n:::\n\n::: requirements\n\n- [FlowHub nodes](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flowhub)\n- [introspection nodes](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection)\n\n:::\n\n### Description\n\nWhat I was thinking of the other day was how to set up a flow that pushes another flow to a compute engine. Once that remote flow starts, the original flow sends data and recieves results of the compute.\n\nThis would be an extension to [FlowHub](https://flowhub.org) whereby not only can flows be pushed and pulled but also executed on a compute engine hosted by FlowHub.\n\nOf course, I do not want to pay for other peoples computing, so an alternative would be to push and pull flows from FlowHub but have the compute engine be installed by the user.\n\nThe flow would be pushed to the compute engine of the user, the payload would be sent to that flow and the result would come back to the original flow, i.e., this one.\n\nThis is what happens here.\n\nThe <a class=\"ahl-node-only\" data-ids=\"c4dc44265922ef31\">trigger node</a> kicks it all off. \n\nThe intention would be to encapsulate this flow in a node, so we make the assumption that the original payload should be sent to the remote flow *once it is* executing. So in the <a class=\"ahl-node-only\" data-ids=\"ad59d789ccf78843\">change node</a> a copy is made of the payload before the payload is sent.\n\nNow the flow to be executed is <a class=\"ahl-node-only\" data-ids=\"cca81cdb2f201684\">retrieved from FlowHub</a> and passed to the <a class=\"ahl-node-only\" data-ids=\"db576b65568e6273\">send flow node</a> that sends the flow to the raspberrypi (the external compute engine in this case). The [flow](https://flowhub.org/f/46186ccb85f93a93) retrieved from FlowHub is given a specific revision, this prevents bugs if the remote flow is changed in the future.\n\nOne thing the remote flow does is to create a http-in node. This would need to be done automagically or some other means of communication needs to be found, but that is not important for this experiment.\n\nIn this case, the remote flow defines an http endpoint: `/entrypoint` to which this flow <a class=\"ahl-node-only\" data-ids=\"69b00fa4d4734818\">sends the original payload</a>. Finally the <a class=\"ahl-node-only\" data-ids=\"ba0358947aadb94f\">debug node</a> displays the results of the compute.\n\n### Sequence Diagram\n\nAll that above looks like this when drawn as a sequence diagram:\n\n```mermaid\nsequenceDiagram\n    Local NodeRED->>Local NodeRED: Copy payload\n    Local NodeRED->>FlowHub: Get flow for id: 46186ccb85f93a93\n    FlowHub->>Local NodeRED: flow data\n    Local NodeRED->>Remote Node-RED: Install flow id: 46186ccb85f93a93\n    Remote Node-RED->>Local NodeRED: flow installed and started\n    Local NodeRED->>Local NodeRED: Copy reset payload to original\n    Local NodeRED->>Remote Node-RED(remote flow): send payload to /entrypoint\n    Remote Node-RED(remote flow)->>Local NodeRED: result of executing flow\n```\n\n### Possible Usecases?\n\nNone of this is new, this is how libraries of code work. This is how packages from NPMjs.com work. The idea of installing remote code to have executed somewhere else is what amazon AWS calls lambda functions.\n\nWhat is so fascinating here is that its *visual* compute engines. This is one possibility of doing remote computation but visually. This implies that anyone who can *visually* program something can participate in a software product. There are clear boundaries (and thereby *expectations*) between code that is called and code that is doing the calling.\n\nNow imagine there would be an API for calling Node-RED via other programming languages, such as Python or Ruby. That would mean that I could install Node-RED software on a remote headless compute Node-RED and someone else could call that program. With neither being depended on the other.\n\n","env":[]},{"id":"cca81cdb2f201684","type":"FlowHubPull","z":"39e293e1e0d43ce8","name":"[FlowHub] Retrieve specific flow with specific revision","notab":false,"flowid":"46186ccb85f93a93","flowname":"[Test] Testing, one two, one two...","flowrevision":"c21da512","x":560,"y":569,"wires":[["db576b65568e6273"]]},{"id":"c4dc44265922ef31","type":"inject","z":"39e293e1e0d43ce8","name":"Trigger","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{ \"text\" : \"hello world\" }","payloadType":"json","x":273,"y":838,"wires":[["ad59d789ccf78843"]]},{"id":"db576b65568e6273","type":"SendFlow","z":"39e293e1e0d43ce8","name":"Send flow to raspberry pi","hostUrl":"http://raspberrypi/nodered","flowVersion":"v1","useAuthentication":false,"apiUsername":"","apiUsernameType":"env","apiPassword":"","apiPasswordType":"env","x":835,"y":414,"wires":[["39eb031899c02e80"]]},{"id":"69b00fa4d4734818","type":"http request","z":"39e293e1e0d43ce8","name":"Send original payload to flow on raspberrypi","method":"POST","ret":"obj","paytoqs":"ignore","url":"http://raspberrypi/entrypoint","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1330,"y":644,"wires":[["ba0358947aadb94f"]]},{"id":"ba0358947aadb94f","type":"debug","z":"39e293e1e0d43ce8","name":"show result in debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1521,"y":772,"wires":[]},{"id":"ad59d789ccf78843","type":"change","z":"39e293e1e0d43ce8","name":"store original payload","rules":[{"t":"set","p":"http_payload","pt":"msg","to":"payload","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":412,"y":693,"wires":[["cca81cdb2f201684"]]},{"id":"39eb031899c02e80","type":"change","z":"39e293e1e0d43ce8","name":"set payload to original payload","rules":[{"t":"set","p":"payload","pt":"msg","to":"http_payload","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":1061,"y":524,"wires":[["69b00fa4d4734818"]]}]