[{"id":"5f0c36ed4bd03058","type":"tab","label":"[babylonjs] 3D Node-RED Flow","disabled":false,"info":"::: aim\n\nRender flows into a 3D scene using BabylonJS.\n\n:::\n\n::: requirements\n\n- [introspection nodes](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection)\n\n:::\n\n### Usage\n\nThere are two ways of using this flow, one is to use the <a class=\"ahl-node-only\" data-ids=\"619fbdb53fa2ad98\">generate button</a> that will copy the code into the pasteboard. That code can then be pasted into the [BabylonJS](https://playground.babylonjs.com/) playground (select-all and paste).\n\nThe other way to use this flow is to connect to the http endpoint `http://noderedhost:1880/3dflows/<flowid>` - flowid being the id in the tab url.\n\n`flowid` can also be \"all\" and then all flows are rendered.\n\n\n### Description\n\nWhat this does is take the JSON data of all the flows and layer each flow onto a Z plane upon which the nodes of the flow are rendered.\n\nWires are drawn to connect nods on the same plane.\n\nWhat is generated is a long JS function with individal calls to the Babylon API.\n\n","env":[]},{"id":"7bd729760cb32436","type":"function","z":"5f0c36ed4bd03058","name":"generate 3d world from all flows","func":"let mesh = [];\nlet nodes = {};\n\nlet zValues = {};\n\n// for each flow (i.e. `z` value), compute a position in 3D space.\n// Specifically the flows are layered in the z-axis\nmsg.payload.forEach((nd) => {\n    zValues[nd.z] = zValues[nd.z] || (\n        Math.max.apply(Math, Object.values(zValues).concat([0])) + 100\n    )\n})\n\nmsg.payload.forEach((nd) => {\n    if (nd && nd.x && nd.y) {\n        nd.l = Math.max( 20, (nd.name || nd.info || \"\").length )\n\n        nd.x = (nd.x - 2500) * 1\n        nd.y = (nd.y - 2500) * -1\n        nd.z = zValues[nd.z];\n\n        nd.width = nd.l * 10\n\n        nd.ports = {\n            output: {\n                x: nd.x + nd.width/2,\n                y: nd.y,\n            },\n            input: {\n                x: nd.x - nd.width / 2,\n                y: nd.y\n            }\n        }\n\n        mesh.push(`\n    box = BABYLON.MeshBuilder.CreateBox(\"${nd.id}\", {...options, width: ${nd.width}, height: 30, depth: 50}, scene);\n    box.material = mat;\n    box.position.x = ${nd.x};\n    box.position.y = ${nd.y};\n    box.position.z = ${nd.z};\n        `\n        )\n        nodes[nd.id] = nd\n    }\n})\n\nmsg.payload.forEach(nd => {\n    if (nd && nd.wires) {\n        for (var pCnt = 0; pCnt < nd.wires.length; pCnt++) {\n            for (var wCnt = 0; wCnt < nd.wires[pCnt].length; wCnt++) {\n                let otherNode = nodes[nd.wires[pCnt][wCnt]]\n                if (otherNode) {\n                    mesh.push(`\n                p1 = new BABYLON.Vector3(${nd.ports.output.x}, ${nd.ports.output.y}, ${nd.z});\n                t1 = new BABYLON.Vector3(${nd.ports.output.x}, ${nd.ports.output.y}, ${nd.z});\n                p2 = new BABYLON.Vector3(${otherNode.ports.input.x}, ${otherNode.ports.input.y}, ${otherNode.z});\n                t2 = new BABYLON.Vector3(${otherNode.ports.input.x}, ${otherNode.ports.input.y}, ${otherNode.z});\n                hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, 50);\n\n                BABYLON.Mesh.CreateLines(\"${nd.id}-${otherNode.id}\", hermite.getPoints(), scene).color = new BABYLON.Color3(1, 0.6, 0);\n                `)\n                }\n            }\n        }\n    }\n})\n\nmsg.payload.forEach((nd) => {\n    if (nd && nd.x && nd.y) {\n        nd.t = (nd.name || nd.info || \"\").replaceAll('\"',\"\\\\\\\"\").replaceAll(\"\\n\",\"\\\\n\")\n\n        if ( nd.t != \"\" ) {\n            mesh.push(`\n                makeTextPlane(\"${nd.t}\", \"red\", 100).position = new BABYLON.Vector3(${nd.x}, ${nd.y}, ${nd.z});\n            `\n            )\n        }\n    }\n})\n\nmsg.payload = mesh.join(\"\\n\")\n\nreturn msg","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"path","module":"path"}],"x":1101.33349609375,"y":517,"wires":[["2cec9e6087c80e12"]]},{"id":"619fbdb53fa2ad98","type":"inject","z":"5f0c36ed4bd03058","name":"generate babylonjs code","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":572.19091796875,"y":154.42849731445312,"wires":[["8d0e4f577a13ef8d"]]},{"id":"8d0e4f577a13ef8d","type":"GetFlows","z":"5f0c36ed4bd03058","name":"","flowVersion":"v1","useAuthentication":true,"apiUsername":"admin","apiUsernameType":"cred","apiPassword":"admin","apiPasswordType":"cred","x":873.19091796875,"y":300.571533203125,"wires":[["334de86f03227cd8"]]},{"id":"334de86f03227cd8","type":"json","z":"5f0c36ed4bd03058","name":"","property":"payload","action":"obj","pretty":false,"x":1029.69091796875,"y":405.571533203125,"wires":[["7bd729760cb32436","9f6ee13a0817687d"]]},{"id":"2cec9e6087c80e12","type":"template","z":"5f0c36ed4bd03058","name":"babylonjs createScene function","field":"payload","fieldType":"msg","format":"javascript","syntax":"mustache","template":"var createScene = function () {\n    var scene = new BABYLON.Scene(engine);\n    scene.clearColor = new BABYLON.Color3(.5, .5, .5);\n\n    var camera = new BABYLON.UniversalCamera(\"camera1\", new BABYLON.Vector3(0, 0, -0), scene, true);\n    //camera.setTarget(BABYLON.Vector3.Zero());\n    camera.attachControl(canvas, true);\n    camera.inputs.addMouseWheel();\n    //camera.inputs.attached[\"mousewheel\"].wheelPrecisionY = -1;\n\n    var light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), scene);\n    var light2 = new BABYLON.PointLight(\"light2\", new BABYLON.Vector3(0, 1, -1), scene);\n\n    const options = {\n        wrap: false,\n        width: 3,\n        updatable: true,\n        faceColors: [\n            new BABYLON.Color4(0.81, 0.08, 0.46, 0.3),\n            new BABYLON.Color4(0.9, 0.08, 0.55, 0.84),\n            new BABYLON.Color4(0.91, 0.57, 0.07),\n            new BABYLON.Color4(0.09, 0.16, 0.77, 0.73),\n            new BABYLON.Color4(0.11, 1, 0.23, 0.77),\n            new BABYLON.Color4(0.81, 0.15, 0.1, 0.3),\n        ]\n    };\n\n    let mat = new BABYLON.StandardMaterial(\"fubar\", scene);\n    mat.diffuseColor = new BABYLON.Color3(0.9, 1, 0)\n    mat.specularColor = new BABYLON.Color3(0.79, 0.13, 0.13);\n    mat.alpha = 0.5;\n\n    let box = BABYLON.MeshBuilder.CreateBox(\"box\", options, scene);\n    box.material = mat;\n    box.position.x = 3;\n    box.position.y = 4;\n    box.position.z = 5;\n\n    let p1;\n    let p2;\n    let t1;\n    let t2;\n    let hermite;\n\n    var makeTextPlane = function (text, color, size) {\n        var dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", { width: 890, height: 256 }, scene, true);\n        dynamicTexture.hasAlpha = true;\n        dynamicTexture.drawText(text, 0, 40, \"bold 44px monospace\", color, \"transparent\", true);\n        var plane = BABYLON.Mesh.CreatePlane(\"TextPlane\", size, scene, true);\n        plane.material = new BABYLON.StandardMaterial(\"TextPlaneMaterial\", scene);\n        plane.material.backFaceCulling = false;\n        plane.material.specularColor = new BABYLON.Color3(0, 0, 0);\n        plane.material.diffuseTexture = dynamicTexture;\n        return plane;\n        /*\n    \n            var ground = BABYLON.MeshBuilder.CreatePlane(\"ground1\", { width: 300, height: 100, subdivisions: 25 }, scene);\n    \n            var textureGround = new BABYLON.DynamicTexture(\"dynamic texture\", { width: 512, height: 256 }, scene);\n            textureGround.hasAlpha = true;\n            //var textureContext = textureGround.getContext();\n    \n            var materialGround = new BABYLON.StandardMaterial(\"Mat\", scene);\n            materialGround.diffuseTexture = textureGround;\n            materialGround.color = new BABYLON.Color3(1, 1, 1, 0)\n            ground.material = materialGround;\n       ground.material.backFaceCulling = false;\n            //Add text to dynamic texture\n            var font = \"bold 22px monospace\";\n            textureGround.drawText(text, 5, 135, font, color, \"white\", true, true);\n            return ground;        \n            */\n    };\n\n    {{{ payload }}}\n\n\n    var showAxis = function (size) {\n        var axisX = BABYLON.Mesh.CreateLines(\"axisX\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0),\n            new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)\n        ], scene);\n        axisX.color = new BABYLON.Color3(1, 0, 0);\n        var xChar = makeTextPlane(\"X\", \"red\", size / 10);\n        xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);\n        var axisY = BABYLON.Mesh.CreateLines(\"axisY\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(-0.05 * size, size * 0.95, 0),\n            new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(0.05 * size, size * 0.95, 0)\n        ], scene);\n        axisY.color = new BABYLON.Color3(0, 1, 0);\n        var yChar = makeTextPlane(\"Y\", \"green\", size / 10);\n        yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);\n        var axisZ = BABYLON.Mesh.CreateLines(\"axisZ\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, -0.05 * size, size * 0.95),\n            new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, 0.05 * size, size * 0.95)\n        ], scene);\n        axisZ.color = new BABYLON.Color3(0, 0, 1);\n        var zChar = makeTextPlane(\"Z\", \"blue\", size / 10);\n        zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);\n    };\n\n    showAxis(30);\n\n    return scene;    \n}","output":"str","x":1238.5,"y":647.8333435058594,"wires":[["38b74d0d64f8aa50"]]},{"id":"38b74d0d64f8aa50","type":"ClientCode","z":"5f0c36ed4bd03058","name":"Copy to pasteboard","clientcode":"if (RED.clipboard.copyText(msg.payload) ) {\n    RED.notify(\"Babylon code copied to pasteboard.\", \"success\");\n} else {\n    RED.notify(\"ERORORORRRRO - check browser console.\", \"error\");\n}\n","format":"javascript","x":1661,"y":647.8333435058594,"wires":[[]]},{"id":"efd6728cc65ccfc8","type":"http response","z":"5f0c36ed4bd03058","name":"","statusCode":"","headers":{},"x":1269,"y":853.25,"wires":[]},{"id":"9f6ee13a0817687d","type":"function","z":"5f0c36ed4bd03058","name":"payload length becomes ...","func":"msg.payload = msg.payload.length\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1374,"y":358.5,"wires":[["e84b72656fe46c3e"]]},{"id":"e84b72656fe46c3e","type":"debug","z":"5f0c36ed4bd03058","name":"... node count","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":1587,"y":358.5,"wires":[]},{"id":"42a1067b47e32f0b","type":"http in","z":"5f0c36ed4bd03058","name":"","url":"/3dflows/:flid/data","method":"get","upload":false,"swaggerDoc":"","x":340,"y":1450,"wires":[["f4a532b31106c966"]]},{"id":"f4a532b31106c966","type":"GetFlows","z":"5f0c36ed4bd03058","name":"","flowVersion":"v1","useAuthentication":false,"apiUsername":"","apiUsernameType":"cred","apiPassword":"","apiPasswordType":"cred","x":674,"y":1299,"wires":[["424bbc1dd35916bf"]]},{"id":"424bbc1dd35916bf","type":"json","z":"5f0c36ed4bd03058","name":"","property":"payload","action":"obj","pretty":false,"x":824,"y":1169,"wires":[["6b9ae05fbdd6d4e2"]]},{"id":"6b9ae05fbdd6d4e2","type":"function","z":"5f0c36ed4bd03058","name":"filter out requested flow","func":"msg.flid = msg.req.params.flid || path.dirname(node.path);\n\nif ( msg.flid != \"all\") {\n    msg.payload = msg.payload.filter(function (obj) {\n        return (obj.id == msg.flid || obj.z == msg.flid)\n    });\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"path","module":"path"}],"x":995,"y":1069,"wires":[["efd6728cc65ccfc8"]]},{"id":"0f419226f5534b16","type":"http in","z":"5f0c36ed4bd03058","name":"","url":"/3dflows/:flid","method":"get","upload":false,"swaggerDoc":"","x":309,"y":853.25,"wires":[["1292a8972d3cb0e7"]]},{"id":"d8156133774dd0a9","type":"template","z":"5f0c36ed4bd03058","name":"html template","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Flows In 3D</title>\n\n    <style>\n        html,\n        body {\n            overflow: hidden;\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n        }\n\n        #renderCanvas {\n            width: 100%;\n            height: 100%;\n            touch-action: none;\n        }\n        #fps {\n                opacity: 0.5;\n                position: absolute;\n                background-color: black;\n                border: 0px;\n                text-align: center;\n                font-size: 16px;\n                color: white;\n                top: 15px;\n                right: 10px;\n                width: 60px;\n                height: 20px;\n                visibility: hidden;\n            }        \n    </style>\n\n        <!-- Babylon.js -->\n        <script src=\"https://code.jquery.com/pep/0.4.2/pep.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js\"></script>\n\n        <script src=\"https://preview.babylonjs.com/ammo.js\"></script>\n        <script src=\"https://preview.babylonjs.com/cannon.js\"></script>\n        <script src=\"https://preview.babylonjs.com/Oimo.js\"></script>\n        <script src=\"https://preview.babylonjs.com/libktx.js\"></script>\n        <script src=\"https://preview.babylonjs.com/earcut.min.js\"></script>\n        <script src=\"https://preview.babylonjs.com/babylon.js\"></script>\n        <script src=\"https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js\"></script>\n        <script src=\"https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js\"></script>\n        <script src=\"https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js\"></script>\n        <script src=\"https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js\"></script>\n        <script src=\"https://preview.babylonjs.com/loaders/babylonjs.loaders.js\"></script>\n        <script src=\"https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js\"></script>\n        <script src=\"https://preview.babylonjs.com/gui/babylon.gui.min.js\"></script>\n\n         <script src=\"https://cdn.openmindmap.org/embed/flowviewer.min.js\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n         <link rel=\"stylesheet\" href=\"https://cdn.openmindmap.org/embed/flowviewer.css\"/>\n         <script src=\"https://cdn.openmindmap.org/embed/jquery-3.7.0.min.js\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n</head>\n\n<body>\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas> //touch-action=\"none\" for best results from PEP\n    <script>\n        {{{renderScene}}}\n\n        var canvas = document.getElementById(\"renderCanvas\");\n\n        var startRenderLoop = function (engine, canvas) {\n            engine.runRenderLoop(function () {\n                if (sceneToRender && sceneToRender.activeCamera) {\n                    sceneToRender.render();\n                }\n            });\n        }\n\n        var engine = null;\n        var scene = null;\n        var sceneToRender = null;\n        var createDefaultEngine = function() { \n            return new BABYLON.Engine(canvas, true, { \n                preserveDrawingBuffer: true, \n                stencil: true,  \n                disableWebGL2Support: false\n            }); \n        };\n\n        // Resize\n        window.addEventListener(\"resize\", function () {\n            engine.resize();\n        });\n\n        $.get(\"/3dflows/{{ req.params.flid }}/data\", (data,status) => {\n                var asyncEngineCreation = function() {\n                    try {\n                    return createDefaultEngine();\n                    } catch(e) {\n                    console.log(\"the available createEngine function failed. Creating the default engine instead\");\n                    return createDefaultEngine();\n                    }\n                }\n\n                window.engine = asyncEngineCreation();\n            if (!engine) throw 'engine should not be null.';\n             window.scene = renderScene( data )\n             scene = window.scene\n             sceneToRender = window.scene;\n            startRenderLoop(engine, canvas);\n        })\n\n\n    </script>\n</body>\n\n</html>\n","output":"str","x":1028,"y":853.25,"wires":[["efd6728cc65ccfc8"]]},{"id":"1292a8972d3cb0e7","type":"template","z":"5f0c36ed4bd03058","name":"renderSceneFunction","field":"renderScene","fieldType":"msg","format":"javascript","syntax":"mustache","template":"function renderScene(nodes) {\n    var scene = new BABYLON.Scene(engine);\n    scene.clearColor = new BABYLON.Color3(.5, .5, .5);\n\n    var camera = new BABYLON.UniversalCamera(\"camera1\", new BABYLON.Vector3(0, 0, -0), scene, true);\n    //camera.setTarget(BABYLON.Vector3.Zero());\n    camera.attachControl(canvas, true);\n    camera.inputs.addMouseWheel();\n    //camera.inputs.attached[\"mousewheel\"].wheelPrecisionY = -1;\n\n    var light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), scene);\n    var light2 = new BABYLON.PointLight(\"light2\", new BABYLON.Vector3(0, 1, -1), scene);\n\n    const options = {\n        wrap: false,\n        width: 3,\n        updatable: true,\n        faceColors: [\n            new BABYLON.Color4(0.81, 0.08, 0.46, 0.3),\n            new BABYLON.Color4(0.9, 0.08, 0.55, 0.84),\n            new BABYLON.Color4(0.91, 0.57, 0.07),\n            new BABYLON.Color4(0.09, 0.16, 0.77, 0.73),\n            new BABYLON.Color4(0.11, 1, 0.23, 0.77),\n            new BABYLON.Color4(0.81, 0.15, 0.1, 0.3),\n        ]\n    };\n\n    let mat = new BABYLON.StandardMaterial(\"fubar\", scene);\n    mat.diffuseColor = new BABYLON.Color3(0.9, 1, 0)\n    mat.specularColor = new BABYLON.Color3(0.79, 0.13, 0.13);\n    mat.alpha = 0.5;\n\n    let box;\n    let p1;\n    let p2;\n    let t1;\n    let t2;\n    let hermite;\n\n    var makeTextPlane = function (text, color, size) {\n        var dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", { width: 890, height: 256 }, scene, true);\n        dynamicTexture.hasAlpha = true;\n        dynamicTexture.drawText(text, 0, 40, \"bold 44px monospace\", color, \"transparent\", true);\n        var plane = BABYLON.Mesh.CreatePlane(\"TextPlane\", size, scene, true);\n        plane.material = new BABYLON.StandardMaterial(\"TextPlaneMaterial\", scene);\n        plane.material.backFaceCulling = false;\n        plane.material.specularColor = new BABYLON.Color3(0, 0, 0);\n        plane.material.diffuseTexture = dynamicTexture;\n        return plane;\n    };\n\n    let nodeIdtoNode = {};\n\n    let zValues = {};\n\n    // for each flow (i.e. `z` value), compute a position in 3D space.\n    // Specifically the flows are layered in the z-axis\n    nodes.forEach((nd) => {\n        if ( nd.z){\n            zValues[nd.z] = zValues[nd.z] || (\n                Math.max.apply(Math, Object.values(zValues).concat([0])) + 100\n            )\n        }\n    })\n    \n    if ( Object.keys(zValues).length == 1 ) {\n        zValues[Object.keys(zValues)[0]] = 0\n    }\n    \n    nodes.forEach((nd) => {\n        if (nd && nd.x && nd.y) {\n            nd.l = Math.max(10, (nd.name || nd.info || nd.type || \"\").length)\n\n            nd.x = (nd.x - 2500) * 1\n            nd.y = (nd.y - 2500) * -1\n            nd.zLayer = nd.z;\n            nd.z = zValues[nd.z];\n\n            nd.width = nd.l * 10\n\n            nd.ports = {\n                output: {\n                    x: nd.x + nd.width / 2,\n                    y: nd.y,\n                },\n                input: {\n                    x: nd.x - nd.width / 2,\n                    y: nd.y\n                }\n            }\n\n\n            var clr = clrByType[nd.type] || clrByType[\"_default\"];\n            var mth = (clr.fill || \"\").match(/rgb\\(([^,]+),([^,]+),([^,]+)\\)/)\n            if ( mth ) {\n                clr = \"#\" + parseInt(mth[1]).toString(16).padStart(2, \"0\") + parseInt(mth[2]).toString(16).padStart(2, \"0\") + parseInt(mth[3]).toString(16).padStart(2, \"0\")\n            } else {\n                clr = clr.fill;\n            }\n            box = BABYLON.MeshBuilder.CreateBox(nd.id, {...options, \n                width: nd.width, \n                height: 30, \n                depth: 50,\n                faceColors: [\n                    new BABYLON.Color4(0.81, 0.08, 0.46, 0.3),\n                    new BABYLON.Color4.FromHexString(clr),\n                    new BABYLON.Color4(0.9, 0.08, 0.55, 0.84),\n                    new BABYLON.Color4(0.09, 0.16, 0.77, 0.73),\n                    new BABYLON.Color4(0.11, 1, 0.23, 0.77),\n                    new BABYLON.Color4(0.81, 0.15, 0.1, 0.3),\n                ]\n            }, scene);\n\n            box.material = mat;\n            box.position.x = nd.x;\n            box.position.y = nd.y;\n            box.position.z = nd.z;\n            nodeIdtoNode[nd.id] = nd\n        }\n    })\n\n    nodes.forEach(nd => {\n        if (nd && nd.wires) {\n            for (var pCnt = 0; pCnt < nd.wires.length; pCnt++) {\n                for (var wCnt = 0; wCnt < nd.wires[pCnt].length; wCnt++) {\n                    let otherNode = nodeIdtoNode[nd.wires[pCnt][wCnt]]\n                    if (otherNode) {\n                        /* generate link path magically this comes from renderFlow library */\n                        var svgPathStr = generateLinkPath(nd.ports.output.x, nd.ports.output.y, otherNode.ports.input.x, otherNode.ports.input.y, 1)\n                        /* Check this for SVG Path specifications and its meanings --> https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths */\n                        var pts = svgPathStr.split(/\\s+/).map(d => { return parseFloat(d) })\n\n                        if (svgPathStr.indexOf('S') < 0 ) {\n                            /* no 'S', simply Bezier with two control points */\n                            const bezier3 = BABYLON.Curve3.CreateCubicBezier(\n                                new BABYLON.Vector3(pts[1], pts[2], nd.z),\n                                new BABYLON.Vector3(pts[4], pts[5], nd.z),\n                                new BABYLON.Vector3(pts[6], pts[7], otherNode.z),\n                                new BABYLON.Vector3(pts[8], pts[9], otherNode.z),\n                                40)\n                            BABYLON.Mesh.CreateLines(nd.id + \"-\" + otherNode.id, bezier3.getPoints(), scene).color = new BABYLON.Color3(1, 0.6, 0);                                \n\n                        } else {\n                            /* argh, we have sub-curves since there is S, in fact three S */\n\n                            const bezier1 = BABYLON.Curve3.CreateCubicBezier(\n                                new BABYLON.Vector3(pts[1], pts[2], nd.z),\n                                new BABYLON.Vector3(pts[4], pts[5], nd.z),\n                                new BABYLON.Vector3(pts[6], pts[7], nd.z),\n                                new BABYLON.Vector3(pts[8], pts[9], nd.z),\n                                20)\n\n                            const bezier2 = BABYLON.Curve3.CreateQuadraticBezier(\n                                new BABYLON.Vector3(pts[8], pts[9], nd.z),\n                                new BABYLON.Vector3(pts[11], pts[12], nd.z),\n                                new BABYLON.Vector3(pts[13], pts[14], nd.z),\n                                20)\n\n                            const bezier3 = BABYLON.Curve3.CreateQuadraticBezier(\n                                new BABYLON.Vector3(pts[13], pts[14], nd.z),\n                                new BABYLON.Vector3(pts[16], pts[17], nd.z),\n                                new BABYLON.Vector3(pts[18], pts[19], nd.z),\n                                20)\n\n                            const bezier4 = BABYLON.Curve3.CreateQuadraticBezier(\n                                new BABYLON.Vector3(pts[18], pts[19], nd.z),\n                                new BABYLON.Vector3(pts[21], pts[22], nd.z),\n                                new BABYLON.Vector3(pts[23], pts[24], nd.z),\n                                20);\n\n                            \n                            BABYLON.Mesh.CreateLines(nd.id + \"-\" + otherNode.id, bezier1.getPoints().concat(bezier2.getPoints()).concat(bezier3.getPoints()).concat(bezier4.getPoints()), scene).color = new BABYLON.Color3(1, 0.6, 0);\n                        }\n\n                    }\n                }\n            }\n        }\n    })\n\n    nodes.forEach((nd) => {\n        if (nd && nd.x && nd.y) {\n            nd.t = (nd.name || nd.info || nd.type || \"\").replaceAll('\"', \"\\\\\\\"\").replaceAll(\"\\n\", \"\\\\n\")\n\n            if (nd.t != \"\") {\n                makeTextPlane(nd.t, \"red\", 100).position = new BABYLON.Vector3(nd.x, nd.y, nd.z);                \n            }\n        }\n    })\n\n\n\n\n    var showAxis = function (size) {\n        var axisX = BABYLON.Mesh.CreateLines(\"axisX\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0),\n            new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)\n        ], scene);\n        axisX.color = new BABYLON.Color3(1, 0, 0);\n        var xChar = makeTextPlane(\"X\", \"red\", size / 10);\n        xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);\n        var axisY = BABYLON.Mesh.CreateLines(\"axisY\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(-0.05 * size, size * 0.95, 0),\n            new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(0.05 * size, size * 0.95, 0)\n        ], scene);\n        axisY.color = new BABYLON.Color3(0, 1, 0);\n        var yChar = makeTextPlane(\"Y\", \"green\", size / 10);\n        yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);\n        var axisZ = BABYLON.Mesh.CreateLines(\"axisZ\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, -0.05 * size, size * 0.95),\n            new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, 0.05 * size, size * 0.95)\n        ], scene);\n        axisZ.color = new BABYLON.Color3(0, 0, 1);\n        var zChar = makeTextPlane(\"Z\", \"blue\", size / 10);\n        zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);\n    };\n\n    showAxis(30);\n\n    return scene;    \n}\n\n","output":"str","x":603,"y":853.25,"wires":[["b4ea0e0d782d1bdb"]]},{"id":"b4ea0e0d782d1bdb","type":"UglifyJS","z":"5f0c36ed4bd03058","name":"","config":"{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":false,\"warnings\":false}","configType":"json","property":"renderScene","propertyType":"msg","x":808,"y":853.25,"wires":[["d8156133774dd0a9"]]},{"id":"d3789f2a3ae3566e","type":"catch","z":"5f0c36ed4bd03058","name":"","scope":null,"uncaught":false,"x":412,"y":505,"wires":[["9d1a759fe0ffbc4c"]]},{"id":"9d1a759fe0ffbc4c","type":"debug","z":"5f0c36ed4bd03058","name":"debug 65","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":762,"y":418,"wires":[]}]