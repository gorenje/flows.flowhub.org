[{"id":"d104825b996e7cef","type":"tab","label":"[GitHub] get file contents","disabled":false,"info":"This flow utilises the [GitHub base functionality](https://flowhub.org/f/390ee0021ded4910) flow to obtain all commits in a repository. All prerequistes of that flow must be fulfilled.\n\n### Aim\n\nRetrieve the content of various versions of a file located in a subdirectory. The repository is assumed to have the following structure:\n\n```\n...\n|-- directory01\n    |   ^-- flows.json\n|-- directory02\n    |   ^-- flows.json\n|-- directory03\n    |   ^-- flows.json\n...\n```\n\nGoal is to obtain X versions (random, not last X versions) of the `flows.json` in `directory02`. File and directory names have not changed over the various versions.\n\n### Input\n\nThe `msg` object from the <a class=\"ahl-node-only\" data-ids=\"0380eab2578ec2a3\">link-in node</a> is assumed to have the following structure: \n\n```javascript\nmsg.github = {\n    owner: 'octokat',\n    repo: 'kittens.robots',\n    branch: 'main'\n};\n\nmsg.directoryname = \"directory02\";\n\nmsg.payload = [\"sha1\", \"sha2\",\"sha3\"];\n```\n\nThe payload are *top-level* shas, meaning these are the commits of the repository, not the commits of the initial file versions.\n\nA git commit can contain multiple changes and this flow identifies the file sha for the change of the file requested. Each file has its own *file* sha for a *commit* sha, or it has an unchanged *file* sha if nothing changed for that commit.\n\nIf you wish to change the file name, have a look in the <a class=\"ahl-node-only\" data-ids=\"3c88e504cade137e\">second function node</a>, its code is:\n\n```javascript\nmsg.payload = msg.payload.filter(function(e){\n    return e.path == \"flows.json\"\n})[0].sha;\n\nreturn msg;\n```\n\n### Sequence diagram\n\n```mermaid\nsequenceDiagram\n    LinkIn Node->>OMM: paylod with array of top-level shas\n    OMM->>OMM: split payload into separate messages\n    par OMM to Github\n    OMM->>GitHub: get commit tree for top-level sha\n    GitHub->>OMM: tree structure with shas\n    OMM->>OMM: obtain sha for directory\n    OMM->>GitHub: get tree for the directory sha\n    GitHub->>OMM: tree with file shas for all files\n    OMM->>OMM: get file sha for the filename `flows.json`\n    OMM->>GitHub: file contents for file sha (blob)\n    GitHub->>OMM: base64 encoded file contents\n    end\n    OMM->>OMM: collect together all results\n    OMM->>LinkOut Node: payload with all versions of file\n```\n\n### Output\n\nThe output in `msg.payload` is constucted by <a class=\"ahl-node-only\" data-ids=\"3630d6098438ada5\">final function node</a> which does this:\n\n```javascript\nmsg.payload = {\n    sha:     msg.commit.sha,\n    content: msg.payload.content,\n    commit:  msg.commit,\n}\n```\n\nThe `msg.commit` is the original payload containing the top-level sha. The `content` is base64 encoded, that's what github returns via their api.\n\nThe <a class=\"ahl-node-only\" data-ids=\"7121357f3b59dc62\">join node</a> collects all those payloads together and returns a single array containing all the individual payloads, that is, <a class=\"ahl-node-only\" data-ids=\"23787c212fefba8f\">link out</a> has this payload: \n\n```javascript\nmsg.payload = [\n    {\n        sha: 'sha1',\n        content: '<base64>',\n        commit: {\n            ...commit object...\n        }\n    },\n    {\n        sha: 'sha2',\n        content: '<base64>',\n        commit: {\n            ...commit object...\n        }\n    },\n    {\n        sha: 'sha3',\n        content: '<base64>',\n        commit: {\n            ...commit object...\n        }\n    },\n] \n```\n\n","env":[]},{"id":"e06a88c851a30178","type":"group","z":"d104825b996e7cef","name":"split-join loop","style":{"label":true,"label-position":"ne","color":"#000000"},"nodes":["e3954d374112267e","94715bfc5d5e9a2e","bc2257f66d5d4313","695f8e1d1b2a16c5","9902e675dfdce21e","3630d6098438ada5","7121357f3b59dc62","1983b6e4662ee7b2","3c88e504cade137e"],"x":661,"y":392,"w":639,"h":475},{"id":"5b30597ddf34f570","type":"change","z":"d104825b996e7cef","name":"owner,branch,repo","rules":[{"t":"set","p":"repo","pt":"msg","to":"github.repo","tot":"msg"},{"t":"set","p":"owner","pt":"msg","to":"github.owner","tot":"msg"},{"t":"set","p":"branch","pt":"msg","to":"github.branch","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":697,"y":326,"wires":[["e3954d374112267e"]]},{"id":"e3954d374112267e","type":"split","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":784,"y":433,"wires":[["94715bfc5d5e9a2e"]]},{"id":"94715bfc5d5e9a2e","type":"change","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"","rules":[{"t":"set","p":"commit","pt":"msg","to":"payload","tot":"msg","dc":true},{"t":"set","p":"payload","pt":"msg","to":"commit.sha","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":803,"y":524,"wires":[["bc2257f66d5d4313"]]},{"id":"bc2257f66d5d4313","type":"link call","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"[github] get tree for sha","links":["43d3a872c31bb664"],"linkType":"static","timeout":"30","x":797,"y":626,"wires":[["695f8e1d1b2a16c5"]]},{"id":"695f8e1d1b2a16c5","type":"function","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"obtain sha for directory ","func":"msg.tree = {\n    ...msg.payload\n};\n\nmsg.payload = msg.payload.filter( function(d){\n    return d.path == msg.directoryname\n})[0].sha;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":826,"y":717,"wires":[["1983b6e4662ee7b2"]]},{"id":"9902e675dfdce21e","type":"link call","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"[github] get blob for sha","links":["937f9c72251daebf"],"linkType":"static","timeout":"30","x":1140,"y":607,"wires":[["3630d6098438ada5"]]},{"id":"3630d6098438ada5","type":"function","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"create payload with content","func":"msg.payload = {\n    sha:     msg.commit.sha,\n    content: msg.payload.content,\n    commit:  msg.commit,\n    index:   msg.orig_shas.indexOf(msg.commit.sha)\n}\n\ndelete msg.tree;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1136,"y":527,"wires":[["7121357f3b59dc62"]]},{"id":"7121357f3b59dc62","type":"join","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1108,"y":433,"wires":[["23787c212fefba8f"]]},{"id":"1983b6e4662ee7b2","type":"link call","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"[github] get tree for sha","links":["43d3a872c31bb664"],"linkType":"static","timeout":"30","x":980,"y":826,"wires":[["3c88e504cade137e"]]},{"id":"3c88e504cade137e","type":"function","z":"d104825b996e7cef","g":"e06a88c851a30178","name":"obtain file sha for flows.json","func":"msg.payload = msg.payload.filter(function(e){\n    return e.path == \"flows.json\"\n})[0].sha;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1154,"y":719,"wires":[["9902e675dfdce21e"]]},{"id":"0380eab2578ec2a3","type":"link in","z":"d104825b996e7cef","name":"link in 1","links":[],"x":538,"y":230,"wires":[["5b30597ddf34f570"]]},{"id":"23787c212fefba8f","type":"link out","z":"d104825b996e7cef","name":"link out 102","mode":"return","links":[],"x":1457,"y":433,"wires":[]}]