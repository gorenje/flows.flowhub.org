[{"id":"16310ded01410ec0","type":"tab","label":"[nodedev] inspirational node packages","disabled":false,"info":"::: aim\n\nHave a collection of node packages that I use as inspiration for my own Node-RED node package development.\n\n:::\n\n### Collection\n\n- [xterm](https://www.npmjs.com/package/node-red-contrib-xterm)\n\n","env":[]},{"id":"51d03e7574c4e8d6","type":"group","z":"16310ded01410ec0","name":"Obtain codebase","style":{"label":true},"nodes":["2f0781016b105860","20cd8307fbbf8bc7","4124c2dd41a65644","e72fc8926003c55f","e56e1e9257efe943"],"x":396.142822265625,"y":298,"w":536.857177734375,"h":454.2857666015625},{"id":"414cba320f179caf","type":"group","z":"16310ded01410ec0","name":"tabs in sidebars - xterm package","style":{"label":true},"nodes":["12a91c3aefe8dd66","fd18c2aae2a4d3c7","50b6431494100435","8f3690c76ac3dceb","09d5b4a731ebcf48","f9156a016d45fd81","dc02ec3cff832651","d2ad303fbebcbdb8"],"x":1087,"y":375,"w":272,"h":463},{"id":"2f0781016b105860","type":"NodeFactory","z":"16310ded01410ec0","g":"51d03e7574c4e8d6","name":"","nodename":"WillBeIgnored","color":"#e5e4ef","hasbutton":false,"hasinput":true,"outputcount":1,"category":"","summary":"WillBeIgnored","description":"WillBeIgnored","icon":"font-awesome/fa-industry","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":false,"isplugin":false,"x":837,"y":711.2857666015625,"wires":[[]]},{"id":"20cd8307fbbf8bc7","type":"function","z":"16310ded01410ec0","g":"51d03e7574c4e8d6","name":"retrieve tgz URL for package","func":"pacote.manifest(\n    msg.packagename + \"@\" + msg.packageversion\n).then(manifest => {\n    msg.payload = manifest._resolved\n    node.send(msg)\n}).catch( err => {\n    msg.error = err\n    node.error(\"failed to get url\", msg)\n})\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"pacote","module":"pacote"}],"x":744.142822265625,"y":506,"wires":[["e56e1e9257efe943"]]},{"id":"4124c2dd41a65644","type":"inject","z":"16310ded01410ec0","g":"51d03e7574c4e8d6","name":"inject package details","props":[{"p":"packagename","v":"node-red-contrib-xterm","vt":"str"},{"p":"packageversion","v":"1.0.1","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":542.142822265625,"y":339,"wires":[["20cd8307fbbf8bc7"]]},{"id":"e72fc8926003c55f","type":"http request","z":"16310ded01410ec0","g":"51d03e7574c4e8d6","name":"","method":"GET","ret":"bin","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":789.142822265625,"y":634,"wires":[["2f0781016b105860"]]},{"id":"e56e1e9257efe943","type":"change","z":"16310ded01410ec0","g":"51d03e7574c4e8d6","name":"","rules":[{"t":"set","p":"url","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":767.142822265625,"y":573,"wires":[["e72fc8926003c55f"]]},{"id":"12a91c3aefe8dd66","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","output":"str","x":1231,"y":497,"wires":[["fd18c2aae2a4d3c7"]]},{"id":"fd18c2aae2a4d3c7","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"xterm_config.html","filename":"xterm_config.html","format":"html","syntax":"mustache","template":"<!--\n  Copyright 2019, Bart Butenaers\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<script src=\"xterm_shell/lib/xterm.js\"></script>\n<script src=\"xterm_shell/lib/xterm-addon-fit.js\"></script>\n\n<script type=\"text/javascript\">\n    // See https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\n    function createTerminalUUID(){\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (dt + Math.random()*16)%16 | 0;\n            dt = Math.floor(dt/16);\n            return (c=='x' ? r :(r&0x3|0x8)).toString(16);\n        });\n        return uuid;\n    }\n    \n    // Multiple flow editors can be open simultaneously, which means multiple terminals can be open simultaneously.\n    // All of these terminals need to work completely independent from each: we don't want the data from these terminals\n    // to become mixed!  We will generate a unique id, to identify this flow editor instance in all communication with the server.\n    // Declare this variable outside the 'function ($)', to make sure the xterm_in node can access it ...\n    const globalTerminalId = createTerminalUUID();\n    \n    (function ($) {\n        var globalTerminalConfigNode = null;\n        var globalTerminal = null;\n        var globalFitAddon = null;\n        var globalServerDataHandler = null;\n        var globalTimerId = null;\n        var globalTabsheets = null;\n        var globalPreviousDataType = null;\n        \n        // Ensure that the globalTerminalConfigNode (still) exists.\n        // Caution: this function cannot be called from onpaletteadd, because then the RED.nodes are not filled yet!!!\n        // !!!!!!!!!!!!!!! CALL THIS FUNCTION EVERYWHERE THE globalTerminalConfigNode IS BEING USED !!!!!!!!!!!!!!!\n        function ensureXtermConfigNode() {\n            // If we had find it previously, check if it has been deleted beneath us\n            if (globalTerminalConfigNode !== null) {\n                var configNode = RED.nodes.node(globalTerminalConfigNode.id);\n                if (configNode === null) { globalTerminalConfigNode = null; }\n            }\n                \n            // If not found previously, let's go find it\n            if (globalTerminalConfigNode === null) {\n                var configNodes = [];\n                RED.nodes.eachConfig(function(configNode) {\n                    if (configNode.type === 'xterm_config') { \n                        configNodes.push(configNode); \n                    }\n                });\n                \n                // Make sure we only have 1 config node\n                while (configNodes.length > 1) {\n                    var configNode = configNodes.pop();\n                    RED.nodes.remove(configNode.id);\n                    RED.nodes.dirty(true);\n                }\n                \n                // When we found a config node, let's use that one\n                if (configNodes.length === 1) { globalTerminalConfigNode = configNodes[0]; }\n            }\n            \n            // When it doesn't exist yet, create it if required\n            if (globalTerminalConfigNode === null) {\n                // TODO controleren of de defaults door de config node code zelf toegepast worden????\n                \n                // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n                // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n                // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n                // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n                globalTerminalConfigNode = {\n                    id: RED.nodes.id(),\n                    _def: RED.nodes.getType(\"xterm_config\"),\n                    type: \"xterm_config\",\n                    hasUsers: false, \n                    users: [],\n                    rows: 60,\n                    columns: 120,\n                    cursorStyle: \"bar\",\n                    fastScrollModifier: \"alt\",\n                    scrollSensitivity: 1,\n                    fastScrollSensitivity: 1,\n                    scrollback: 1000,\n                    backgroundColor: \"#000000\",\n                    foregroundColor: \"#ffffff\",\n                    fontSize: 14,\n                    cursorBlink: true,\n                    drawBoldTextInBrightColors: true,\n                    loggingEnabled: false,\n                    name: \"XTerminal\",\n                    label: function() { return this.name || \"XTerminal\"}\n                }\n                \n                // Add the new config node to the collection of Node-RED nodes\n                RED.nodes.add(globalTerminalConfigNode);\n                \n                // Make sure the \"Deploy\" button becomes active\n                RED.nodes.dirty(true);\n            }\n        }\n        \n        function sidebarResizeEventHandler() {\n            if (globalFitAddon) {\n                // Make sure the Xterm terminal window fits into the parent DIV container element\n                globalFitAddon.fit();\n            }\n\t\t}\n        RED.nodes.registerType('xterm_config', {\n            category: 'config',\n            hasUsers: false,\n            defaults: {\n                rows: {value: 60, required: true},\n                columns: {value: 120, required: true},\n                startupCommand: {value: \"cd $HOME/.node-red\"},\n                cursorStyle: {value: \"bar\"},\n                fastScrollModifier: {value: \"alt\"},\n                scrollSensitivity: {value: 1},\n                fastScrollSensitivity: {value: 1},\n                scrollback: {value: 1000},\n                backgroundColor: {value: \"#000000\"},\n                foregroundColor: {value: \"#ffffff\"},\n                fontSize: {value: 14},\n                cursorBlink: {value: true},\n                drawBoldTextInBrightColors: {value: true},\n                loggingEnabled: {value: false},\n                name: { value: \"XTerminal\" }\n            },\n            paletteLabel: 'XTerminal',\n            label: function () {\n                return this.name;\n            },\n            onpaletteremove: function () {\n                RED.sidebar.removeTab(\"sidebar-xterm\");\n\t\t\t\tRED.events.off(\"sidebar:resize\", sidebarResizeEventHandler);\n            },\n            onpaletteadd: function () {\n                // Add the xterm.js CSS stylesheet to the page head section\n                $('head').append('<link rel=\"stylesheet\" href=\"xterm_shell/lib/xterm.css\" type=\"text/css\" />');\n                \n                // The html content of the sidebar page has been specified a a data-template, from where it can be loaded:\n                var content = $($('script[type=\"text/x-red\"][data-template-name=\"xterm_config_sidebar\"]').i18n().html());\n                \n                // Add a new \"Terminal\" tabsheet to the sidebar in the flow editor\n                RED.sidebar.addTab({\n                    id: \"sidebar-xterm\",\n                    label: \"terminal_xterm\",\n                    name: \"Terminal\",\n                    content: content,\n                    closeable: true,\n                    disableOnEdit: true,\n                    iconClass: \"fa fa-terminal\"\n                });\n                \n                RED.events.on(\"sidebar:resize\", sidebarResizeEventHandler);\n                \n                // The html content of the config node-settings has been specified as a SECOND data-template.  We will show\n                // the same template both in the config node's config screen, and in the sidebar \"Properties\" tabsheet.\n                // This way we avoid the same html to be maintained twice.\n                $(\"#node-xterm-tab-settings\").append($('script[type=\"text/x-red\"][data-template-name=\"xterm_config\"]').i18n().html());\n                        \n                // Once the container DIV element has been created, the terminal can be displayed as a child element\n                \n                $(\"#node-start-terminal\").on(\"click\", function (e) {\n                    if (globalTerminalConfigNode === null) {\n                        ensureXtermConfigNode();\n                    }\n                    \n                    // The terminal look-and-feel will be based on the user settings (in the globalTerminalConfigNode).\n                    // We use the rows and columns from the result, because that are the rows and columns that have been used to start\n                    // the pseudo terminal process on the server.  That way the Xterm.js terminal window dimensions will always mach.\n                    // Remark: the rows and columns in the globalTerminalConfigNode will be used (on the server side to start the pseudo\n                    // terminal process), when that config node has already been deployed.  Which means we get then the \n                    // globalTerminalConfigNode also here via a long roundtrip to the server ...\n                    // Create the Xterm.js terminal screen only once.\n                    // We can only do this when the parent DIV container is visible, otherwise the terminal will remain black without text!!!!\n                    // So there seems to be a bug inside the 'open' function.  Similar issues:\n                    // https://github.com/xtermjs/xterm.js/issues/1734\n                    // https://github.com/xtermjs/xterm.js/issues/573\n                    if (globalTerminal === null) {\n                        var terminalOptions = {\n                            rows: globalTerminalConfigNode.rows,\n                            cols: globalTerminalConfigNode.columns,\n                            cursorStyle: globalTerminalConfigNode.cursorStyle,\n                            fastScrollModifier: globalTerminalConfigNode.fastScrollModifier,\n                            scrollback: globalTerminalConfigNode.scrollback,\n                            scrollSensitivity: globalTerminalConfigNode.scrollSensitivity,\n                            fastScrollSensitivity: globalTerminalConfigNode.fastScrollSensitivity,\n                            fontSize: globalTerminalConfigNode.fontSize,\n                            cursorBlink: globalTerminalConfigNode.cursorBlink,\n                            drawBoldTextInBrightColors: globalTerminalConfigNode.drawBoldTextInBrightColors,\n                            theme: {\n                                background: globalTerminalConfigNode.backgroundColor,\n                                foreground: globalTerminalConfigNode.foregroundColor\n                            },\n                            useStyle: true,\n                            screenKeys: true,\n                            fontFamily: 'Courier New'\n                        };\n                        \n                        // Hide all the introduction paragraphs\n                        [].forEach.call(document.querySelectorAll('.xterm_intro'), function (el) {\n                            el.style.display = \"none\";\n                        });\n                                        \n                        // Create a new Xterm.js Terminal window instance\n                        // Remark: the Terminal class is exported in the xterm.js file\n                        globalTerminal = new Terminal(terminalOptions);\n                      \n                        // Create a new Xterm.js FitAddon instance, which can be used to let the terminal window fit into the parent DIV container element.\n                        // Remark: the FitAddon class is exported differently (compared to the Terminal class) in the xterm-addon-fit.js file\n                        globalFitAddon = new FitAddon.FitAddon();\n                        globalTerminal.loadAddon(globalFitAddon);\n      \n                        // Show the Xterm.js terminal window as a child of the parent DIV container element.\n                        var terminalContainer = document.getElementById('terminalContainer');\n                        globalTerminal.open(terminalContainer);\n                        \n                        // Make sure the Xterm terminal window fits into the parent DIV container element.\n                        // Afterwards the sidebarResizeEventHandler will redo this, every time the sidebar size is changed...\n                        globalFitAddon.fit();\n                        // Handle all terminal input from the user, and send it to the server\n                        globalTerminal.onData(function(data) {\n                            if (globalTerminalConfigNode.loggingEnabled) {\n                                var dataType = Object.prototype.toString.call(data);\n                                console.log(\"Terminal data to server (type = input): \" + data);\n                            }\n\n                            // Convert the data to base64 to make sure that spaces, newlines, ... don't get lost during transport.\n                            // Use POST instead of a GET with query parameters, because some browsers will cache all the different GET requests...\n                            var base64Data = btoa(data);\n                            $.ajax({\n                                url: \"xterm_shell/command\",\n                                method: \"POST\",\n                                data: {\n                                    terminal_id: globalTerminalId,\n                                    command: \"write\",\n                                    info: base64Data \n                                },\n                                error: function(data){\n                                    // When a message (and stack) field are passed by the server, this means the server has logged a stacktrace\n                                    var text = \"Write failed: \";\n                                    if (data.responseJSON && data.responseJSON.error) {\n                                        text = text + data.responseJSON.error;\n                                    }\n                                    else {\n                                        text = text + data.responseText;\n                                    }\n                                    if (data.responseJSON && data.responseJSON.message) {\n                                        text = text + \": \" + data.responseJSON.message + \" (see Node-RED log for details)\";\n                                    }\n                                   \n                                    globalServerDataHandler(null, JSON.stringify({\n                                        terminalId: globalTerminalId,                  \n                                        type      : \"error\",\n                                        content   : text\n                                    }));\n                                }\n                                //timeout: 3000\n                            });\n                        });\n                 \n                        // Handle data that arrives from the server via the websocket channel\n                        globalServerDataHandler = function(event, dataAsString) {\n                            var data = JSON.parse(dataAsString);\n                            \n                            // Only show data that is intended for this terminal\n                            if (data.terminalId === globalTerminalId) {                   \n                                var decodedString = \"\";\n                            \n                                // Convert the base64 encoded string back to a string\n                                // Only content type \"data\" is base64 encode, the other types (error, info, ...) not!\n                                if (data.type === \"data\") {\n                                    decodedString = atob(data.content);\n                                }\n                                else {\n                                    decodedString = data.content;\n                                }\n                               \n                                if (globalTerminalConfigNode.loggingEnabled) {\n                                    console.log(\"Terminal data from server (type = \" + data.type + \") = \" + decodedString);\n                                }\n                                \n                                if (data.type !== \"data\") {\n                                    // Xterm comments starts with a \"!\" character\n                                    decodedString = \"! \" + decodedString;\n                                    \n                                    // Make sure the comment (error, info, ...) is not displayed after the prompt, but on the next line\n                                    if (globalPreviousDataType === \"data\") {\n                                        decodedString = \"\\r\\n\" + decodedString;\n                                    }                                \n                                    // End all error/info/... with an enter, to make sure the next input continues on the next line\n                                    decodedString = decodedString + \"\\r\\n\";\n                                }\n                                \n                                // Show the data in the terminal window\n                                globalTerminal.write(decodedString);\n                                \n                                globalPreviousDataType = data.type;\n                            }\n                        }\n                    \n                        RED.comms.subscribe('xterm_shell', globalServerDataHandler);\n                    }\n                \n                    // Created with http://www.asciiarts.net/ where I used font 'Standard.flf'\n                    // TODO for some reason it doesn't show clearly : see font in constructor and in DIV element style\n                    //globalTerminal.write('\\r\\n***  _   _           _            ____  _____ ____   ***');\n                    //globalTerminal.write('\\r\\n*** | \\ | | ___   __| | ___      |  _ \\| ____|  _ \\  ***');\n                    //globalTerminal.write('\\r\\n*** |  \\| |/ _ \\ / _` |/ _ \\_____| |_) |  _| | | | | ***');\n                    //globalTerminal.write('\\r\\n*** | |\\  | (_) | (_| |  __/_____|  _ <| |___| |_| | ***');\n                    //globalTerminal.write('\\r\\n*** |_| \\_|\\___/ \\__,_|\\___|     |_| \\_\\_____|____/  ***');\n                    //globalTerminal.write('\\r\\n'); \n                    \n                    // Pass the default rows and columns as 'info' parameter.  These will be used on the server side, when currently\n                    // no config node has been deployed on the server yet...\n                    var info = globalTerminalConfigNode.rows + \";\" + globalTerminalConfigNode.columns;\n                    \n                    // Start the pty pseudo terminal process on the server side\n                    // Use POST instead of a GET with query parameters, because some browsers will cache all the different GET requests...\n                    $.ajax({\n                        url: \"xterm_shell/command\",\n                        method: \"POST\",\n                        data: {\n                            terminal_id: globalTerminalId,\n                            command: \"start\",\n                            info: info \n                        },\n                        error: function(data){\n                            // When a message (and stack) field are passed by the server, this means the server has logged a stacktrace\n                            var text = \"Start failed: \";\n                            if (data.responseJSON && data.responseJSON.error) {\n                                text = text + data.responseJSON.error;\n                            }\n                            else {\n                                text = text + data.responseText;\n                            }\n                            if (data.responseJSON && data.responseJSON.message) {\n                                text = text + \": \" + data.responseJSON.message + \" (see Node-RED log for details)\";\n                            }\n                           \n                            globalServerDataHandler(null, JSON.stringify({\n                                terminalId: globalTerminalId,                  \n                                type      : \"error\",\n                                content   : text\n                            }));\n                        }\n                        //timeout: 3000\n                    });     \n                    // As soon as the terminal window is started, it should have focus (so commands can be entered right away)\n                    globalTerminal.focus();                    \n                });\n                \n                $(\"#node-stop-terminal\").on(\"click\", function (e) {\n                    // Leave the xterm terminal window open (on the client-side), to show feedback to the user.\n                    // But stop the pty process on the server side\n                    // Use POST instead of a GET with query parameters, because some browsers will cache all the different GET requests...\n                    $.ajax({\n                        url: \"xterm_shell/command\",\n                        method: \"POST\",\n                        data: {\n                            terminal_id: globalTerminalId,\n                            command: \"stop\"\n                        },\n                        error: function(data){\n                            // When a message (and stack) field are passed by the server, this means the server has logged a stacktrace\n                            var text = \"Stop failed: \";\n                            if (data.responseJSON && data.responseJSON.error) {\n                                text = text + data.responseJSON.error;\n                            }\n                            else {\n                                text = text + data.responseText;\n                            }\n                            if (data.responseJSON && data.responseJSON.message) {\n                                text = text + \": \" + data.responseJSON.message + \" (see Node-RED log for details)\";\n                            }\n                           \n                            globalServerDataHandler(null, JSON.stringify({\n                                terminalId: globalTerminalId,                  \n                                type      : \"error\",\n                                content   : text\n                            }));\n                        }\n                        //timeout: 3000\n                    });              \n                });\n                \n                $(\"#node-clear-terminal\").on(\"click\", function (e) {\n                    globalTerminal.clear();      \n                });                \n                \n                if (globalTabsheets === null) {\n                    // Show tabsheets\n                    globalTabsheets = RED.tabs.create({\n                        id: \"node-xterm-tabs\",\n                        onchange: function(tab) {\n                            // Show only the content (i.e. the children) of the selected tabsheet, and hide the others\n                            $(\"#node-xterm-tabs-content\").children().hide();\n                            $(\"#\" + tab.id).show();\n                            \n                            if (tab.id === \"node-xterm-tab-settings\") {\n                                ensureXtermConfigNode();\n                                \n                                // When navigating to the settings tabsheet, all the config node properties need to be displayed\n                                // into the corresponding input fields\n                                $('.xterm-setting').each(function() {\n                                    var propertyName = $(this).get(0).id.replace(\"node-config-input-\", \"\");\n                                    var propertyValue = globalTerminalConfigNode[propertyName];\n                                    \n                                    if ($(this)[0].type === \"checkbox\") {\n                                        $(this).attr(\"checked\", propertyValue);\n                                    }\n                                    else {\n                                        $(this).val(propertyValue);\n                                    }\n                                });\n                            }\n                            \n                            if (tab.id === \"node-xterm-tab-terminal\") {\n                                if (globalTerminal) {\n                                    // As soon as the terminal tabsheet becomes visible again, the terminal window should get focus\n                                    // (so commands can be entered right away)\n                                    globalTerminal.focus();\n                                }\n                            }                                \n                        }\n                    });\n                    \n                    globalTabsheets.addTab({\n                        id: \"node-xterm-tab-terminal\",\n                        label: \"Terminal\"\n                    });\n                    \n                    globalTabsheets.addTab({\n                        id: \"node-xterm-tab-settings\",\n                        label: \"Settings\"\n                    });\n                    \n                    // For every setting input field, we will have to store the changed values into the config node\n                    $(\".xterm-setting\").on(\"change\", function() {\n                        ensureXtermConfigNode();\n                    \n                        var propertyName = this.id.replace(\"node-config-input-\", \"\");\n                        var propertyValue = $(this).val();\n                        \n                        if (this.type === \"checkbox\") {\n                            // For checkboxes we don't want to use the on/off values, but instead true/false\n                            propertyValue = this.checked;\n                        }\n            \n                        // When the property value has changed, save it in the config node and activate the 'deploy' button.\n                        // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n                        if (!globalTerminalConfigNode || globalTerminalConfigNode[propertyName] != propertyValue) {\n                            ensureXtermConfigNode();\n                            globalTerminalConfigNode[propertyName] = propertyValue;\n                            RED.nodes.dirty(true);\n                        }\n                    })            \n                }\n                        \n                if (globalTimerId) {\n                    clearInterval(globalTimerId);\n                    globalTimerId = null;\n                }\n                \n                // When the flow editor is closed, the corresponding pseudo terminal process (on server side) should be killed.\n                // However it seems there is no way to determine that on the server side, see:\n                // https://discourse.nodered.org/t/detect-when-flow-editor-is-closed/18357/3?u=bartbutenaers\n                // Therefore we will send a heartbeat every 5 seconds to the server.\n                globalTimerId = setInterval(function() {\n                    // Use POST instead of a GET with query parameters, because some browsers will cache all the different GET requests...\n                    $.ajax({\n                        url: \"xterm_shell/command\",\n                        method: \"POST\",\n                        data: {\n                            terminal_id: globalTerminalId,\n                            command: \"heartbeat\"\n                        },\n                        error: function(data){\n                            // We cannot do anything here ...\n                        }\n                        //timeout: 3000                \n                    });\n                }, 5000);\n            }\n        });\n    })(jQuery);\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"xterm_config\">\n    <div class=\"form-row\">\n        <label for=\"node-config-input-name\"><i class=\"icon-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-config-input-name\" class=\"xterm-setting\" placeholder=\"Name\">\n    </div>\n    </br>\n    \n    <!-- The terminal window dimensions should really match the dimensions of the pseudo terminal! -->\n    <!-- See https://github.com/xtermjs/xterm.js/issues/832 -->\n    <div class=\"form-tips\"><b>Steps to apply the new settings to the terminal window:\n        <ol>\n            <li>Deploy your changes</li>\n            <li>Refresh the browser window</li>\n            <li>Restart the pseudo terminal (via 'start' button)</li>\n        </ol></b>\n    </div>\n    </br>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-rows\"><i class=\"fa fa-arrows-alt\"></i> Grid</label>\n        <span for=\"node-config-input-rows\">Rows</span>\n        <input type=\"text\" id=\"node-config-input-rows\" style=\"width:80px\" min=\"1\" class=\"xterm-setting\">\n        <span for=\"node-config-input-columns\" style=\"margin-left:20px;\"> Columns</span>\n        <input type=\"text\" id=\"node-config-input-columns\" style=\"width:80px\" min=\"1\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-cursorStyle\"><i class=\"fa fa-terminal\"></i> Cursor style</label>\n        <select id=\"node-config-input-cursorStyle\" class=\"xterm-setting\">\n            <option value=\"block\">Block</option> \n            <option value=\"underline\">Underline</option>\n            <option value=\"bar\">Bar</option>\n        </select>\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-fastScrollModifier\"><i class=\"fa fa-keyboard-o\"></i> Fast scroll key</label>\n        <select id=\"node-config-input-fastScrollModifier\" class=\"xterm-setting\">\n            <option value=\"alt\">Alt</option> \n            <option value=\"ctrl\">Ctrl</option>\n            <option value=\"shift\">Shift</option>\n            <option value=\"undefined\">Undefined</option>\n        </select>\n    </div>            \n    <div class=\"form-row\">\n        <label for=\"node-config-input-scrollback\"><i class=\"fa fa-arrows-v\"></i> Scrollback</label>\n        <input type=\"text\" id=\"node-config-input-scrollback\" min=\"0\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-backgroundColor\"><i class=\"fa fa-paint-brush\"></i> Background</span></label>\n        <input type=\"color\" id=\"node-config-input-backgroundColor\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-foregroundColor\"><i class=\"fa fa-paint-brush\"></i> Foreground</span></label>\n        <input type=\"color\" id=\"node-config-input-foregroundColor\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-scrollSensitivity\"><i class=\"fa fa-tachometer\"></i> Scroll</label>\n        <input type=\"text\" id=\"node-config-input-scrollSensitivity\" min=\"1\" max=\"10\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <!-- See https://github.com/xtermjs/xterm.js/pull/2375 -->\n        <label for=\"node-config-input-fastScrollSensitivity\"><i class=\"fa fa-tachometer\"></i> Fast scroll</label>\n        <input type=\"text\" id=\"node-config-input-fastScrollSensitivity\" min=\"1\" max=\"10\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-config-input-fontSize\"><i class=\"fa fa-tachometer\"></i> Font size</label>\n        <input type=\"text\" id=\"node-config-input-fontSize\" min=\"1\" max=\"20\" class=\"xterm-setting\">\n    </div>\n    <div class=\"form-row\">\n        <input type=\"checkbox\" id=\"node-config-input-cursorBlink\" class=\"xterm-setting\" style=\"display: inline-block; width: auto; vertical-align: top;\">\n        <label for=\"node-config-input-cursorBlink\" style=\"width:70%;\"> Blinking cursor</label>\n    </div>          \n    <div class=\"form-row\">\n        <input type=\"checkbox\" id=\"node-config-input-drawBoldTextInBrightColors\" class=\"xterm-setting\" style=\"display: inline-block; width: auto; vertical-align: top;\">\n        <label for=\"node-config-input-drawBoldTextInBrightColors\" style=\"width:70%;\"> Draw bold text in bright colors</label>\n    </div>   \n    <div class=\"form-row\">\n        <input type=\"checkbox\" id=\"node-config-input-loggingEnabled\" class=\"xterm-setting\" style=\"display: inline-block; width: auto; vertical-align: top;\">\n        <label for=\"node-config-input-loggingEnabled\" style=\"width:70%;\"> Enable detailed logging (for troubleshooting)</label>\n    </div>               \n</script>\n\n<script type=\"text/x-red\" data-template-name=\"xterm_config_sidebar\">\n    <div style=\"position: relative; height: 100%;\">\n        <div style=\"position: absolute; top: 1px; bottom: 2px; left: 1px; right: 1px; overflow-y: scroll; padding: 10px;\"> \n            <form class=\"dialog-form\">\n                <div class=\"red-ui-tabs\">\n                    <!-- Tabsheets -->\n                    <ul style=\"background: #fff; min-width: 600px; margin-bottom: 20px;\" id=\"node-xterm-tabs\"></ul>\n                </div>\n                <div id=\"node-xterm-tabs-content\" style=\"height:calc(100% - 100px)\">\n                    <!-- Content of all tabsheets -->\n                    <div id=\"node-xterm-tab-terminal\" class=\"node-xterm-tab-terminal\" style=\"height: 100%; position: relative; margin-top: 30px;\">           \n                        <div class=\"form-row\">\n                            <!-- Make sure to use type 'button' because the default type is 'submit', which causes a page refresh! -->\n                            <button type=\"button\" id=\"node-start-terminal\" class=\"editor-button editor-button-small\" style=\"margin-top: 4px;\" title=\"Start terminal\">\n                                <i class=\"fa fa-play\"></i>    \n                            </button>\n                            <button type=\"button\" id=\"node-stop-terminal\" class=\"editor-button editor-button-small\" style=\"margin-top: 4px;\" title=\"Stop terminal\">\n                                <i class=\"fa fa-stop\"></i>    \n                            </button>\n                            <button type=\"button\" id=\"node-clear-terminal\" class=\"editor-button editor-button-small\" style=\"margin-top: 4px;\" title=\"Clear terminal\">\n                                <i class=\"fa fa-trash\"></i>    \n                            </button>\n                        </div>\n                        <div class=\"form-row\" style=\"height: 100%;\">\n                            <div id=\"terminalContainer\" style=\"width: 100%; height: 100%;\">\n                                <!-- We cannot create the xterm terminal window, when the parent DIV element is it not visible yet. -->\n                                <!-- Therefore we will wait for a user gesture, to make sure the DIV is visible... -->\n                                <p class=\"xterm_intro\" style=\"margin-top: 10px;\"><strong>Click the \"Start\" button to show the terminal...</strong></p>\n                                <p class=\"xterm_intro\" style=\"color:red; margin-top: 20px\"><strong><i style=\"font-size:20px\" class=\"fa fa-exclamation-triangle\"></i> Make sure your Node-RED environment is secure!</strong></p>\n                                <p class=\"xterm_intro\"><i>Read the \"Security\" section on my <a target=\"_blank\" href=\"https://github.com/bartbutenaers/node-red-contrib-xterm#security\">readme</a> page for more information.</i></p>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"node-xterm-tab-settings\" class=\"node-xterm-tab-settings\" style=\"position: relative; margin-top: 30px;\">\n                        <!-- The config node settings (from data-template-name=\"xterm_config\") will be added here -->\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"xterm_config\">\n    <p>Configuration for an Xterm terminal screen.</p>\n    <p><strong>Start command:</strong><br/>\n    Command that need to be executed automatically when the terminal is started.</p>\n    <p><strong>Grid:</strong><br/>\n    The number of rows and columns that need to be displayed inside the terminal.  Both characteristcs are specified in number of characters.</p>\n    <p><strong>Cursor style:</strong><br/>\n    Specifies how the cursor should be displayed.</p>    \n    <p><strong>Fast scroll key:</strong><br/>\n    The modifier key hold to multiply scroll speed.</p>                 \n    <p><strong>Scrollback:</strong><br/>\n    The number of rows that are retained when lines are scrolled beyond the initial viewport.</p>               \n    <p><strong>Background:</strong><br/>\n    The background color of the terminal window.</p>             \n    <p><strong>Foreground:</strong><br/>\n    The foreground color of the text on the terminal window.</p>              \n    <p><strong>Scroll:</strong><br/>\n    The scroll speed multiplier used for scrolling..</p>                         \n    <p><strong>Fast scroll:</strong><br/>\n    The scroll speed multiplier used for fast scrolling..</p>                   \n    <p><strong>Blinking cursor :</strong><br/>\n    Whether the cursor should be blinking or not.</p>     \n    <p><strong>Draw bold text in bright colors:</strong><br/>\n    Whether to draw bold text in bright colors.</p>  \n    <p><strong>Enable data logging:</strong><br/>\n    Enable logging of all the data being send (both on client and server side), to simplify troubleshooting in case of problems.</p>     \n</script>\n","output":"str","x":1231,"y":547,"wires":[["50b6431494100435"]]},{"id":"50b6431494100435","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"xterm_in.html","filename":"xterm_in.html","format":"html","syntax":"mustache","template":"<!--\r\n  Copyright 2019, Bart Butenaers\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<script type=\"text/javascript\">  \r\n    RED.nodes.registerType('xterm_in',{\r\n        category: 'system',\r\n        color: 'rgb(153, 153, 153)',\r\n        defaults: {\r\n            command: {value: \"\"},\r\n            addEnter: {value: true},\r\n            confirmation: {value: false},\r\n            rows: {value: 1},\r\n            name: {value: \"\"}\r\n        },\r\n        inputs: 0,\r\n        outputs: 0,\r\n        icon: \"font-awesome/fa-terminal\",\r\n        align: 'left',\r\n        paletteLabel: \"Terminal input\",\r\n        label: function() {\r\n            var name = this.name;\r\n            \r\n            if (this.confirmation) {\r\n                name = \"!! \" + name + \" !!\";\r\n            }\r\n            \r\n            return name || \"Terminal input\";\r\n        },\r\n        button: {\r\n            /*enabled: function() {\r\n                return !this.changed\r\n            },*/\r\n            onclick: function() {\r\n                //var roundTripFinished = false;\r\n                \r\n                if (this.changed) {\r\n                    return RED.notify(RED._(\"notification.warning\", {message:RED._(\"notification.warnings.undeployedChanges\")}),\"warning\");\r\n                }\r\n                \r\n                var node = this;\r\n                \r\n                if (node.confirmation) {\r\n                    var answer = confirm(\"Execute these commands in the terminal?\");\r\n                    if (answer === false) {\r\n                        // Don't execute the command\r\n                        return;\r\n                    }\r\n                }\r\n                \r\n                // UNFORTUNATELY WE CANNOT SEND THE RESULT (FROM THE PSEUDO-TERMINAL) AS AN OUTPUT MESSAGE.\r\n                // INDEED SINCE THIS NODE RUNS ON THE SERVER SIDE, IT WILL OUTPUT THE RESULTS OF THE TERMINAL WINDOWS IN ALL\r\n                // FLOW EDITORS (THAT ARE OPEN AT THE MOMENT).  WE COULD FILTER HERE ON THE TERMINALID OF THE CURRENT FLOW\r\n                // EDITOR, BUT EVEN THEN ALL FLOW EDITOR INSTANCES WOULD DO THE SAME.  SO ON THE SERVER SIDE THE OUTPUT\r\n                // OF ALL CLIENTS WOULD APPEAR. SO THAT MAKES NO SENSE !!!!!!!!!!!!!!!!!!!\r\n                /*\r\n                // Handle data that arrives from the server via the websocket channel           \r\n                RED.comms.subscribe('xterm_shell', function(event, dataAsString) {\r\n                    var data = JSON.parse(dataAsString);\r\n                    \r\n                    // Only show 'data' that is intended for this terminal\r\n                    if (data.terminalId === globalTerminalId && data.type === \"data\") {\r\n                        // Convert the base64 encoded data string back to a string\r\n                        var decodedString = atob(data.content);\r\n                        \r\n                        if (roundTripFinished) {\r\n                            node.send({ payload: decodedString, command: node.command });\r\n                        }\r\n                        else {\r\n                            // As soon as we receive our own command, the command has made an entire roundtrip to the server and back.\r\n                            // From that moment on, we need to start processing the data ...\r\n                            if (data.content === node.command) {\r\n                                roundTripFinished = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                */\r\n                \r\n                var command = node.command;\r\n\r\n                if (node.addEnter) {\r\n                    command += \"\\r\\n\";\r\n                }\r\n                \r\n                // Ask the http endpoint to inject the command into the terminal.  Since we only arrive here when the command hasn't been\r\n                // changed, we can inject the command itself here (since it has the same command value as the deployed node on the server).    \r\n                var base64Data = btoa(command);\r\n                \r\n                $.ajax({\r\n                    url: \"xterm_shell/command\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        // Use the globalTerminalId, which is a global variable set by the sidebar panel (see xterm_config.js).\r\n                        terminal_id: globalTerminalId,\r\n                        command: \"write\",\r\n                        info: base64Data \r\n                    },\r\n                    success: function(resp) {\r\n                        RED.notify(\"Command has been send to the pseudo terminal\", \"success\");\r\n                    },\r\n                    error: function(data){\r\n                        // When a message (and stack) field are passed by the server, this means the server has logged a stacktrace\r\n                        var text = \"Write failed: \";\r\n                        if (data.responseJSON && data.responseJSON.error) {\r\n                            text = text + data.responseJSON.error;\r\n                        }\r\n                        else {\r\n                            text = text + data.responseText;\r\n                        }\r\n                        if (data.responseJSON && data.responseJSON.message) {\r\n                            text = text + \": \" + data.responseJSON.message + \" (see Node-RED log for details)\";\r\n                        }\r\n                       \r\n                        RED.notify(text, \"error\");\r\n                    }\r\n                    //timeout: 3000\r\n                });\r\n            }\r\n        }\r\n    });\r\n</script>\r\n\r\n<script type=\"text/x-red\" data-template-name=\"xterm_in\">\r\n    <div class=\"form-row\">\r\n        <label for=\"node-input-name\"><i class=\"icon-tag\"></i> Name</label>\r\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\r\n    </div>\r\n    </br>\r\n    <div class=\"form-row\">\r\n        <label for=\"node-input-command\"><i class=\"fa fa-terminal\"></i> Command(s)</label>\r\n        <textarea id=\"node-input-command\" rows=\"15\" style=\"width: 100%;\" placeholder=\"Enter a terminal command\"></textarea>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <input type=\"checkbox\" id=\"node-input-addEnter\" style=\"display: inline-block; width: auto; vertical-align: top;\">\r\n        <label for=\"node-input-addEnter\" style=\"width:70%;\"> Add 'enter' automatically</label>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <input type=\"checkbox\" id=\"node-input-confirmation\" style=\"display: inline-block; width: auto; vertical-align: top;\">\r\n        <label for=\"node-input-confirmation\" style=\"width:70%;\"> Show confirmation popup</label>\r\n    </div> \r\n</script>\r\n<script type=\"text/html\" data-help-name=\"xterm_in\">\r\n    <p>A Node Red node to send command(s) to the terminal.</p>\r\n    <p>The specified command(s) will be injected into the terminal window (located in the 'Terminal' tabsheet on the sidebar) to be executed.</p>\r\n    <p style=\"color:red;\"><strong><i style=\"font-size:20px\" class=\"fa fa-exclamation-triangle\"></i> Make sure your Node-RED environment is secure!</strong></p>\r\n    <p><i>Read the \"Security\" section on my <a target=\"_blank\" href=\"https://github.com/bartbutenaers/node-red-contrib-xterm#security\">readme</a> page for more information.</i></p>\r\n    <p><strong>Command(s):</strong><br/>\r\n    Specify the command(s) that need to be executed in the terminal window .  Multiple commands (each on a separate line!) can be added to create a script.</p>\r\n    <p><strong>Add 'enter' automatically:</strong><br/>\r\n    Specify whether an 'enter' key (i.e. a newline character) will be added automatically after the last command.  \r\n    <ul>\r\n        <li>When selected, the specified command will be executed immediately (automatically).</li>\r\n        <li>When unselected, the specified command will not be executed automatically.  Which means it appears in the terminal window, but you have to press manually the enter key to execute it.</li>\r\n    </ul>\r\n    This checkbox has more added value in case of a single command, since multiple commands are separated by enter's anyway ...</p>\r\n    <p><strong>Show confirmation popup:</strong><br/>\r\n    Critical commands (e.g. reboot the system) can be protected by a confirmation dialog, to avoid those commands being executed in the wrong circumstances.  E.g. you might have pressed the inject button by accident...</p>\r\n</script>\r\n","output":"str","x":1231,"y":597,"wires":[["8f3690c76ac3dceb"]]},{"id":"8f3690c76ac3dceb","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"xterm_config.js","filename":"xterm_config.js","format":"javascript","syntax":"mustache","template":"/**\n * Copyright 2019 Bart Butenaers\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n module.exports = function (RED) {\n    var os = require('os');\n    var pty = require('node-pty-prebuilt-multiarch');\n    var process = require('process');\n    var path = require('path');\n    const fs = require('fs');\n    const {EOL} = require('os');\n    \n    // -------------------------------------------------------------------------------------------------\n    // Determining the path to the files in the dependent xterm module once.\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\n    // -------------------------------------------------------------------------------------------------\n    var xtermPath = require.resolve(\"xterm\");\n    \n    // For example suppose the require.resolved results in xtermPath = /home/pi/node-red-contrib-xterm/node_modules/xterm/lib/xterm.js\n    // Then we need to strip the part after the /xterm/ folder, which means xtermPath = /home/pi/node-red-contrib-xterm/node_modules/xterm/\n    // And then we need to find the /lib subfolder, which means xtermJsPath = /home/pi/node-red-contrib-xterm/node_modules/xterm/lib\n    xtermPath = xtermPath.substring(0, xtermPath.indexOf(path.sep + \"xterm\" + path.sep) + 6);\n    \n    var xtermJsPath = path.join(xtermPath, 'lib', 'xterm.js');\n    if (!fs.existsSync(xtermJsPath)) {\n        console.log(\"Javascript file \" + xtermJsPath + \" does not exist\");\n        xtermJsPath = null;\n    }\n    \n    var xtermCssPath = path.join(xtermPath, 'css', 'xterm.css');\n    if (!fs.existsSync(xtermCssPath)) {\n        console.log(\"Css file \" + xtermCssPath + \" does not exist\");\n        xtermCssPath = null;\n    }\n    \n    // -------------------------------------------------------------------------------------------------\n    // Determining the path to the files in the dependent xterm-addon-fi module once.\n    // -------------------------------------------------------------------------------------------------\n    var xtermFitPath = require.resolve(\"xterm-addon-fit\");\n    xtermFitPath = xtermFitPath.substring(0, xtermFitPath.indexOf(path.sep + \"xterm-addon-fit\" + path.sep) + 16);\n    \n    var xtermFitJsPath = path.join(xtermFitPath, 'lib', 'xterm-addon-fit.js');\n    if (!fs.existsSync(xtermFitJsPath)) {\n        console.log(\"Javascript file \" + xtermFitJsPath + \" does not exist\");\n        xtermFitJsPath = null;\n    }\n    \n    var xtermUseBinaryTransport = os.platform() !== \"win32\";\n    \n    // Keep the pty processes in a global map, instead of inside the Xterm configuration node.\n    // Indeed the user might remove that configuration node behind our back, so we would loose all current pseudo terminal processes.\n    var xtermProcessInfoMap = new Map();\n    \n    // Cache the reference to the xterm config node, so we don't need to search it every time\n    var xtermShellNode = null;\n    \n    // Start or restart the timer of a terminal id\n    function startTimer(terminalId, loggingEnabled) {\n        var processInfo = xtermProcessInfoMap.get(terminalId);\n        \n        // Heartbeats are only relevant for active processes: if a process doesn't exist yet or doesn't exist anymore, then\n        // we can ignore the heartbeat temparily ...\n        if (processInfo) {\n            // If a previous timer is still running, let's stop it ...\n            if (processInfo.timerId) {\n                clearInterval(processInfo.timerId);\n                processInfo.timerId = null;\n            }\n            \n            // We will get a heartbeat from the client every 5 seconds.  When we haven't received that heartbeat within 15 seconds, we assume \n            // that the client has disconnected.  In that case the pseudo terminal of that client will be stopped...\n            processInfo.timerId = setInterval(function() {\n                stopTerminal(terminalId, \"heartbeat\", loggingEnabled);\n            }, 15000);\n        }\n    }\n\n    function stopTerminal(terminalId, reason, loggingEnabled) {  \n        var processInfo = xtermProcessInfoMap.get(terminalId);\n        \n        if (processInfo) {        \n            try {\n                // The \"exit\" and \"SIGINT\" event handlers had been added to detect the ptyProcess being killed behind our back.\n                // But if we kill the process, we don't want those handlers to do anything.  Otherwise this happens when the (re)start button is clicked:\n                // 1. The current process is stopped\n                // 2. A new process is started\n                // 3. The exithandler is called (due to step 1), which would kill our new process (from step 2).\n                // This way we avoid that stap 3 happens, when we kill the process ourselves.\n                processInfo.ptyProcess.removeAllListeners(\"exit\");\n             \n                processInfo.ptyProcess.kill();\n                \n                if (processInfo.timerId) {\n                    clearInterval(processInfo.timerId);\n                }\n                \n                xtermProcessInfoMap.delete(terminalId);\n                \n                // Let the client know that the pseudo terminal has been stopped, in case the client isn't disconnected \n                // (but the heartbeat didn't arrive in time)\n                RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: \"Pseudoterminal has been stopped (by \" + reason + \")\", type: \"info\" } ));\n            }\n            catch (err) {\n                RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: \"Cannot stop pseudoterminal (by \" + reason + \"): \" + err, type: \"error\" } ));\n            }\n        }\n        else {\n            RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: \"Pseudoterminal had not been started yet\", type: \"info\" } ));\n        }\n    }\n    \n    function startTerminal(terminalId, rows, columns, loggingEnabled) {\n        // When the previous ptyProcess was still running, we will stop it.\n        if (xtermProcessInfoMap.has(terminalId)) {\n            console.log(\"Previous ptyProcess was already started\");\n            stopTerminal(terminalId, \"(re)start button\", loggingEnabled);\n        }\n        \n        try {\n            const env = Object.assign({}, process.env);\n            env['COLORTERM'] = 'truecolor';\n        \n            rows = parseInt(rows || 24);\n            cols = parseInt(columns || 80);\n            \n            // Create a child process of the current (Node-RED) process\n            var ptyProcess = pty.spawn(process.platform === 'win32' ? 'cmd.exe' : 'bash', [], {\n              name: 'xterm-256color',\n              cols: cols,\n              rows: rows,\n              cwd: env.PWD,\n              env: env,\n              encoding: xtermUseBinaryTransport ? null : 'utf8'\n            });\n            \n            ptyProcess.on('data', function(data) {\n                try {\n                    // Uncomment this code in case of severe problems on some systems ...\n                    // var dataType = Object.prototype.toString.call(data);\n                    // console.log(\"Terminal data to client (type = \" + dataType + \"): \" + data);\n                    \n                    // Convert the terminal data to base64, before sending it to the client\n                    var buff = new Buffer(data);\n                    var base64Data = buff.toString('base64');\n                    RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: base64Data, type: \"data\" } ));\n                } \n                catch (ex) {\n                    // The WebSocket is not open, ignore\n                }\n            });\n            \n            ptyProcess.on('exit', function(c) {\n                // We arrive here always the ptyProcess is exited.  But when the trigger is a CLI command (e.g. \"exit\" in Linux),\n                // we still need to remove the ptyProcess from our map ...\n                if (xtermProcessInfoMap.has(terminalId)) {\n                    stopTerminal(terminalId, \"exit command\", loggingEnabled);\n                }\n            });\n            \n            ptyProcess.on('SIGINT', c => {\n                // We arrive here always the ptyProcess is killed.  But when the trigger from somewhere outside,\n                // we still need to remove the ptyProcess from our map ...\n                if (xtermProcessInfoMap.has(terminalId)) {\n                    stopTerminal(terminalId, \"SIGINT\", loggingEnabled);\n                }\n            });\n\n            RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: \"Pseudoterminal has been started (pid=\" + ptyProcess.pid + \" rows=\" + rows + \" cols=\" + cols + \")\", type: \"info\" } ));\n            \n            xtermProcessInfoMap.set(terminalId, {ptyProcess: ptyProcess});\n            \n            // From here on the heartbeats need to be monitored\n            startTimer(terminalId);\n        }\n        catch (err) {\n            RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: \"Cannot start pseudoterminal: \" + err, type: \"error\" } ));\n        }\n    }\n       \n    function writeDataToTerminal(terminalId, data, loggingEnabled) {\n        var errorText;\n        \n        try {\n            var processInfo = xtermProcessInfoMap.get(terminalId);\n            \n            if (processInfo) {\n                processInfo.ptyProcess.write(data);\n                \n                if (loggingEnabled) {\n                    var dataType = Object.prototype.toString.call(data);\n                    console.log(\"Terminal data from client (type = \" + dataType + \"): \" + data);\n                }\n            }\n            else {\n                errorText = \"Cannot execute commands when the pseudoterminal is not started yet\";\n                RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: errorText, type: \"error\" } ));\n            }\n        }\n        catch (err) {\n            errorText = \"Cannot write date to pseudoterminal: \" + err;\n            RED.comms.publish(\"xterm_shell\", JSON.stringify( { terminalId: terminalId, content: errorText, type: \"error\" } ));\n        } \n\n        return errorText;\n    }\n        \n    function XtermConfigurationNode (config) {\n        RED.nodes.createNode(this, config)\n        // Remark: we only store here the server-relevant settings (not the xterm.js terminal settings)\n        this.rows = config.rows;\n        this.columns = config.columns;\n        \n        // Cache the reference to this node\n        xtermShellNode = this;\n\n        this.on(\"close\", function() {\n            // Remove the reference to this node\n            xtermShellNode = null;\n            \n            if (done) {\n                done();\n            }\n        });\n    }\n\n    RED.nodes.registerType('xterm_config', XtermConfigurationNode);\n    \n    // Make all static resources (i.e. library files) available to the flow editor.\n    // We use a separate endpoint, since no permissions are required to read those resources.\n    // Otherwise we get 'unauthorized' problems, when calling this endpoint from a 'script' tag.\n    // See details on https://discourse.nodered.org/t/unauthorized-when-accessing-custom-admin-endpoint/20201/4\n    RED.httpAdmin.get('/xterm_shell/lib/:filename', function(req, res) {\n        var filePath;\n                    \n        switch (req.params.filename) {\n            case \"xterm.js\":\n                filePath = xtermJsPath;\n                break;\n            case \"xterm-addon-fit.js\":\n                filePath = xtermFitJsPath;\n                break;   \n            case \"xterm.css\":\n                filePath = xtermCssPath;\n                break;                \n            default:\n                break;\n        }\n        \n        if (filePath) {\n            // Send the requested static file to the client\n            res.sendFile(filePath);\n        }\n        else {\n            // Don't log because xterm also tries to load some mapping files, which are required to\n            // do source mapping from Javascript to the original Typescript code.  But we don't need that.\n            //console.log(\"Unknown javascript file '\" + req.params.info + \"'\");\n            res.status(404).json({error: 'Unknown static file ' + filePath});                        \n        }\n    });\n    \n    // Determine the line endings\n    function determineLineEnding(text) {                \n        var index = text.indexOf('\\n');\n        \n        if (index < 0) {\n            return null;\n        }\n        \n        if (index > 0 && text[index - 1] === '\\r') {\n             return \"\\r\\n\";\n        }\n        \n        return \"\\n\";\n    }\n\n    // Process the POST requests from the flow editor\n    RED.httpAdmin.post('/xterm_shell/command', RED.auth.needsPermission('xterm_shell.write'), function(req, res) {\n        // When a config node is available on the server side, we see whether logging should be enabled\n        var loggingEnabled = xtermShellNode && xtermShellNode.loggingEnabled;\n\n        // Get the POST parameters\n        var command     = req.body.command;\n        var terminal_id = req.body.terminal_id;\n        var info        = req.body.info;\n        \n        try {\n            switch (command) {\n                case \"start\":\n                    // The request (info) will contain the default dimensions '<default_rows>;<default_columns>'.\n                    // This way the default dimensions only need to be hardcoded on the client side...\n                    var params = info.split(\";\");\n                    var rows = params[0];\n                    var columns = params[1];\n                    \n                    // When a config node is available on the server side, we will use it's dimensions to create a pseudo terminal.\n                    if (xtermShellNode) {\n                        rows = xtermShellNode.rows;\n                        columns = xtermShellNode.columns;\n                    }\n\n                    startTerminal(terminal_id, rows, columns, loggingEnabled);\n\n                    // Pass the rows and columns to the client, which have been used on the server to start the pseudo terminal.\n                    // The client needs to use the SAME values to create an Xterm.js terminal window, to avoid conflicts!\n                    res.status(200).json({rows: rows, columns: columns});\n                    break;\n                case \"stop\":\n                    stopTerminal(terminal_id, \"stop button\", loggingEnabled);\n                    res.status(200).json({});\n                    break;\n                case \"write\":\n                    var base64Decoded = new Buffer(info, 'base64').toString('ascii');\n                    \n                    var lineEnding = determineLineEnding(base64Decoded);\n                    \n                    // On Windows the line-endings are a carriage return (\\r) and a newline(\\n), also referred to as CR/LF. \n                    // On UNIX the line-endings are a newline character (\\n), also referred to as a linefeed (LF).\n                    // If the EOL of the current operating system differs from \\r\\n (which we use by default), then adapt it.\n                    // Because the flow editor (where the code has been entered) might be running on a different OS...\n                    if (lineEnding != EOL) {\n                        base64Decoded = base64Decoded.replace(lineEnding, EOL);\n                    }\n                    \n                    // Process the command line data (info contains command line input)\n                    var errorText = writeDataToTerminal(terminal_id, base64Decoded, loggingEnabled);\n                    \n                    // The xterm_in node (doesn't listen to the websocket so it) has to be informed whether the command\n                    // has been transferred to the pseudo terminal correctly\n                    if (!errorText) {\n                        res.status(200).json({});\n                    }\n                    else {\n                        res.status(500).json({error: errorText});\n                    }\n                    break;\n                case \"heartbeat\":\n                    // Restart the timer whenever a heartbeat arrives\n                    startTimer(terminal_id);\n                    res.status(200).json({}); \n                    break;\n                default:\n                    console.log(\"Unknown command '\" + command + \"'\");\n                    res.status(404).json({error: 'Unknown command'});\n            }\n        }\n        catch(err) {\n            // Lots of server-side processing, so lots of things can go wrong.\n            // Avoid that the client doesn't know what is going on,i.e. avoid internal server errors (status 500)\n            res.status(500).json({error: err.name, message: err.message, stack: err.stack });\n            console.log(\"Error while executing command '\" + command + \"':\");\n            console.log(err.stack);\n        }\n    });\n}\n","output":"str","x":1231,"y":647,"wires":[["09d5b4a731ebcf48"]]},{"id":"09d5b4a731ebcf48","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"xterm_in.js","filename":"xterm_in.js","format":"javascript","syntax":"mustache","template":"/**\r\n * Copyright 2019 Bart Butenaers\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\nmodule.exports = function(RED) {\r\n    var settings = RED.settings;\r\n    \r\n    function XtermInNode(config) {\r\n        RED.nodes.createNode(this, config);\r\n        \r\n        var node = this;\r\n\r\n        node.on(\"close\", function() {\r\n            if (done) {\r\n                done();\r\n            }\r\n        });\r\n    }\r\n\r\n    RED.nodes.registerType(\"xterm_in\", XtermInNode);\r\n}\r\n","output":"str","x":1231,"y":697,"wires":[["f9156a016d45fd81"]]},{"id":"f9156a016d45fd81","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n    \"name\"         : \"node-red-contrib-xterm\",\n    \"version\"      : \"1.0.1\",\n    \"description\"  : \"A Node-RED node terminal front-end, to execute backend CLI commands\",\n    \"dependencies\": {\n       \"xterm\": \"^4.17.0\",\n       \"xterm-addon-fit\": \"^0.5.0\",\n       \"node-pty-prebuilt-multiarch\": \"^0.10.1-pre.4\"\n    },\n    \"author\": {\n        \"name\": \"Bart Butenaers\"\n    },\n    \"license\": \"Apache-2.0\",\n    \"keywords\": [ \"node-red\", \"terminal\", \"linux\", \"dos\", \"cli\", \"command line\", \"command\" ],\n    \"bugs\": {\n        \"url\": \"https://github.com/bartbutenaers/node-red-contrib-xterm/issues\"\n    },\n    \"homepage\": \"https://github.com/bartbutenaers/node-red-contrib-xterm\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/bartbutenaers/node-red-contrib-xterm.git\"\n    },\n    \"node-red\"     : {\n        \"nodes\": {\n            \"xterm_config\": \"xterm_config.js\",\n            \"xterm_in\": \"xterm_in.js\"\n        }\n    }\n}\n","output":"str","x":1231,"y":747,"wires":[["dc02ec3cff832651"]]},{"id":"dc02ec3cff832651","type":"PkgFile","z":"16310ded01410ec0","g":"414cba320f179caf","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# node-red-contrib-xterm\nA Node-RED node terminal front-end, to execute backend CLI commands.\n\n## Install\nRun the following npm command in your Node-RED user directory (typically ~/.node-red):\n```\nnpm install bartbutenaers/node-red-contrib-xterm\n```\n\n*Remark: when installing this node, NPM will show a warning in the console log:*\n\n![npm warning](https://user-images.githubusercontent.com/14224149/73590674-6c190500-44e5-11ea-85bb-e90875fd12e7.png)\n\n*Reason is that the xterm-addon-fit (which is an xterm plugin) has xterm as (peer) dependency in its [package.json](https://github.com/xtermjs/xterm.js/blob/master/addons/xterm-addon-fit/package.json) file, and since npm version 3.x such peer dependencies aren't installed automatically anymore.  But that is NO problem since xterm is installed automatically anyway, when you install this Node-RED node ...*\n\n## Support my Node-RED developments\nPlease buy my wife a coffee to keep her happy, while I am busy developing Node-RED stuff for you ...\n\n<a href=\"https://www.buymeacoffee.com/bartbutenaers\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy my wife a coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n\n## Security !!!!!!!!\n\n:warning: ***Since this node allows commands to be executed on the server, it is very important that your Node-RED is secured!***\n\nBut you should take care of that anyway, since other nodes (e.g. Exec and Daemon nodes) also allow execution of commands on the server ... \n\nTo avoid introducing extra security riscs, this node uses the standard Node-RED communication mechanism (see also the 'Detailed Information' section below):\n+ The ajax calls are send to a Node-RED http admin endpoint.\n+ The data is pushed via the Node-RED ```RED.comms``` websocket channel.\n\nAs a result: when you have secured your Node-RED environment, the communication for this terminal will have the same security level...\n\nAll processes launched from node-pty will launch at the same permission level of the parent process (i.e. the Node-RED process). Take care particularly when using node-pty inside a server that's accessible on the internet.  It is recommended to launch the pseudo-terminal inside a container (like e.g. a Docker container) to protect the host machine.\n\n## Node usage\nThis contribution offers a terminal window entirely integrated into Node-RED.\nIt consists out of two parts that closely work together:\n+ A ***sidebar tabsheet*** where the terminal window is displayed, which can be used to enter commands that need to be executed on the server (that runs Node-RED).\n+ A ***Terminal input*** node which can be used to store your favorite commands, and send them to the terminal.\n\nEach flow editor instance will have its own terminal session on the server side, which means that each editor will have its own independent terminal screen.  As a result, multiple users can execute commands (in their own flow editor instance), independently from each other.\n\nCurrently macOS, Linux and Windows are supported on the server side.\n\nRemark: this node can be used to connect to the server, where the Node-RED backend is running.  But it is also possible to logon to other servers, for example on Linux using the ```ssh``` command.  Thanks to [Paul](https://github.com/juggledad) for explaining this step by step in this [discussion](https://discourse.nodered.org/t/announce-node-red-contrib-xterm-second-beta-sidebar/19718/45).\n\n## Sidebar tabsheet\n\nA custom sidebar tabsheet is available, that can be setup in a few steps:\n1. Navigate to the *'Terminal'* tabsheet in the sidebar.\n1. Press the *'Start'* button to start a pseudo terminal (on the server side), and simultaneously display an Xterm terminal window (in the sidebar).\n1. Start entering your CLI commands into the terminal window.  Depending on the server's operating system, other commands will be required.\n1. Press the *'Clear'* button to clear the content of the terminal window.\n1. In case of problems with the pseudo terminal (on the server), you can press the *'Start'* button again.  Then the pseudo terminal (on the server) will be stopped and a new pseudo terminal will be started automatically.\n1. If the pseudo terminal is not needed anymore, you could press the *'Stop'* button.  This might be useful in a multi-user environment, since the number of allowed pseudo terminals can be restricted on some systems.  \n   Remark: it is also possible to use CLI commands to quit the terminal session (e.g. \"exit\" command on Linux).\n1. Optionally the terminal window settings can be customized in the *\"Settings\"* tabheet, but follow the instructions on that tabsheet to activate those changes.  Indeed the number of rows and columns of the terminal window (client side) and the pseudo terminal (server side) should always be identical!  Otherwise texts will start *overlapping* (i.e. overriding) in the terminal window!\n\nAll node-related information (pseudo terminal started, pseudo terminal stopped, ...) and server side errors are being displayed INSIDE the terminal window.\n\nA short demo of the sidebar tabsheet:\n\n![xterm_demo_sidebar](https://user-images.githubusercontent.com/14224149/71563581-36ba6b00-2a92-11ea-8f3f-1e37e714066b.gif)\n\nThe following settings can be adjusted, to customize the terminal window:\n\n### Grid\nThe number of rows and columns that need to be displayed inside the terminal.  Both characteristcs are specified in number of characters.\n\n![grid](https://user-images.githubusercontent.com/14224149/69186006-0f2dc580-0b18-11ea-85ed-182e30f18e60.png)\n\n### Cursor style\nSpecifies how the cursor should be displayed in the terminal window.  \n\n### Fast scroll key\nThe modifier key hold to multiply scroll speed.\n\n### Scrollback\nThe number of rows that are retained when lines are scrolled beyond the initial viewport. \n\n### Background\nThe background color of the terminal window.\n\n### Foreground\nThe foreground color of the text on the terminal window.\n\n### Scroll\nThe scroll speed multiplier used for scrolling.\n\n### Fast scroll\nThe scroll speed multiplier used for fast scrolling.\n\n### Blinking cursor\nWhether the cursor should be blinking or not.  \n\n### Draw bold text in bright colors\nWhether to draw bold text in bright colors. \n\n### Enable data logging\nEnable logging of all the data being send (both on client and server side), to simplify troubleshooting in case of problems. \n\n## Terminal Input node\nThe *\"Terminal Input\"* node can be used to store frequently used commands, and inject those commands into the terminal.\n\nA short demo to explain how it works:\n\n![xterm_demo_input](https://user-images.githubusercontent.com/14224149/71563905-d0d0e200-2a97-11ea-8d1d-29f08981ac03.gif)\n\n```\n[{\"id\":\"800e772a.b109c8\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"ls -ltr\",\"addEnter\":true,\"confirmation\":false,\"name\":\"Directory listing\",\"x\":1260,\"y\":180,\"wires\":[]},{\"id\":\"5a5f258.ad842dc\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"df -h\",\"addEnter\":true,\"confirmation\":false,\"name\":\"Top disc usage\",\"x\":1260,\"y\":240,\"wires\":[]},{\"id\":\"8ae725e0.57d5a8\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"ifconfig\",\"addEnter\":true,\"confirmation\":false,\"name\":\"Network configuration\",\"x\":1280,\"y\":300,\"wires\":[]},{\"id\":\"598184d3.be34ec\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"Iwlist wlan0 scan\",\"addEnter\":true,\"confirmation\":false,\"name\":\"Available wireless networks\",\"x\":1300,\"y\":360,\"wires\":[]},{\"id\":\"236fb7f7.0affc8\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"reboot\",\"addEnter\":true,\"confirmation\":true,\"name\":\"Reboot\",\"x\":1240,\"y\":420,\"wires\":[]},{\"id\":\"9dba7376.805f1\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"shutdown -h now\",\"addEnter\":true,\"confirmation\":true,\"name\":\"Shutdown\",\"x\":1250,\"y\":480,\"wires\":[]},{\"id\":\"5a5741.492658c\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"pwd\",\"addEnter\":true,\"confirmation\":false,\"name\":\"Current directory\",\"x\":1260,\"y\":120,\"wires\":[]},{\"id\":\"ee8feb7c.0cf0d8\",\"type\":\"xterm_in\",\"z\":\"e2675d9d.6854e\",\"command\":\"pwd\\npwd\\npwd\",\"addEnter\":false,\"confirmation\":false,\"name\":\"Example script\",\"x\":1260,\"y\":540,\"wires\":[]}]\n```\n\nThe following settings can be adjusted, to customize the behaviour of the Terminal Input node:\n\n### Command(s):\nSpecify the command(s) that need to be executed in the terminal window . Multiple commands (each on a separate line!) can be added to create a *script*, as you can see in this demo:\n\n![xterm_demo_input_multiple](https://user-images.githubusercontent.com/14224149/71563941-83a14000-2a98-11ea-8b6a-8255f71d6ae0.gif)\n\n### Add 'enter' automatically:\nSpecify whether an 'enter' key (i.e. a newline character) will be added automatically after the last command.\n\n+ When selected, the specified command will be executed immediately (automatically).\n+ When unselected, the specified command will not be executed automatically. Which means it appears in the terminal window, but you have to press manually the enter key to execute it.\n\nRemark: this checkbox has more added value in case of a single command, since multiple commands are separated by enter's anyway ...\n\n### Show confirmation popup:\nCritical commands (e.g. reboot the system) can be protected by a confirmation dialog, to avoid those commands being executed in the wrong circumstances. E.g. you might have pressed the inject button by accident...\n\nThe following demo explains how to a *'reboot'* command can be secured, and cancelled when being clicked:\n\n![xterm_demo_input_confirmation](https://user-images.githubusercontent.com/14224149/71563976-d67af780-2a98-11ea-96ed-ac4dc1df79a2.gif)\n\n## Detailed information\n\n### Communication trajectory\n\nThe following diagram explains the entire trajectory between the terminal and the operating system:\n\n![trajectory](https://user-images.githubusercontent.com/14224149/69183121-a4c65680-0b12-11ea-9181-80eb6306c353.png)\n\n1. When the user opens the node's config screen, an [Xterm.js](https://xtermjs.org/) terminal screen is displayed (and a node-pty process is spawned on the server).\n2. When the user enters a command (e.g. *\"ls -ltr\"*), this command will be send to the server (via a separate ajax call for ***each*** character).\n3. The *pseudo terminal* ([node-pty](https://github.com/microsoft/node-pty)) emulates a hardware terminal.  This means that it can send user input to the shell, and receive output from that shell.  In other words it can read from and write to your terminal session programmatically\n4. The pseudo-terminal output will be pushed via a websocket channel back to the client.\n5. The Xterm.js terminal screen will show the terminal output (which contains both the user input and all other data).\n\nThis communication mechanism allows data to be pushed on the fly to the terminal (e.g. when tailing a file), where it will be displayed to the user).\n\n### Limitations\nSince multiple flow editors can be active at the same time, some kind of terminal management is required.  To accomplish this, the sidebar coding assigns a ***unique terminal Id*** to the flow editor where it is being displayed.  That terminal id is being transferred all the time between the terminal window (client side) and the pseudo terminal (server side), to make sure the data of the multiple terminals doesn't get mixed.\n\nThis is also the main reason why I had to implement my own *Terminal Input* node: this node will also sends that unique terminal id to the server, to make sure that the data will be inject in the terminal window of the **SAME** flow editor (where the Terminal Input node's button has been clicked)!  If I would have reused the Inject node, the server wouldn't have been able to determine in which terminal the data should be inserted.  *Therefore it is not possible to use the Inject node to inject commands into the terminal!*\n\nIt would have been nice to have a *Terminal output* node, to capture the output of a command and process that data in your Node-RED flow.  However such a Terminal Output node runs on the server, which means it is a single node instance that would get the data from all commands from all connected terminals.  This way data from all connected terminals gets mixed, which is totally useless.  Moreover the data would also contain the input from the user (so not only the terminal output)!  *Therefore it is not possible to create a useful Terminal Output node.* \n\nIt is also *not useful to have an output on the Terminal Input node*: a single Terminal Input node on the server side, will be visualized in every flow editor.  So the injected commands from all users will arrive at the same Terminal Input node instance, which means the data again will be mixed. \n\n### Prebuild binaries\nThe node-pty pseudo terminal is written partly in the C-language, which means it needs to be compiled during installation.  This requires the necessary build tools be installed on your system, and then it can cause a lot of headache solving all build conflichts...\n\nHowever this node uses [node-pty-prebuilt-multiarch](https://github.com/oznu/node-pty-prebuilt-multiarch), which offers prebuilt node-pty binaries for a series of operating systems and hardware architectures:\n\n![binaries](https://user-images.githubusercontent.com/14224149/72219154-2f3f9b00-3543-11ea-883f-ed415ddaccd2.png)\n\nThis way you can install this node hopefully a bit easier ...\n\nBut there will be lots of other platforms where the binaries will be build automatically.  On some platforms you will even have execute manual steps to get a succesfull build, like e.g. for Oracle Cloud Free Instance as described [here](https://discourse.nodered.org/t/announce-node-red-contrib-xterm-second-beta-sidebar/19718/2).\n\n### Hearbeat\nWhen a flow editor is being closed in the browser, the corresponding pseudo terminal process on the server should be stopped.  Otherwise the pseudo terminal processes keep stacking up, and the number of pseudo terminals is limited by the host operating system.  Since the server side cannot detect a flow editor being disconnected (see Nick's [answer](https://discourse.nodered.org/t/detect-when-flow-editor-is-closed/18357)), the sidebar tab will send a heartbeat to the server every 5 seconds.  When such a heartbeat doesn't arrive within 15 seconds, the pseudo terminal process (corresponding to the that terminal id) will be stopped automatically.\n\nAs a result you can also *refresh* your (flow editor) browser page, without running into troubles: the old pseudo terminal process will be killed within 15 seconds if the page should get a new unique terminal id.  And a new terminal can be started...\n\nIf this should occur unexpected (e.g. due to network latency problems), you just need to start the terminal again.  The *'Start'* and '*Stop*' buttons will always detect first whether a terminal is already running for this terminal id anyway ...\n","output":"str","x":1231,"y":797,"wires":[[]]},{"id":"d2ad303fbebcbdb8","type":"inject","z":"16310ded01410ec0","g":"414cba320f179caf","name":"inject package details","props":[{"p":"packagename","v":"node-red-contrib-xterm","vt":"str"},{"p":"packageversion","v":"1.0.1","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":1233,"y":416,"wires":[[]]}]