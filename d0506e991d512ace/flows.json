[{"id":"d0506e991d512ace","type":"tab","label":"[Introspection] Develop Node-RED nodes in Node-RED","disabled":false,"info":"::: aim\n\nProvide a backbone for the development nodes within Node-RED.\n\n:::\n\n::: requirements\n\n- [nodedev node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev)\n- the [holistic JSON schema validator](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-validation-and-documentation)\n\n- For GitHub commits, the repository has to be created and one commit needs to have been done.\n- GITHUB_TOKEN set in the env, details described in the [GitHub Base functionality](https://flowhub.org/f/390ee0021ded4910)\n\n- For NPM publish, there needs to be an env variable `NPM_AUTH_TOKEN` that needs to be defined.\n- For NPM publish, authentication is assumed to be OTP (one time password) and the OTP has to be entered, the flow deployed and then the button pressed. So an OTP with longer expiry might be good.\n\n::: \n\n\n<!--\n// [] aba9a5d741241f1c [group] \"entry point\"\n// [] f3879ed58795ea91 [group] \"example message\"\n// [] 8c02f3fe5cd0a0a9 [group] \"GitHub API Functionality\"\n// [] d8867a43abe7260c [group] \"Entry points\"\n// [] 3ccaf963f1e72024 [group] \"\"\n// [] 56b55d2b5d03f424 [group] \"Node-RED local installation\"\n// [] 5d202e6481e451cb [group] \"GitHub functionality\"\n// [] 94fb93c898275493 [group] \"NPM Publish\"\n// [] 88aca7ba3d72dff1 [group] \"NPM Unpublish\"\n-->\n\n\n\n::: background\n\nThis flow provides the following functionality:\n\n- <a class=\"ahl-group-only\" data-ids=\"56b55d2b5d03f424\">Local installation</a> of node code developed using the [nodedev](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) node package\n- <a class=\"ahl-group-only\" data-ids=\"5d202e6481e451cb\">GitHub commit</a> functionality so that all package files are committed in the correct repo structure. This flows is supported by the <a class=\"ahl-group-only\" data-ids=\"8c02f3fe5cd0a0a9\">GitHub base functionality</a> which interacts with the GitHub REST Api. \n- <a class=\"ahl-group-only\" data-ids=\"94fb93c898275493\">NPM Publish</a> to bring the node package to market, and\n- <a class=\"ahl-group-only\" data-ids=\"88aca7ba3d72dff1\">NPM Unpublish</a> in cases of mistakes.\n\nValidation of the `msg` object and example of required properties are <a class=\"ahl-group-only\" data-ids=\"3ccaf963f1e72024\">also provided</a>.\n\n:::\n\n\n### Assumption\n\nThat the package name is scoped with a username, i.e. `@username/node-red-contrib-XYZ`.\n\nThe registry to publish to is assumed to be `https://registry.npmjs.org`.\n\nAlso some requirements as defined in the [creating your own node](https://nodered.org/docs/creating-nodes/packaging) have been enforced by the <a class=\"ahl-node-only\" data-ids=\"2a7132258cbcf313\">package validation node</a>.\n\n::: discussion \n\nIf I want to extend my Emacs, I don't open Vi to create my extensions, I do this in Emacs. I extend Emacs *with* Emacs.\n\nWhy should this be any different in Node-RED? This flow is part of demonstrating how that idea *could* work in Node-RED.\n\n:::\n\n### Related flows\n\n- [nodedev node package development](https://flowhub.org/f/b92be5062203ff69)\n\n### Usage examples\n\n- [Neural-Network Builder](https://flowhub.org/f/f7e009091ef2d6b0)\n- [JSON Schema Validation + Documentation](https://flowhub.org/f/a7a81bcd7159a826)\n- [Introspection package](https://flowhub.org/f/d73d76db3df96ba2)\n- [FlowHub nodes](https://flowhub.org/f/4a831589774ecb04)\n\n","env":[]},{"id":"aba9a5d741241f1c","type":"group","z":"d0506e991d512ace","name":"entry point","style":{"label":true,"fill":"#c8e7a7","fill-opacity":"0.83"},"nodes":["963dfb765b0d9849"],"x":154.285888671875,"y":1191.1216430664062,"w":82,"h":82},{"id":"f3879ed58795ea91","type":"group","z":"d0506e991d512ace","g":"3ccaf963f1e72024","name":"example message","style":{"fill":"#addb7b","label":true},"nodes":["9c62729b0ebd76ad"],"x":409.5716323852539,"y":1103.2857598236628,"w":332,"h":82},{"id":"8c02f3fe5cd0a0a9","type":"group","z":"d0506e991d512ace","name":"GitHub API Functionality","style":{"label":true},"nodes":["9ad713be26ac2025","f8774c1c32f1631d","30c0f36427ec6c9d","ef98698a4b696e66","5226230f86c9c784","e68b9f9bac76350a","2b9bbf6e57664c43","c938363b5f63d0b7","eea2441a833743f5","d5567c053d6f5e08","5c01103c8fe0e13c","3efbe319bc36503c","d8867a43abe7260c"],"x":131.1430206298828,"y":32.857178585869974,"w":879.2855854034424,"h":642},{"id":"d8867a43abe7260c","type":"group","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"Entry points","style":{"fill":"#c8e7a7","fill-opacity":"0.77","label":true},"nodes":["c90bd91e45e1ac7e","43d3a872c31bb664","08d2d7135f31a878","78d886e3f8af26b7","ab95f13fbc3a2d5b","2df1a9a310e8a9fd","dbdea53966e72031","937f9c72251daebf","db7421f5a47b8c6b","dd62847c663f56d7","103190c06a394858"],"x":157.1430206298828,"y":58.857178585869974,"w":83,"h":590},{"id":"3ccaf963f1e72024","type":"group","z":"d0506e991d512ace","name":"","style":{"fill":"#ffffbf","fill-opacity":"0.58","label":true},"nodes":["992dea9edfe05367","f3879ed58795ea91"],"x":355.9999771118164,"y":1077.2857598236628,"w":452,"h":195.83588324274342},{"id":"56b55d2b5d03f424","type":"group","z":"d0506e991d512ace","name":"Node-RED local installation","style":{"label":true},"nodes":["2683d81e8a4b64ab","f07d2d09465ca725","3a0d53eb62336e62"],"x":2175.567626953125,"y":29.000009536743164,"w":212,"h":197.79378700256348},{"id":"5d202e6481e451cb","type":"group","z":"d0506e991d512ace","name":"GitHub functionality","style":{"label":true},"nodes":["8b5643cf5e2dccc4","b49254be1ffd7f40","52c9d2dbb39a90ed","b1ad2d6f00cd4476","66e209a52688542c","c37193279bcb55cd","b522a5152706ad07","4de77b4ed267a790","da866da706b3a30c","63b835932b76b439","8468193a6084d4f4","bb3ee2c3d46386a3","315595ae0c04e23c","29ed87438e7e6749","25f729f47986b0f8"],"x":2101,"y":333.71933199678153,"w":372,"h":939.4023110696247},{"id":"94fb93c898275493","type":"group","z":"d0506e991d512ace","name":"NPM Publish","style":{"label":true},"nodes":["0951d8657919ec86","fbe982a35d27d99b","33093265f4dfec9d","de9fefd043701d43","3884411f8afe9e4a"],"x":2149.9999771118164,"y":1382.3749322380338,"w":292,"h":338.8894720588412},{"id":"88aca7ba3d72dff1","type":"group","z":"d0506e991d512ace","name":"NPM Unpublish","style":{"label":true},"nodes":["3e9ac86aba852cdc","3f9377f9c6c4572b","3a58f10bf6055793","a923f6c1827a644a"],"x":2170,"y":1829.1429462432861,"w":292,"h":270.28576469421387},{"id":"893f316ea815e2b1","type":"junction","z":"d0506e991d512ace","x":1371.9389214515686,"y":1232.1216430664062,"wires":[["2683d81e8a4b64ab","8b5643cf5e2dccc4","0951d8657919ec86","3e9ac86aba852cdc"]]},{"id":"2683d81e8a4b64ab","type":"switch","z":"d0506e991d512ace","g":"56b55d2b5d03f424","name":"noderedinstall","property":"noderedinstall","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2281.567626953125,"y":185.79379653930664,"wires":[["3a0d53eb62336e62"]]},{"id":"8b5643cf5e2dccc4","type":"switch","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"gitcommit","property":"gitcommit","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2294.1748046875,"y":1232.1216430664062,"wires":[["29ed87438e7e6749"]]},{"id":"0951d8657919ec86","type":"switch","z":"d0506e991d512ace","g":"94fb93c898275493","name":"npmpublish","property":"npmpublish","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2308.142822265625,"y":1680.264404296875,"wires":[["3884411f8afe9e4a"]]},{"id":"b49254be1ffd7f40","type":"function","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"prepare tree","func":"msg.payload = msg.contents.map( (elem) => {\n    var newelem = { ...elem};\n    \n    if ( elem.type != \"base64\") {\n        // @ts-ignore\n        newelem.contents = RED.util.ensureBuffer(elem.contents).toString('base64')\n    }\n\n    delete newelem.type;\n    return newelem;\n})\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2287,"y":869.3775299276624,"wires":[["b1ad2d6f00cd4476"]]},{"id":"52c9d2dbb39a90ed","type":"change","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"owner, repo, branch, author","rules":[{"t":"set","p":"owner","pt":"msg","to":"githubowner","tot":"msg"},{"t":"set","p":"repo","pt":"msg","to":"githubrepo","tot":"msg"},{"t":"set","p":"branch","pt":"msg","to":"githubbranch","tot":"msg"},{"t":"set","p":"author","pt":"msg","to":"{\t    \"name\": $$.githubauthor,\t    \"email\": $$.githubauthoremail\t}","tot":"jsonata"},{"t":"set","p":"message","pt":"msg","to":"commit_message","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2287,"y":1054.5510119710648,"wires":[["8468193a6084d4f4"]]},{"id":"b1ad2d6f00cd4476","type":"split","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":2287,"y":807.6530359131948,"wires":[["c37193279bcb55cd"]]},{"id":"66e209a52688542c","type":"link call","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","links":["08d2d7135f31a878"],"linkType":"static","timeout":"30","x":2287,"y":684.2040478842599,"wires":[["b522a5152706ad07"]]},{"id":"c37193279bcb55cd","type":"change","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","rules":[{"t":"set","p":"filename","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"payload","pt":"msg","to":"payload.contents","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2287,"y":745.9285418987274,"wires":[["66e209a52688542c"]]},{"id":"b522a5152706ad07","type":"change","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"path\": $$.filename,\t    \"sha\": $$.payload\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2287,"y":622.4795538697924,"wires":[["4de77b4ed267a790"]]},{"id":"4de77b4ed267a790","type":"join","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","reduceRight":false,"x":2287,"y":560.7550598553249,"wires":[["da866da706b3a30c"]]},{"id":"da866da706b3a30c","type":"link call","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","links":["78d886e3f8af26b7"],"linkType":"static","timeout":"30","x":2287,"y":499.03056584085743,"wires":[["315595ae0c04e23c"]]},{"id":"63b835932b76b439","type":"link call","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","links":["2df1a9a310e8a9fd"],"linkType":"static","timeout":"30","x":2287,"y":374.71933199678153,"wires":[["42b6d95993c54b76"]]},{"id":"8468193a6084d4f4","type":"link call","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","links":["c90bd91e45e1ac7e"],"linkType":"static","timeout":"30","x":2287,"y":992.8265179565974,"wires":[["bb3ee2c3d46386a3"]]},{"id":"bb3ee2c3d46386a3","type":"change","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","rules":[{"t":"set","p":"parent_sha","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2287,"y":931.10202394213,"wires":[["b49254be1ffd7f40"]]},{"id":"315595ae0c04e23c","type":"link call","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","links":["ab95f13fbc3a2d5b"],"linkType":"static","timeout":"30","x":2287,"y":437.30607182638994,"wires":[["63b835932b76b439"]]},{"id":"42b6d95993c54b76","type":"debug","z":"d0506e991d512ace","name":"new github commit revision","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":3033,"y":374.71933199678153,"wires":[]},{"id":"3e9ac86aba852cdc","type":"switch","z":"d0506e991d512ace","g":"88aca7ba3d72dff1","name":"npmunpublish","property":"npmunpublish","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2323.857421875,"y":2058.4287109375,"wires":[["a923f6c1827a644a"]]},{"id":"1ee5da0dca96b684","type":"debug","z":"d0506e991d512ace","name":"result of npm unpublish","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":3023,"y":1870.1429462432861,"wires":[]},{"id":"963dfb765b0d9849","type":"link in","z":"d0506e991d512ace","g":"aba9a5d741241f1c","name":"[nodedev-backend] entry point","links":["240f4b9098531b8e","6713609873f293c7","328f51ddaf7f2798","dca7abf167c0e5dd","d7d542898cd0217b"],"x":195.285888671875,"y":1232.1216430664062,"wires":[["992dea9edfe05367"]]},{"id":"2a7132258cbcf313","type":"function","z":"d0506e991d512ace","name":"Package.json validator","func":"/* must have a package.json */\n\nvar pkgjson = msg.contents.filter((d) => {\n    return d.name == \"package.json\"\n});\n\nif ( pkgjson.length != 1 ) {\n    if ( pkgjson.length > 1 ) {\n      node.error(\"multiple package.json files found\", msg)\n    } else {\n      node.error(\"no package.json file found\", msg)\n    }\n    node.done();\n    return;\n}\n\n/* name must be scoped */\n\nvar manifest = JSON.parse(pkgjson[0].contents);\n\nvar pdetails = manifest.name.split(\"/\")\n\nif (pdetails.length < 2 || pdetails[0][0] != '@') {\n    node.error(\"package name not scoped: \" + manifest.name, msg)\n    node.done();\n    return\n}\n\n/* need to provide an node-red supported engine version */\n\nif ( !manifest[\"node-red\"] || !manifest[\"node-red\"].version ) {\n    msg.error = {\n      message: \"Node-RED supported version missing in package.json, see https://nodered.org/docs/creating-nodes/packaging for more details\"\n    }\n    node.error(\"Node-RED supported engine version not supplied in package.json\", msg)\n    node.done();\n    return\n}\n\n/* also ensure there is an nodejs engine supported version salvo */\n\nif ( !manifest.engines || !manifest.engines.node ) {\n    msg.error = {\n      message: \"Nodejs supported version missing in package.json, see https://docs.npmjs.com/cli/v7/configuring-npm/package-json#engines for more details\"\n    }\n    node.error(\"Nodejs supported engine version not supplied in package.json\", msg)\n    node.done();\n    return\n}\n\n/* ensure contents is not empty */\n\nmsg.contents.forEach( (d) => {\n  if ( !d.contents || d.contents.trim() == \"\" ) {\n    node.error(\"file empty: \" + d.name, msg)\n    node.done();\n    return\n  }\n});\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"Ajv","module":"ajv"}],"x":1066.14306640625,"y":1232.1216430664062,"wires":[["893f316ea815e2b1"]],"outputLabels":["ok"]},{"id":"8d90825de93a4fa0","type":"catch","z":"d0506e991d512ace","name":"","scope":null,"uncaught":false,"x":447,"y":928.5714111328125,"wires":[["750dfdf64f5d1216"]]},{"id":"750dfdf64f5d1216","type":"debug","z":"d0506e991d512ace","name":"Exceptions Will Happen","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":683,"y":928.5714111328125,"wires":[]},{"id":"9c62729b0ebd76ad","type":"inject","z":"d0506e991d512ace","g":"f3879ed58795ea91","name":"example contents for message","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-nodedev","vt":"str"},{"p":"pversion","v":"0.0.3","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-nodedev","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"nice commit message","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"npmotp","v":"123456","vt":"str"},{"p":"contents","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":585.5716323852539,"y":1144.2857598236628,"wires":[[]]},{"id":"f07d2d09465ca725","type":"NodeRedInstall","z":"d0506e991d512ace","g":"56b55d2b5d03f424","name":"","x":2278.71044921875,"y":70.00000953674316,"wires":[[]]},{"id":"3a0d53eb62336e62","type":"NpmTarBall","z":"d0506e991d512ace","g":"56b55d2b5d03f424","name":"","x":2278.71044921875,"y":130.39691162109375,"wires":[["f07d2d09465ca725"]]},{"id":"fbe982a35d27d99b","type":"NpmTarBall","z":"d0506e991d512ace","g":"94fb93c898275493","name":"","x":2295.9999771118164,"y":1488.9285177162715,"wires":[["33093265f4dfec9d"]]},{"id":"33093265f4dfec9d","type":"NpmPublish","z":"d0506e991d512ace","g":"94fb93c898275493","name":"","otp":"","action":"publish","authToken":"NPM_AUTH_TOKEN","authTokenType":"env","x":2295.9999771118164,"y":1423.3749322380338,"wires":[["2f4b14f27919dfab"]]},{"id":"2f4b14f27919dfab","type":"debug","z":"d0506e991d512ace","name":"result of npm publish","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":3013,"y":1423.3749322380338,"wires":[]},{"id":"3f9377f9c6c4572b","type":"NpmPublish","z":"d0506e991d512ace","g":"88aca7ba3d72dff1","name":"Npm Unpublish","otp":"","action":"unpublish","authToken":"NPM_AUTH_TOKEN","authTokenType":"env","x":2316,"y":1870.1429462432861,"wires":[["1ee5da0dca96b684"]]},{"id":"9ad713be26ac2025","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":353.21440114293785,"wires":[["30c0f36427ec6c9d"]]},{"id":"f8774c1c32f1631d","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"current repo revision (sha)","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: branch name\n * \n * Return:\n *   - payload: current revision of repo\n * \n * Source:\n *   - https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/branches/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.commit.sha})\n    }).catch(function (e) {\n        node.error(\"obtaining latest sha\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":199.57150353704185,"wires":[["30c0f36427ec6c9d"]]},{"id":"c90bd91e45e1ac7e","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] current repo version","links":[],"x":198.1430206298828,"y":201.45717858586988,"wires":[["f8774c1c32f1631d"]]},{"id":"30c0f36427ec6c9d","type":"link out","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"link out 91","mode":"return","links":[],"x":969.4286060333252,"y":317.8571156433651,"wires":[]},{"id":"43d3a872c31bb664","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get tree for sha","links":[],"x":198.1430206298828,"y":353.85717858587,"wires":[["9ad713be26ac2025"]]},{"id":"ef98698a4b696e66","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create blob","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: base64 encoded content for blob\n * \n * Return:\n *   - payload: sha of newly created blob\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/blobs\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        content: msg.payload,\n        encoding: \"base64\"\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.sha})\n    }).catch(function (e) {\n        node.error(\"creating blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":404.4287003449032,"wires":[["30c0f36427ec6c9d"]]},{"id":"5226230f86c9c784","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create tree for blobs","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: array of blobs, each blob is an object with:\n *         - path: filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n *         - sha: the sha of the blob created initially using the create blob function\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n * \n * Return:\n *   - payload: sha of newly created tree\n */\n\ntry {\n    var tree = msg.payload.map(function(blb){\n        return {\n            ...blb,\n            mode: \"100644\",\n            type: \"blob\"\n        }\n    });\n\n    octokit.request(\"POST /repos/:owner/:repo/git/trees\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        base_tree: msg.parent_sha,\n        tree: tree\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n    \n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":455.6429995468685,"wires":[["30c0f36427ec6c9d"]]},{"id":"e68b9f9bac76350a","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: the sha of the tree to commit\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n *   - author: an object with the following:\n *      - name: name of the author of the commit\n *      - email: email of the author of the commit\n *   - message: commit message\n * \n * Return:\n *   - payload: sha of newly commit\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,        \n        message: msg.message,\n        author: {\n            name: msg.author.name,\n            email: msg.author.email\n        },\n        parents: [\n            msg.parent_sha\n        ],\n        tree: msg.payload\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":506.85729874883384,"wires":[["30c0f36427ec6c9d"]]},{"id":"08d2d7135f31a878","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create blobs","links":[],"x":198.1430206298828,"y":404.65717858587016,"wires":[["ef98698a4b696e66"]]},{"id":"78d886e3f8af26b7","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create tree from blobs","links":[],"x":198.1430206298828,"y":455.4571785858699,"wires":[["5226230f86c9c784"]]},{"id":"ab95f13fbc3a2d5b","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create commit","links":[],"x":198.1430206298828,"y":506.25717858587007,"wires":[["e68b9f9bac76350a"]]},{"id":"2df1a9a310e8a9fd","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] update branch head","links":[],"x":198.1430206298828,"y":607.85717858587,"wires":[["eea2441a833743f5"]]},{"id":"2b9bbf6e57664c43","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get commits for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha for which the commits are desired\n * \n * Return:\n *   - payload: commits for sha\n * \n * Source: https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#get-a-commit-object\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/commits/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":250.78580273900718,"wires":[["30c0f36427ec6c9d"]]},{"id":"dbdea53966e72031","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get commits for sha","links":[],"x":198.1430206298828,"y":252.25717858587007,"wires":[["2b9bbf6e57664c43"]]},{"id":"c938363b5f63d0b7","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get blob for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: file sha for which the contents are desired\n * \n * Return:\n *   - payload: base64 contents in a hash object\n * \n *  Source: https://docs.github.com/en/rest/git/blobs?apiVersion=2022-11-28#get-a-blob\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/blobs/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":302.0001019409725,"wires":[["30c0f36427ec6c9d"]]},{"id":"937f9c72251daebf","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get blob for sha","links":[],"x":198.1430206298828,"y":303.05717858587,"wires":[["c938363b5f63d0b7"]]},{"id":"eea2441a833743f5","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"updating head on repo at branch - aka committing commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github repo branch to update with the new commit sha\n *   - payload: the sha of the commit created\n * \n * Return:\n *   - payload: new sha of the branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference\n */\n\ntry {\n    msg.new_commit_sha = msg.payload;\n\n    octokit.request(\"PATCH /repos/:owner/:repo/git/refs/heads/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n        sha: msg.payload\n    }).then(function (resp) {\n        node.send({ \n            ...msg, \n            payload: resp.data.object.sha,\n        })\n    }).catch(function (e) {\n        node.error(\"committing commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":609.2858971527645,"wires":[["30c0f36427ec6c9d"]]},{"id":"d5567c053d6f5e08","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create branch","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: name for the new branch\n *   - payload: the commit sha to which the branch should point\n * \n * Return:\n *   - payload: sha of newly created branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/refs\", {\n        owner: msg.owner,\n        repo:  msg.repo,\n        ref:   \"refs/heads/\" + msg.branch,\n        sha:   msg.payload        \n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.object.sha })\n    }).catch(function (e) {\n        node.error(\"creating branch\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":558.0715979507992,"wires":[["30c0f36427ec6c9d"]]},{"id":"db7421f5a47b8c6b","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create branch","links":[],"x":198.1430206298828,"y":557.0571785858698,"wires":[["d5567c053d6f5e08"]]},{"id":"5c01103c8fe0e13c","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get commits for repo","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - page: page number, per_page = 100 commits\n * \n * Return:\n *   - commits: list of commits (max. 100)\n * \n * Source: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-commits\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        per_page: 100,\n        page: msg.page\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":148.35720433507652,"wires":[["30c0f36427ec6c9d"]]},{"id":"dd62847c663f56d7","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get repo commits","links":[],"x":198.1430206298828,"y":150.65717858586993,"wires":[["5c01103c8fe0e13c"]]},{"id":"3efbe319bc36503c","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get ratelimit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n * \n * Return:\n *   - ratelimits in the header\n * \n * Source: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limit-headers\n */\n\ntry {\n\n    octokit.request(\"GET /rate_limit\", {\n        owner: msg.owner,\n    }).then((resp) => {\n        node.send({\n            ...msg, payload: Object.keys(resp.headers).filter((d) => {\n                return d.startsWith(\"x-ratelimit\")\n            }).map((k) => {\n                return [k, resp.headers[k]]\n            }).reduce((o, c) => {\n                o[c[0]] = c[1]\n                return o\n            }, {})\n        })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":560.2859649658203,"y":97.14290513311119,"wires":[["30c0f36427ec6c9d"]]},{"id":"103190c06a394858","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] ratelimit status","links":[],"x":198.1430206298828,"y":99.85717858586997,"wires":[["3efbe319bc36503c"]]},{"id":"992dea9edfe05367","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"3ccaf963f1e72024","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Basic requirements for `msg` object to utilise this flow.\",\n    \"$id\": \"docid\",\n    \"type\": \"object\",\n    \"required\": [\n        \"noderedinstall\",\n        \"gitcommit\",\n        \"npmpublish\",\n        \"npmunpublish\",\n        \"contents\"\n    ],\n    \"$defs\": {\n        \"content\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"name\",\n                \"contents\"\n            ],\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the file to be included in the package.\"\n                },\n                \"contents\": {\n                    \"type\": \"string\",\n                    \"description\": \"Contents of the file to be included in the package. Binary data should be encoded in base64.\"\n                },\n                \"type\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value describes the type of the content, default is utf-8.\",\n                    \"enum\": [\n                        \"text\",\n                        \"utf-8\",\n                        \"html\",\n                        \"javascript\",\n                        \"markdown\",\n                        \"json\",\n                        \"base64\"\n                    ]\n                }\n            }\n        }\n    },\n    \"properties\": {\n        \"noderedinstall\": {\n            \"type\": \"boolean\",\n            \"description\": \"Install the node into Node-RED.\"\n        },\n        \"gitcommit\": {\n            \"type\": \"boolean\",\n            \"description\": \"Perform a GitHub commit with the package files.\"\n        },\n        \"npmpublish\": {\n            \"type\": \"boolean\",\n            \"description\": \"Publish package to NPM.\"\n        },\n        \"npmunpublish\": {\n            \"type\": \"boolean\",\n            \"description\": \"Unpublish package to NPM.\"\n        },\n        \"contents\": {\n            \"type\": \"array\",\n            \"description\": \"Contents of the package, all names should be prefixed with package/. Minimum: LICENSE, README and package.json --> 3.\",\n            \"minItems\": 3,\n            \"items\": {\n                \"$ref\": \"docid#/$defs/content\"\n            }\n        }\n    }\n}","info":"## Basic requirements for \\`msg\\` object to utilise this flow. Type\n\n`object` ([Basic requirements for \\`msg\\` object to utilise this flow.](definition.md))\n\n# Basic requirements for \\`msg\\` object to utilise this flow. Properties\n\n| Property                          | Type      | Required | Nullable       | Defined by                                                                                                                                |\n| :-------------------------------- | :-------- | :------- | :------------- | :---------------------------------------------------------------------------------------------------------------------------------------- |\n| [noderedinstall](#noderedinstall) | `boolean` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-noderedinstall.md \"docid#/properties/noderedinstall\") |\n| [gitcommit](#gitcommit)           | `boolean` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-gitcommit.md \"docid#/properties/gitcommit\")           |\n| [npmpublish](#npmpublish)         | `boolean` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-npmpublish.md \"docid#/properties/npmpublish\")         |\n| [npmunpublish](#npmunpublish)     | `boolean` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-npmunpublish.md \"docid#/properties/npmunpublish\")     |\n| [contents](#contents)             | `array`   | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-contents.md \"docid#/properties/contents\")             |\n\n## noderedinstall\n\nInstall the node into Node-RED.\n\n`noderedinstall`\n\n*   is required\n\n*   Type: `boolean`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-noderedinstall.md \"docid#/properties/noderedinstall\")\n\n### noderedinstall Type\n\n`boolean`\n\n## gitcommit\n\nPerform a GitHub commit with the package files.\n\n`gitcommit`\n\n*   is required\n\n*   Type: `boolean`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-gitcommit.md \"docid#/properties/gitcommit\")\n\n### gitcommit Type\n\n`boolean`\n\n## npmpublish\n\nPublish package to NPM.\n\n`npmpublish`\n\n*   is required\n\n*   Type: `boolean`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-npmpublish.md \"docid#/properties/npmpublish\")\n\n### npmpublish Type\n\n`boolean`\n\n## npmunpublish\n\nUnpublish package to NPM.\n\n`npmunpublish`\n\n*   is required\n\n*   Type: `boolean`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-npmunpublish.md \"docid#/properties/npmunpublish\")\n\n### npmunpublish Type\n\n`boolean`\n\n## contents\n\nContents of the package, all names should be prefixed with package/. Minimum: LICENSE, README and package.json --> 3.\n\n`contents`\n\n*   is required\n\n*   Type: `object[]` ([Details](definition-properties-contents-items.md))\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-properties-contents.md \"docid#/properties/contents\")\n\n### contents Type\n\n`object[]` ([Details](definition-properties-contents-items.md))\n\n### contents Constraints\n\n**minimum number of items**: the minimum number of items for this array is: `3`\n\n# Basic requirements for \\`msg\\` object to utilise this flow. Definitions\n\n## Definitions group content\n\nReference this group by using\n\n```json\n{\"$ref\":\"docid#/$defs/content\"}\n```\n\n| Property                | Type     | Required | Nullable       | Defined by                                                                                                                                               |\n| :---------------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [name](#name)           | `string` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-name.md \"docid#/$defs/content/properties/name\")         |\n| [contents](#contents-1) | `string` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-contents.md \"docid#/$defs/content/properties/contents\") |\n| [type](#type)           | `string` | Optional | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-type.md \"docid#/$defs/content/properties/type\")         |\n\n### name\n\nName of the file to be included in the package.\n\n`name`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-name.md \"docid#/$defs/content/properties/name\")\n\n#### name Type\n\n`string`\n\n### contents\n\nContents of the file to be included in the package. Binary data should be encoded in base64.\n\n`contents`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-contents.md \"docid#/$defs/content/properties/contents\")\n\n#### contents Type\n\n`string`\n\n### type\n\nValue describes the type of the content, default is utf-8.\n\n`type`\n\n*   is optional\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-type.md \"docid#/$defs/content/properties/type\")\n\n#### type Type\n\n`string`\n\n#### type Constraints\n\n**enum**: the value of this property must be equal to one of the following values:\n\n| Value          | Explanation |\n| :------------- | :---------- |\n| `\"text\"`       |             |\n| `\"utf-8\"`      |             |\n| `\"html\"`       |             |\n| `\"javascript\"` |             |\n| `\"markdown\"`   |             |\n| `\"json\"`       |             |\n| `\"base64\"`     |             |\n\n---\n## $defs Type\n\nunknown\n\n---\n## items Type\n\n`object` ([Details](definition-defs-content.md))\n\n# items Properties\n\n| Property              | Type     | Required | Nullable       | Defined by                                                                                                                                               |\n| :-------------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [name](#name)         | `string` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-name.md \"docid#/$defs/content/properties/name\")         |\n| [contents](#contents) | `string` | Required | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-contents.md \"docid#/$defs/content/properties/contents\") |\n| [type](#type)         | `string` | Optional | cannot be null | [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-type.md \"docid#/$defs/content/properties/type\")         |\n\n## name\n\nName of the file to be included in the package.\n\n`name`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-name.md \"docid#/$defs/content/properties/name\")\n\n### name Type\n\n`string`\n\n## contents\n\nContents of the file to be included in the package. Binary data should be encoded in base64.\n\n`contents`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-contents.md \"docid#/$defs/content/properties/contents\")\n\n### contents Type\n\n`string`\n\n## type\n\nValue describes the type of the content, default is utf-8.\n\n`type`\n\n*   is optional\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Basic requirements for \\`msg\\` object to utilise this flow.](definition-defs-content-properties-type.md \"docid#/$defs/content/properties/type\")\n\n### type Type\n\n`string`\n\n### type Constraints\n\n**enum**: the value of this property must be equal to one of the following values:\n\n| Value          | Explanation |\n| :------------- | :---------- |\n| `\"text\"`       |             |\n| `\"utf-8\"`      |             |\n| `\"html\"`       |             |\n| `\"javascript\"` |             |\n| `\"markdown\"`   |             |\n| `\"json\"`       |             |\n| `\"base64\"`     |             |\n\n---\n## name Type\n\n`string`\n\n---\n## contents Type\n\n`string`\n\n---\n## type Type\n\n`string`\n\n## type Constraints\n\n**enum**: the value of this property must be equal to one of the following values:\n\n| Value          | Explanation |\n| :------------- | :---------- |\n| `\"text\"`       |             |\n| `\"utf-8\"`      |             |\n| `\"html\"`       |             |\n| `\"javascript\"` |             |\n| `\"markdown\"`   |             |\n| `\"json\"`       |             |\n| `\"base64\"`     |             |\n\n---\n## noderedinstall Type\n\n`boolean`\n\n---\n## gitcommit Type\n\n`boolean`\n\n---\n## npmpublish Type\n\n`boolean`\n\n---\n## npmunpublish Type\n\n`boolean`\n\n---\n## contents Type\n\n`object[]` ([Details](definition-defs-content.md))\n\n## contents Constraints\n\n**minimum number of items**: the minimum number of items for this array is: `3`\n","schematitle":"Basic requirements for `msg` object to utilise this flow.","x":581.9999771118164,"y":1232.1216430664062,"wires":[["2a7132258cbcf313"]]},{"id":"29ed87438e7e6749","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","property":"","propertyType":"env","checkentireobject":true,"func":"{\n    \"title\": \"Environment check for GitHub\",\n    \"type\": \"object\",\n    \"required\": [\n        \"GITHUB_TOKEN\"\n    ],\n    \"properties\": {\n        \"GITHUB_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub authentication token.\"\n        }\n    }\n}","info":"## Environment check for GitHub Type\n\n`object` ([Environment check for GitHub](definition.md))\n\n# Environment check for GitHub Properties\n\n| Property                       | Type     | Required | Nullable       | Defined by                                                                                                 |\n| :----------------------------- | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------- |\n| [GITHUB\\_TOKEN](#github_token) | `string` | Required | cannot be null | [Environment check for GitHub](definition-properties-github_token.md \"undefined#/properties/GITHUB_TOKEN\") |\n\n## GITHUB\\_TOKEN\n\nGitHub authentication token.\n\n`GITHUB_TOKEN`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Environment check for GitHub](definition-properties-github_token.md \"undefined#/properties/GITHUB_TOKEN\")\n\n### GITHUB\\_TOKEN Type\n\n`string`\n\n---\n## GITHUB\\_TOKEN Type\n\n`string`\n","schematitle":"Environment check for GitHub","x":2287,"y":1178,"wires":[["25f729f47986b0f8"]]},{"id":"25f729f47986b0f8","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"5d202e6481e451cb","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Check `msg` object for GitHub commit.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"commit_message\",\n        \"githubowner\",\n        \"githubrepo\",\n        \"githubbranch\",\n        \"githubauthor\",\n        \"githubauthoremail\"\n    ],\n    \"properties\": {\n        \"commit_message\": {\n            \"type\": \"string\",\n            \"description\": \"Message for the commit.\"\n        },\n        \"githubowner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username.\"\n        },\n        \"githubrepo\": {\n            \"type\": \"string\",\n            \"description\": \"Repository upon which we are acting.\"\n        },\n        \"githubbranch\": {\n            \"type\": \"string\",\n            \"description\": \"The branch on which the commit should be done.\"\n        },\n        \"githubauthor\": {\n            \"type\": \"string\",\n            \"description\": \"Full name of the author of the commit.\"\n        },\n        \"githubauthoremail\": {\n            \"type\": \"string\",\n            \"description\": \"Email of the author for the commit message.\"\n        }\n    }\n}\n","info":"## Check \\`msg\\` object for GitHub commit. Type\n\n`object` ([Check \\`msg\\` object for GitHub commit.](definition.md))\n\n# Check \\`msg\\` object for GitHub commit. Properties\n\n| Property                                | Type     | Required | Nullable       | Defined by                                                                                                                      |\n| :-------------------------------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------ |\n| [commit\\_message](#commit_message)      | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-commit_message.md \"undefined#/properties/commit_message\")       |\n| [githubowner](#githubowner)             | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-githubowner.md \"undefined#/properties/githubowner\")             |\n| [githubrepo](#githubrepo)               | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-githubrepo.md \"undefined#/properties/githubrepo\")               |\n| [githubbranch](#githubbranch)           | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-githubbranch.md \"undefined#/properties/githubbranch\")           |\n| [githubauthor](#githubauthor)           | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-githubauthor.md \"undefined#/properties/githubauthor\")           |\n| [githubauthoremail](#githubauthoremail) | `string` | Required | cannot be null | [Check \\`msg\\` object for GitHub commit.](definition-properties-githubauthoremail.md \"undefined#/properties/githubauthoremail\") |\n\n## commit\\_message\n\nMessage for the commit.\n\n`commit_message`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-commit_message.md \"undefined#/properties/commit_message\")\n\n### commit\\_message Type\n\n`string`\n\n## githubowner\n\nGitHub username.\n\n`githubowner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-githubowner.md \"undefined#/properties/githubowner\")\n\n### githubowner Type\n\n`string`\n\n## githubrepo\n\nRepository upon which we are acting.\n\n`githubrepo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-githubrepo.md \"undefined#/properties/githubrepo\")\n\n### githubrepo Type\n\n`string`\n\n## githubbranch\n\nThe branch on which the commit should be done.\n\n`githubbranch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-githubbranch.md \"undefined#/properties/githubbranch\")\n\n### githubbranch Type\n\n`string`\n\n## githubauthor\n\nFull name of the author of the commit.\n\n`githubauthor`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-githubauthor.md \"undefined#/properties/githubauthor\")\n\n### githubauthor Type\n\n`string`\n\n## githubauthoremail\n\nEmail of the author for the commit message.\n\n`githubauthoremail`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` object for GitHub commit.](definition-properties-githubauthoremail.md \"undefined#/properties/githubauthoremail\")\n\n### githubauthoremail Type\n\n`string`\n\n---\n## commit\\_message Type\n\n`string`\n\n---\n## githubowner Type\n\n`string`\n\n---\n## githubrepo Type\n\n`string`\n\n---\n## githubbranch Type\n\n`string`\n\n---\n## githubauthor Type\n\n`string`\n\n---\n## githubauthoremail Type\n\n`string`\n","schematitle":"Check `msg` object for GitHub commit.","x":2287,"y":1116.2755059855322,"wires":[["52c9d2dbb39a90ed"]]},{"id":"de9fefd043701d43","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"94fb93c898275493","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Check `msg` for NPM publish\",\n    \"type\": \"object\",\n    \"required\": [\n        \"npmotp\"\n    ],\n    \"properties\": {\n        \"npmotp\": {\n            \"type\": \"string\",\n            \"description\": \"One Time Password for NPM.\"\n        }\n    }\n}","info":"## Check \\`msg\\` for NPM publish Type\n\n`object` ([Check \\`msg\\` for NPM publish](definition.md))\n\n# Check \\`msg\\` for NPM publish Properties\n\n| Property          | Type     | Required | Nullable       | Defined by                                                                                      |\n| :---------------- | :------- | :------- | :------------- | :---------------------------------------------------------------------------------------------- |\n| [npmotp](#npmotp) | `string` | Required | cannot be null | [Check \\`msg\\` for NPM publish](definition-properties-npmotp.md \"undefined#/properties/npmotp\") |\n\n## npmotp\n\nOne Time Password for NPM.\n\n`npmotp`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` for NPM publish](definition-properties-npmotp.md \"undefined#/properties/npmotp\")\n\n### npmotp Type\n\n`string`\n\n---\n## npmotp Type\n\n`string`\n","schematitle":"Check `msg` for NPM publish","x":2295.9999771118164,"y":1553.9642266205378,"wires":[["fbe982a35d27d99b"]]},{"id":"3884411f8afe9e4a","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"94fb93c898275493","name":"","property":"","propertyType":"env","checkentireobject":true,"func":"{\n    \"title\": \"Environment check for NPM\",\n    \"type\": \"object\",\n    \"required\": [\n        \"NPM_AUTH_TOKEN\"\n    ],\n    \"properties\": {\n        \"NPM_AUTH_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"NPM authentication token.\"\n        }\n    }\n}","info":"## Environment check for NPM Type\n\n`object` ([Environment check for NPM](definition.md))\n\n# Environment check for NPM Properties\n\n| Property                            | Type     | Required | Nullable       | Defined by                                                                                                  |\n| :---------------------------------- | :------- | :------- | :------------- | :---------------------------------------------------------------------------------------------------------- |\n| [NPM\\_AUTH\\_TOKEN](#npm_auth_token) | `string` | Required | cannot be null | [Environment check for NPM](definition-properties-npm_auth_token.md \"undefined#/properties/NPM_AUTH_TOKEN\") |\n\n## NPM\\_AUTH\\_TOKEN\n\nNPM authentication token.\n\n`NPM_AUTH_TOKEN`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Environment check for NPM](definition-properties-npm_auth_token.md \"undefined#/properties/NPM_AUTH_TOKEN\")\n\n### NPM\\_AUTH\\_TOKEN Type\n\n`string`\n\n---\n## NPM\\_AUTH\\_TOKEN Type\n\n`string`\n","schematitle":"Environment check for NPM","x":2295.9999771118164,"y":1618.9999355248042,"wires":[["de9fefd043701d43"]]},{"id":"3a58f10bf6055793","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"88aca7ba3d72dff1","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Check `msg` for NPM publish\",\n    \"type\": \"object\",\n    \"required\": [\n        \"npmotp\"\n    ],\n    \"properties\": {\n        \"npmotp\": {\n            \"type\": \"string\",\n            \"description\": \"One Time Password for NPM.\"\n        }\n    }\n}","info":"## Check \\`msg\\` for NPM publish Type\n\n`object` ([Check \\`msg\\` for NPM publish](definition.md))\n\n# Check \\`msg\\` for NPM publish Properties\n\n| Property          | Type     | Required | Nullable       | Defined by                                                                                      |\n| :---------------- | :------- | :------- | :------------- | :---------------------------------------------------------------------------------------------- |\n| [npmotp](#npmotp) | `string` | Required | cannot be null | [Check \\`msg\\` for NPM publish](definition-properties-npmotp.md \"undefined#/properties/npmotp\") |\n\n## npmotp\n\nOne Time Password for NPM.\n\n`npmotp`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Check \\`msg\\` for NPM publish](definition-properties-npmotp.md \"undefined#/properties/npmotp\")\n\n### npmotp Type\n\n`string`\n\n---\n## npmotp Type\n\n`string`\n","schematitle":"Check `msg` for NPM publish","x":2316,"y":1931.8571796417236,"wires":[["3f9377f9c6c4572b"]]},{"id":"a923f6c1827a644a","type":"JsonSchemaValidatorWithDocu","z":"d0506e991d512ace","g":"88aca7ba3d72dff1","name":"","property":"","propertyType":"env","checkentireobject":true,"func":"{\n    \"title\": \"Environment check for NPM\",\n    \"type\": \"object\",\n    \"required\": [\n        \"NPM_AUTH_TOKEN\"\n    ],\n    \"properties\": {\n        \"NPM_AUTH_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"NPM authentication token.\"\n        }\n    }\n}","info":"## Environment check for NPM Type\n\n`object` ([Environment check for NPM](definition.md))\n\n# Environment check for NPM Properties\n\n| Property                            | Type     | Required | Nullable       | Defined by                                                                                                  |\n| :---------------------------------- | :------- | :------- | :------------- | :---------------------------------------------------------------------------------------------------------- |\n| [NPM\\_AUTH\\_TOKEN](#npm_auth_token) | `string` | Required | cannot be null | [Environment check for NPM](definition-properties-npm_auth_token.md \"undefined#/properties/NPM_AUTH_TOKEN\") |\n\n## NPM\\_AUTH\\_TOKEN\n\nNPM authentication token.\n\n`NPM_AUTH_TOKEN`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Environment check for NPM](definition-properties-npm_auth_token.md \"undefined#/properties/NPM_AUTH_TOKEN\")\n\n### NPM\\_AUTH\\_TOKEN Type\n\n`string`\n\n---\n## NPM\\_AUTH\\_TOKEN Type\n\n`string`\n","schematitle":"Environment check for NPM","x":2316,"y":1995,"wires":[["3a58f10bf6055793"]]}]