[{"id":"d0506e991d512ace","type":"tab","label":"[Introspection] Develop Node-RED nodes in Node-RED","disabled":false,"info":"::: aim\n\nCreate a setup whereby I can create, edit and install Node-RED nodes within Node-RED.\n\n:::\n\n::: requirements\n\n- [nodedev node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) that ironically needs this flow.\n\n- For GitHub commits, the repository has to be created and one commit needs to have been done.\n- GITHUB_TOKEN set in the env, details described in the [GitHub Base functionality](https://flowhub.org/f/390ee0021ded4910)\n\n- For NPM publish, there needs to be an env variable `NPM_AUTH_TOKEN` that needs to be defined.\n- For NPM publish, authentication is assumed to be OTP (one time password) and the OTP has to be entered, the flow deployed and then the button pressed. So an OTP with longer expiry might be good.\n\nNpm packages used but will hopefully be installed by Node-RED:\n\n- [libnpmpublish](https://www.npmjs.com/package/libnpmpublish)\n- [tar-stream](https://www.npmjs.com/package/tar-stream)\n- [pako](https://www.npmjs.com/package/pako)\n- [ajv](https://www.npmjs.com/package/ajv)\n\n::: \n\n\n### Assumption\n\nThat the package name is scoped with a username, i.e. `@username/node-red-contrib-XYZ`.\n\nThe registry to publish to is assumed to be `https://registry.npmjs.org`.\n\n::: discussion \n\nIf I want to extend my Emacs, I don't open Vi to create my extensions, I do this in Emacs. I extend Emacs *with* Emacs.\n\nWhy should this be any different in Node-RED? Hence this flow to demonstrate that idea.\n\n:::\n\n::: explanation\n\nWork In Progress.\n\nThis will install a new Node called TarBall for creating tar balls, gzipped. These tarballs can then be installed as new nodes within Node-RED.\n\n:::\n\n### Related flows\n\n- [NodeDev node development](https://flowhub.org/f/b92be5062203ff69)","env":[]},{"id":"aba9a5d741241f1c","type":"group","z":"d0506e991d512ace","name":"entry point","style":{"label":true,"fill":"#c8e7a7","fill-opacity":"0.83"},"nodes":["963dfb765b0d9849"],"x":318.28585720062256,"y":640.2857189178467,"w":82,"h":82},{"id":"84dc95060331b2f1","type":"group","z":"d0506e991d512ace","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["a38e9190036ffc69","19a96d433724fbe5","fe5932e108106566"],"x":254.00005340576172,"y":202.07142639160156,"w":408,"h":130},{"id":"f3879ed58795ea91","type":"group","z":"d0506e991d512ace","name":"example message","style":{"fill":"#addb7b","label":true},"nodes":["9c62729b0ebd76ad"],"x":282.57164764404297,"y":361.2857577800751,"w":332,"h":82},{"id":"d8867a43abe7260c","type":"group","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"Entry points","style":{"fill":"#c8e7a7","fill-opacity":"0.77","label":true},"nodes":["c90bd91e45e1ac7e","43d3a872c31bb664","08d2d7135f31a878","78d886e3f8af26b7","ab95f13fbc3a2d5b","2df1a9a310e8a9fd","dbdea53966e72031","937f9c72251daebf","db7421f5a47b8c6b","dd62847c663f56d7","103190c06a394858"],"x":1811.1430435180664,"y":180.85718536376953,"w":83,"h":590},{"id":"8c02f3fe5cd0a0a9","type":"group","z":"d0506e991d512ace","name":"GitHub API Functionality","style":{"label":true},"nodes":["9ad713be26ac2025","f8774c1c32f1631d","30c0f36427ec6c9d","ef98698a4b696e66","5226230f86c9c784","e68b9f9bac76350a","2b9bbf6e57664c43","c938363b5f63d0b7","eea2441a833743f5","d5567c053d6f5e08","5c01103c8fe0e13c","3efbe319bc36503c","d8867a43abe7260c"],"x":1785.1430435180664,"y":154.85718536376953,"w":879.2855854034424,"h":642},{"id":"893f316ea815e2b1","type":"junction","z":"d0506e991d512ace","x":628.7144581079483,"y":1294.4286041259766,"wires":[["2683d81e8a4b64ab","8b5643cf5e2dccc4","0951d8657919ec86","3e9ac86aba852cdc"]]},{"id":"2683d81e8a4b64ab","type":"switch","z":"d0506e991d512ace","name":"noderedinstall","property":"noderedinstall","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":847.5675964355469,"y":990.9365310668945,"wires":[["3a0d53eb62336e62"]]},{"id":"8b5643cf5e2dccc4","type":"switch","z":"d0506e991d512ace","name":"gitcommit","property":"gitcommit","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1206.174903869629,"y":1187.2434496879578,"wires":[["4b7ff9296a6d9bc0"]]},{"id":"0951d8657919ec86","type":"switch","z":"d0506e991d512ace","name":"npmpublish","property":"npmpublish","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1604.1428985595703,"y":1335.2645816802979,"wires":[["b0cf59b6f0477186"]]},{"id":"b49254be1ffd7f40","type":"function","z":"d0506e991d512ace","name":"prepare tree","func":"msg.payload = msg.contents.map( (elem) => {\n    var newelem = { ...elem};\n    \n    if ( elem.type != \"base64\") {\n        // @ts-ignore\n        newelem.contents = RED.util.ensureBuffer(elem.contents).toString('base64')\n    }\n\n    delete newelem.type;\n    return newelem;\n})\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1206.174903869629,"y":762.2619146108627,"wires":[["b1ad2d6f00cd4476"]]},{"id":"52c9d2dbb39a90ed","type":"change","z":"d0506e991d512ace","name":"owner, repo, branch, author","rules":[{"t":"set","p":"owner","pt":"msg","to":"githubowner","tot":"msg"},{"t":"set","p":"repo","pt":"msg","to":"githubrepo","tot":"msg"},{"t":"set","p":"branch","pt":"msg","to":"githubbranch","tot":"msg"},{"t":"set","p":"author","pt":"msg","to":"{\t    \"name\": $$.githubauthor,\t    \"email\": $$.githubauthoremail\t}","tot":"jsonata"},{"t":"set","p":"message","pt":"msg","to":"commit_message","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1206.174903869629,"y":944.396858215332,"wires":[["8468193a6084d4f4"]]},{"id":"b1ad2d6f00cd4476","type":"split","z":"d0506e991d512ace","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1206.174903869629,"y":701.5502667427063,"wires":[["c37193279bcb55cd"]]},{"id":"66e209a52688542c","type":"link call","z":"d0506e991d512ace","name":"","links":["08d2d7135f31a878"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":580.1269710063934,"wires":[["b522a5152706ad07"]]},{"id":"c37193279bcb55cd","type":"change","z":"d0506e991d512ace","name":"","rules":[{"t":"set","p":"filename","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"payload","pt":"msg","to":"payload.contents","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1206.174903869629,"y":640.8386188745499,"wires":[["66e209a52688542c"]]},{"id":"b522a5152706ad07","type":"change","z":"d0506e991d512ace","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\t    \"path\": $$.filename,\t    \"sha\": $$.payload\t}","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1206.174903869629,"y":519.415323138237,"wires":[["4de77b4ed267a790"]]},{"id":"4de77b4ed267a790","type":"join","z":"d0506e991d512ace","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","reduceRight":false,"x":1206.174903869629,"y":458.70367527008057,"wires":[["da866da706b3a30c"]]},{"id":"da866da706b3a30c","type":"link call","z":"d0506e991d512ace","name":"","links":["78d886e3f8af26b7"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":397.99202740192413,"wires":[["315595ae0c04e23c"]]},{"id":"63b835932b76b439","type":"link call","z":"d0506e991d512ace","name":"","links":["2df1a9a310e8a9fd"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":276.56873166561127,"wires":[["42b6d95993c54b76"]]},{"id":"8468193a6084d4f4","type":"link call","z":"d0506e991d512ace","name":"","links":["c90bd91e45e1ac7e"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":883.6852103471756,"wires":[["bb3ee2c3d46386a3"]]},{"id":"bb3ee2c3d46386a3","type":"change","z":"d0506e991d512ace","name":"","rules":[{"t":"set","p":"parent_sha","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1206.174903869629,"y":822.9735624790192,"wires":[["b49254be1ffd7f40"]]},{"id":"315595ae0c04e23c","type":"link call","z":"d0506e991d512ace","name":"","links":["ab95f13fbc3a2d5b"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":337.2803795337677,"wires":[["63b835932b76b439"]]},{"id":"42b6d95993c54b76","type":"debug","z":"d0506e991d512ace","name":"new github commit revision","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1206.174903869629,"y":215.85708379745483,"wires":[]},{"id":"3e9ac86aba852cdc","type":"switch","z":"d0506e991d512ace","name":"npmunpublish","property":"npmunpublish","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1991.8573837280273,"y":1504.4286575317383,"wires":[["322c935769b095ce"]]},{"id":"1ee5da0dca96b684","type":"debug","z":"d0506e991d512ace","name":"result of npm unpublish","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1991.8573837280273,"y":1221.571538925171,"wires":[]},{"id":"28cf42d94ce33b87","type":"template","z":"d0506e991d512ace","name":"msg - schema","field":"msgschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Basic requirements for this flow.\",\n    \"$id\": \"docid\",\n    \"type\": \"object\",\n    \"required\": [\n        \"noderedinstall\",\n        \"gitcommit\",\n        \"npmpublish\",\n        \"npmunpublish\",\n        \"contents\"\n    ],\n    \"$defs\": {\n        \"content\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"name\",\n                \"contents\"\n            ],\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\",\n                    \"description\": \"Name of the file to be included in the package.\"\n                },\n                \"contents\": {\n                    \"type\": \"string\",\n                    \"description\": \"Contents of the file to be included in the package. Binary data should be encoded in base64.\"\n                },\n                \"type\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value describes the type of the content, default is utf-8.\",\n                    \"enum\": [\"text\", \"utf-8\", \"html\", \"javascript\", \"markdown\", \"json\", \"base64\"]\n                }\n            }            \n        }\n    },\n    \"properties\": {\n        \"noderedinstall\": {\n            \"type\": \"boolean\",\n            \"description\": \"Install the node into Node-RED.\"\n        },\n        \"gitcommit\": {\n            \"type\": \"boolean\",\n            \"description\": \"Perform a GitHub commit with the package files.\"\n        },\n        \"npmpublish\": {\n            \"type\": \"boolean\",\n            \"description\": \"Publish package to NPM.\"\n        },\n        \"npmunpublish\": {\n            \"type\": \"boolean\",\n            \"description\": \"Unpublish package to NPM.\"\n        },\n        \"contents\": {\n            \"type\": \"array\",\n            \"description\": \"Contents of the package, all names should be prefixed with package/. Minimum: LICENSE, README and package.json --> 3.\",\n            \"minItems\": 3,\n            \"items\": {\n                \"$ref\": \"docid#/$defs/content\"\n            }\n        }\n    }\n}","output":"json","x":352.57159423828125,"y":772.1427688598633,"wires":[["53b14ae388748261"]]},{"id":"963dfb765b0d9849","type":"link in","z":"d0506e991d512ace","g":"aba9a5d741241f1c","name":"[nodedev-backend] entry point","links":["240f4b9098531b8e","6713609873f293c7","328f51ddaf7f2798","dca7abf167c0e5dd","d7d542898cd0217b"],"x":359.28585720062256,"y":681.2857189178467,"wires":[["28cf42d94ce33b87"]]},{"id":"2a7132258cbcf313","type":"function","z":"d0506e991d512ace","name":"Package.json validator","func":"/* must have a package.json */\n\nvar pkgjson = msg.contents.filter((d) => {\n    return d.name == \"package.json\"\n});\n\nif ( pkgjson.length != 1 ) {\n    if ( pkgjson.length > 1 ) {\n      node.error(\"multiple package.json files found\", msg)\n    } else {\n      node.error(\"no package.json file found\", msg)\n    }\n    node.done();\n    return;\n}\n\n/* name must be scoped */\n\nvar manifest = JSON.parse(pkgjson[0].contents);\n\nvar pdetails = manifest.name.split(\"/\")\n\nif (pdetails.length < 2 || pdetails[0][0] != '@') {\n    node.error(\"package name not scoped: \" + manifest.name, msg)\n    node.done();\n    return\n}\n\n/* ensure contents is not empty */\n\nmsg.contents.forEach( (d) => {\n  if ( !d.contents || d.contents.trim() == \"\" ) {\n    node.error(\"file empty: \" + d.name, msg)\n    node.done();\n    return\n  }\n});\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"Ajv","module":"ajv"}],"x":355.14305877685547,"y":908.999942779541,"wires":[["893f316ea815e2b1"]],"outputLabels":["ok"]},{"id":"4b7ff9296a6d9bc0","type":"template","z":"d0506e991d512ace","name":"msg - schema","field":"msgschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Propperties required on the msg for GitHub commit.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"commit_message\",\n        \"githubowner\",\n        \"githubrepo\",\n        \"githubbranch\",\n        \"githubauthor\",\n        \"githubauthoremail\"\n    ],\n    \"properties\": {\n        \"commit_message\": {\n            \"type\": \"string\",\n            \"description\": \"Message for the commit.\"\n        },\n        \"githubowner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username.\"\n        },\n        \"githubrepo\": {\n            \"type\": \"string\",\n            \"description\": \"Repository upon which we are acting.\"\n        },\n        \"githubbranch\": {\n            \"type\": \"string\",\n            \"description\": \"The branch on which the commit should be done.\"\n        },\n        \"githubauthor\": {\n            \"type\": \"string\",\n            \"description\": \"Full name of the author of the commit.\"\n        },\n        \"githubauthoremail\": {\n            \"type\": \"string\",\n            \"description\": \"Email of the author for the commit message.\"\n        }\n    }\n}","output":"json","x":1206.174903869629,"y":1126.5318018198013,"wires":[["2b7d94607f1d3dc4"]]},{"id":"2b7d94607f1d3dc4","type":"template","z":"d0506e991d512ace","name":"env - schema","field":"envschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Environment check for GitHub\",\n    \"type\": \"object\",\n    \"required\": [\n        \"GITHUB_TOKEN\"\n    ],\n    \"properties\": {\n        \"GITHUB_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub authentication token.\"\n        }\n    }\n}\n","output":"json","x":1206.174903869629,"y":1065.820153951645,"wires":[["4ab72fdeb28fb58a"]]},{"id":"7b3964f488b8b6f5","type":"template","z":"d0506e991d512ace","name":"env - schema","field":"envschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Environment check for NPM\",\n    \"type\": \"object\",\n    \"required\": [\n        \"NPM_AUTH_TOKEN\"\n    ],\n    \"properties\": {\n        \"NPM_AUTH_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"NPM authentication token.\"\n        }\n    }\n}\n","output":"json","x":1991.8573837280273,"y":1391.2858100891115,"wires":[["7eab30457112c8db"]]},{"id":"8bf5f88c81fb6681","type":"template","z":"d0506e991d512ace","name":"env - schema","field":"envschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"Environment check for NPM\",\n    \"type\": \"object\",\n    \"required\": [\n        \"NPM_AUTH_TOKEN\"\n    ],\n    \"properties\": {\n        \"NPM_AUTH_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"NPM authentication token.\"\n        }\n    }\n}\n","output":"json","x":1604.1428985595703,"y":1225.4621092478433,"wires":[["5e2d73c95dbfae8c"]]},{"id":"a38e9190036ffc69","type":"function","z":"d0506e991d512ace","g":"84dc95060331b2f1","name":"JSON Schema validator","func":"var validator = new Ajv({\n    allErrors: true,\n    messages: true,\n    allowUnionTypes: true\n})\n\nvar validate;\nvar result;\n\n/* First validate the msg object */\n\nif (msg.msgschema) {\n    validate = validator.compile(msg.msgschema)\n\n    result = validate(msg);\n\n    if (!result) {\n        msg.errors = validate.errors;\n        node.error(\"msg validation failed\", msg)\n        node.done();\n        return;\n    } else {\n        delete msg.msgschema;\n    }\n}\n\n/* validate the environment */\n\nif (msg.envschema) {\n    validate = validator.compile(msg.envschema)\n\n    result = validate(process.env);\n\n    if (!result) {\n        msg.errors = validate.errors;\n        node.error(\"env validation failed\", msg)\n        node.done();\n        return;\n    } else {\n        delete msg.envschema;\n    }\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"Ajv","module":"ajv"},{"var":"process","module":"process"}],"x":457.0000534057617,"y":291.07142639160156,"wires":[["fe5932e108106566"]],"outputLabels":["ok"]},{"id":"19a96d433724fbe5","type":"link in","z":"d0506e991d512ace","g":"84dc95060331b2f1","name":"[schema] validator","links":[],"x":295.0000534057617,"y":243.07142639160156,"wires":[["a38e9190036ffc69"]]},{"id":"fe5932e108106566","type":"link out","z":"d0506e991d512ace","g":"84dc95060331b2f1","name":"link out 114","mode":"return","links":[],"x":621.0000534057617,"y":243.07142639160156,"wires":[]},{"id":"53b14ae388748261","type":"link call","z":"d0506e991d512ace","name":"","links":["19a96d433724fbe5"],"linkType":"static","timeout":"30","x":347.28588104248047,"y":836.4284725189209,"wires":[["2a7132258cbcf313"]]},{"id":"4ab72fdeb28fb58a","type":"link call","z":"d0506e991d512ace","name":"","links":["19a96d433724fbe5"],"linkType":"static","timeout":"30","x":1206.174903869629,"y":1005.1085060834885,"wires":[["52c9d2dbb39a90ed"]]},{"id":"5e2d73c95dbfae8c","type":"link call","z":"d0506e991d512ace","name":"","links":["19a96d433724fbe5"],"linkType":"static","timeout":"30","x":1604.1428985595703,"y":1170.5608730316162,"wires":[["fbe982a35d27d99b"]]},{"id":"7eab30457112c8db","type":"link call","z":"d0506e991d512ace","name":"","links":["19a96d433724fbe5"],"linkType":"static","timeout":"30","x":1991.8573837280273,"y":1334.714386367798,"wires":[["3f9377f9c6c4572b"]]},{"id":"b0cf59b6f0477186","type":"template","z":"d0506e991d512ace","name":"msg - schema","field":"msgschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"NPM requires an OTP\",\n    \"type\": \"object\",\n    \"required\": [\n        \"npmotp\"\n    ],\n    \"properties\": {\n        \"npmotp\": {\n            \"type\": \"string\",\n            \"description\": \"One Time Password for NPM.\"\n        }\n    }\n}","output":"json","x":1604.1428985595703,"y":1280.3633454640706,"wires":[["8bf5f88c81fb6681"]]},{"id":"322c935769b095ce","type":"template","z":"d0506e991d512ace","name":"msg - schema","field":"msgschema","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"title\": \"NPM requires an OTP\",\n    \"type\": \"object\",\n    \"required\": [\n        \"npmotp\"\n    ],\n    \"properties\": {\n        \"npmotp\": {\n            \"type\": \"string\",\n            \"description\": \"One Time Password for NPM.\"\n        }\n    }\n}","output":"json","x":1991.8573837280273,"y":1447.857233810425,"wires":[["7b3964f488b8b6f5"]]},{"id":"8d90825de93a4fa0","type":"catch","z":"d0506e991d512ace","name":"","scope":null,"uncaught":false,"x":316.0000534057617,"y":166.57142639160156,"wires":[["750dfdf64f5d1216"]]},{"id":"750dfdf64f5d1216","type":"debug","z":"d0506e991d512ace","name":"Exceptions Will Happen","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":552.0000534057617,"y":166.57142639160156,"wires":[]},{"id":"9c62729b0ebd76ad","type":"inject","z":"d0506e991d512ace","g":"f3879ed58795ea91","name":"example contents for message","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-nodedev","vt":"str"},{"p":"pversion","v":"0.0.3","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-nodedev","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"nice commit message","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"npmotp","v":"123456","vt":"str"},{"p":"contents","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":458.57164764404297,"y":402.2857577800751,"wires":[[]]},{"id":"f07d2d09465ca725","type":"NodeRedInstall","z":"d0506e991d512ace","name":"","x":844.7103576660156,"y":870.1427268981934,"wires":[[]]},{"id":"3a0d53eb62336e62","type":"NpmTarBall","z":"d0506e991d512ace","name":"","x":844.7103576660156,"y":930.539628982544,"wires":[["f07d2d09465ca725"]]},{"id":"fbe982a35d27d99b","type":"NpmTarBall","z":"d0506e991d512ace","name":"","x":1604.1428985595703,"y":1115.659636815389,"wires":[["33093265f4dfec9d"]]},{"id":"33093265f4dfec9d","type":"NpmPublish","z":"d0506e991d512ace","name":"","otp":"","action":"publish","authToken":"NPM_AUTH_TOKEN","authTokenType":"env","x":1604.1428985595703,"y":1060.7584005991616,"wires":[["2f4b14f27919dfab"]]},{"id":"2f4b14f27919dfab","type":"debug","z":"d0506e991d512ace","name":"result of npm publish","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1604.1428985595703,"y":1005.8571643829346,"wires":[]},{"id":"3f9377f9c6c4572b","type":"NpmPublish","z":"d0506e991d512ace","name":"Npm Unpublish","otp":"","action":"unpublish","authToken":"NPM_AUTH_TOKEN","authTokenType":"env","x":1991.8573837280273,"y":1278.1429626464844,"wires":[["1ee5da0dca96b684"]]},{"id":"9ad713be26ac2025","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":475.2144079208374,"wires":[["30c0f36427ec6c9d"]]},{"id":"f8774c1c32f1631d","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"current repo revision (sha)","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: branch name\n * \n * Return:\n *   - payload: current revision of repo\n * \n * Source:\n *   - https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/branches/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.commit.sha})\n    }).catch(function (e) {\n        node.error(\"obtaining latest sha\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":321.5715103149414,"wires":[["30c0f36427ec6c9d"]]},{"id":"c90bd91e45e1ac7e","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] current repo version","links":[],"x":1852.1430435180664,"y":323.45718536376944,"wires":[["f8774c1c32f1631d"]]},{"id":"30c0f36427ec6c9d","type":"link out","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"link out 91","mode":"return","links":[],"x":2623.428628921509,"y":439.85712242126465,"wires":[]},{"id":"43d3a872c31bb664","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get tree for sha","links":[],"x":1852.1430435180664,"y":475.85718536376953,"wires":[["9ad713be26ac2025"]]},{"id":"ef98698a4b696e66","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create blob","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: base64 encoded content for blob\n * \n * Return:\n *   - payload: sha of newly created blob\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/blobs\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        content: msg.payload,\n        encoding: \"base64\"\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.sha})\n    }).catch(function (e) {\n        node.error(\"creating blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":526.4287071228027,"wires":[["30c0f36427ec6c9d"]]},{"id":"5226230f86c9c784","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create tree for blobs","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: array of blobs, each blob is an object with:\n *         - path: filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n *         - sha: the sha of the blob created initially using the create blob function\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n * \n * Return:\n *   - payload: sha of newly created tree\n */\n\ntry {\n    var tree = msg.payload.map(function(blb){\n        return {\n            ...blb,\n            mode: \"100644\",\n            type: \"blob\"\n        }\n    });\n\n    octokit.request(\"POST /repos/:owner/:repo/git/trees\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        base_tree: msg.parent_sha,\n        tree: tree\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n    \n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":577.6430063247681,"wires":[["30c0f36427ec6c9d"]]},{"id":"e68b9f9bac76350a","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: the sha of the tree to commit\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n *   - author: an object with the following:\n *      - name: name of the author of the commit\n *      - email: email of the author of the commit\n *   - message: commit message\n * \n * Return:\n *   - payload: sha of newly commit\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,        \n        message: msg.message,\n        author: {\n            name: msg.author.name,\n            email: msg.author.email\n        },\n        parents: [\n            msg.parent_sha\n        ],\n        tree: msg.payload\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":628.8573055267334,"wires":[["30c0f36427ec6c9d"]]},{"id":"08d2d7135f31a878","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create blobs","links":[],"x":1852.1430435180664,"y":526.6571853637697,"wires":[["ef98698a4b696e66"]]},{"id":"78d886e3f8af26b7","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create tree from blobs","links":[],"x":1852.1430435180664,"y":577.4571853637694,"wires":[["5226230f86c9c784"]]},{"id":"ab95f13fbc3a2d5b","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create commit","links":[],"x":1852.1430435180664,"y":628.2571853637696,"wires":[["e68b9f9bac76350a"]]},{"id":"2df1a9a310e8a9fd","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] update branch head","links":[],"x":1852.1430435180664,"y":729.8571853637695,"wires":[["eea2441a833743f5"]]},{"id":"2b9bbf6e57664c43","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get commits for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha for which the commits are desired\n * \n * Return:\n *   - payload: commits for sha\n * \n * Source: https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#get-a-commit-object\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/commits/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":372.78580951690674,"wires":[["30c0f36427ec6c9d"]]},{"id":"dbdea53966e72031","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get commits for sha","links":[],"x":1852.1430435180664,"y":374.2571853637696,"wires":[["2b9bbf6e57664c43"]]},{"id":"c938363b5f63d0b7","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get blob for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: file sha for which the contents are desired\n * \n * Return:\n *   - payload: base64 contents in a hash object\n * \n *  Source: https://docs.github.com/en/rest/git/blobs?apiVersion=2022-11-28#get-a-blob\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/blobs/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":424.00010871887207,"wires":[["30c0f36427ec6c9d"]]},{"id":"937f9c72251daebf","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get blob for sha","links":[],"x":1852.1430435180664,"y":425.0571853637696,"wires":[["c938363b5f63d0b7"]]},{"id":"eea2441a833743f5","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"updating head on repo at branch - aka committing commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github repo branch to update with the new commit sha\n *   - payload: the sha of the commit created\n * \n * Return:\n *   - payload: new sha of the branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference\n */\n\ntry {\n    msg.new_commit_sha = msg.payload;\n\n    octokit.request(\"PATCH /repos/:owner/:repo/git/refs/heads/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n        sha: msg.payload\n    }).then(function (resp) {\n        node.send({ \n            ...msg, \n            payload: resp.data.object.sha,\n        })\n    }).catch(function (e) {\n        node.error(\"committing commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":731.2859039306641,"wires":[["30c0f36427ec6c9d"]]},{"id":"d5567c053d6f5e08","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"create branch","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: name for the new branch\n *   - payload: the commit sha to which the branch should point\n * \n * Return:\n *   - payload: sha of newly created branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/refs\", {\n        owner: msg.owner,\n        repo:  msg.repo,\n        ref:   \"refs/heads/\" + msg.branch,\n        sha:   msg.payload        \n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.object.sha })\n    }).catch(function (e) {\n        node.error(\"creating branch\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":680.0716047286987,"wires":[["30c0f36427ec6c9d"]]},{"id":"db7421f5a47b8c6b","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] create branch","links":[],"x":1852.1430435180664,"y":679.0571853637693,"wires":[["d5567c053d6f5e08"]]},{"id":"5c01103c8fe0e13c","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get commits for repo","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - page: page number, per_page = 100 commits\n * \n * Return:\n *   - commits: list of commits (max. 100)\n * \n * Source: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-commits\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        per_page: 100,\n        page: msg.page\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":270.3572111129761,"wires":[["30c0f36427ec6c9d"]]},{"id":"dd62847c663f56d7","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] get repo commits","links":[],"x":1852.1430435180664,"y":272.6571853637695,"wires":[["5c01103c8fe0e13c"]]},{"id":"3efbe319bc36503c","type":"function","z":"d0506e991d512ace","g":"8c02f3fe5cd0a0a9","name":"get ratelimit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n * \n * Return:\n *   - ratelimits in the header\n * \n * Source: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limit-headers\n */\n\ntry {\n\n    octokit.request(\"GET /rate_limit\", {\n        owner: msg.owner,\n    }).then((resp) => {\n        node.send({\n            ...msg, payload: Object.keys(resp.headers).filter((d) => {\n                return d.startsWith(\"x-ratelimit\")\n            }).map((k) => {\n                return [k, resp.headers[k]]\n            }).reduce((o, c) => {\n                o[c[0]] = c[1]\n                return o\n            }, {})\n        })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":2214.285987854004,"y":219.14291191101074,"wires":[["30c0f36427ec6c9d"]]},{"id":"103190c06a394858","type":"link in","z":"d0506e991d512ace","g":"d8867a43abe7260c","name":"[github] ratelimit status","links":[],"x":1852.1430435180664,"y":221.85718536376953,"wires":[["3efbe319bc36503c"]]}]