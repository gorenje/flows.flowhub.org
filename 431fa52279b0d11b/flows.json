[{"id":"431fa52279b0d11b","type":"tab","label":"Node-RED Learnings: what is empty and what is not empty?","disabled":false,"info":"::: aim\n\nLearning: *is* is not the opposite of *is not*\n\n:::\n\n### Explanation\n\nI was playing around with a function I had written that filters out undefiend or null payloads:\n\n```javascript\nmsg.payload = msg.payload.filter( function (d){\n    return d\n});\n```\n\nThis was between a join that generated the payload array and a split, I wanted to remove the empties before doing the split. I began to think about how I could do this better by putting a switch after the split to drop empty payloads before the join but then the the [join won't collect all payloads again](https://flowhub.org/f/1cf772ae2066495e). \n\nSo I began thinking about how to implement the filter function using a switch node and came across something that hit my logical nerve.\n\nUsing the following <a class=\"ahl-node-only\" data-ids=\"f0f0f2c4e0cd2003\">original payload</a>:\n\n```javascript\nmsg.payload = [\n    null,\n    undefined,\n    false,\n    true,\n    [],\n    \"\",\n    {},\n    1,\n    2,\n    [\"notempty\"],\n    { empty: \"not\" }\n]\n```\n\nThe <a class=\"ahl-node-only\" data-ids=\"82e93f8d600ac779\">first filter</a> reduced that list to:\n\n```javascript\nmsg.payload = [\n    false,\n    true,\n    [],\n    \"\",\n    {},\n    1,\n    2,\n    [\"notempty\"],\n    { empty: \"not\" }\n]\n```\n\nThe <a class=\"ahl-node-only\" data-ids=\"0ae7fef5e60095a4\">second filter</a> surprised me. It uses \"is empty\" and \"is not empty\", what surprised me was that \"is empty\" is not the opposite of \"is not empty\", i.e. if something is *not* empty then, for me, it must come out of \"is not empty\" part of the switch but that that is not the case:\n\nWhat comes out of the \"is empty\":\n\n```javascript\nmsg.payload = [\n    [],\n    \"\",\n    {},\n]\n```\n\nWhat comes out of the \"is not empty\":\n\n```javascript\nmsg.payload = [\n    [\"notempty\"],\n    { empty: \"not\" }\n]\n```\n\nAnd what comes out of the \"otherwise\":\n\n```javascript\nmsg.payload = [\n    false,\n    true,\n    1,\n    2,\n]\n```\n\nThis surprised me because the first filter dropped only null or undefined and *let everything else* through, i.e., yes or no. But with *is empty* and *is not empty* it's yes, no and maybe, i.e., not black and white!\n\nPerhaps a little pedantic from me but it's my logical nerve!\n\n","env":[]},{"id":"73324a3e7991ae0b","type":"group","z":"431fa52279b0d11b","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["f0f0f2c4e0cd2003","9c337f7a37378ce7","f428b2a8b9e5e30f","3b3cbc9bbc4e3e2a","82e93f8d600ac779","0ae7fef5e60095a4","369385bd9fec55ec","1a556e3859d85d94","3c549afbe7e9778d"],"x":117,"y":247.25,"w":1169,"h":353},{"id":"f0f0f2c4e0cd2003","type":"function","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"payload","func":"msg.payload = [\n    null,\n    undefined,\n    false,\n    true,\n    [],\n    \"\",\n    {},\n    1,\n    2,\n    [\"notempty\"],\n    { empty: \"not\" }\n]\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":357,"y":364,"wires":[["9c337f7a37378ce7"]]},{"id":"9c337f7a37378ce7","type":"split","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"complete","x":496,"y":288.25,"wires":[["82e93f8d600ac779"]]},{"id":"f428b2a8b9e5e30f","type":"debug","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"is empty","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1159,"y":321.25,"wires":[]},{"id":"3b3cbc9bbc4e3e2a","type":"inject","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":223,"y":462.25,"wires":[["f0f0f2c4e0cd2003"]]},{"id":"82e93f8d600ac779","type":"switch","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"drop null or undefined payloads","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":536,"y":471.25,"wires":[["0ae7fef5e60095a4","369385bd9fec55ec"]]},{"id":"0ae7fef5e60095a4","type":"switch","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"what \"is empty\" and what \"is not empty\"","property":"payload","propertyType":"msg","rules":[{"t":"empty"},{"t":"nempty"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":876,"y":392.25,"wires":[["f428b2a8b9e5e30f"],["1a556e3859d85d94"],["3c549afbe7e9778d"]]},{"id":"369385bd9fec55ec","type":"debug","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"all things not nul nor undefined","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":851,"y":559.25,"wires":[]},{"id":"1a556e3859d85d94","type":"debug","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"is not empty","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1170,"y":392.25,"wires":[]},{"id":"3c549afbe7e9778d","type":"debug","z":"431fa52279b0d11b","g":"73324a3e7991ae0b","name":"otherwise","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1162,"y":460.25,"wires":[]}]