[{"id":"b3d8d3a926ff80e7","type":"tab","label":"[NodeDev] Sidebar Auto Alignment","disabled":false,"info":"### Description\n\n***Work in Progress***\n\nThis flow supports the collaborative work of [@bartbutenaers](https://github.com/bartbutenaers) and [@gorenje](https://github.com/gorenje) on the [autolayout sidebar Node-RED node](https://github.com/bartbutenaers/node-red-autolayout-sidebar).\n\nUsing the flow, I am trying to figure out how pull requests, git branches and updates can be handled using a Node-RED integrated workflow.\n\nAt the moment, I am the sole user of this flow but in the long term, it could be simpler to use a flow than using GitHub pull requests - but the depends on the tooling.\n\n","env":[]},{"id":"9aadf96d044f4e45","type":"group","z":"b3d8d3a926ff80e7","name":"Step 1: Install development flow","style":{"label":true},"nodes":["644111e08dbf3cfd"],"x":165,"y":167,"w":472,"h":82},{"id":"7a5004788641fa72","type":"group","z":"b3d8d3a926ff80e7","name":"Obtain codebase","style":{"label":true},"nodes":["ea7b1b985ba6ac70","96278268709caba6","11289b70b58c767b","d981181116ccfb16","fc620efcbaf77846"],"x":114,"y":1042.7142333984375,"w":536.857177734375,"h":454.2857666015625},{"id":"f46162b8c86ae48c","type":"group","z":"b3d8d3a926ff80e7","name":"original v.0.0.2","style":{"label":true},"nodes":["47125d283722c23b","8c11b91834babddd","1d0df67f8e9a3a43","1ed582fbcacceede","70017102103439f0","5b051ae43c8fa960"],"x":820,"y":1122,"w":272,"h":332},{"id":"e0c3f18adc6bcba2","type":"group","z":"b3d8d3a926ff80e7","name":"original version 0.0.3","style":{"label":true},"nodes":["d8c653e62c18acd7","4a5ab62640b32452","dca516236aa21eef","0faee7972091bb8c","b1a2da70219bf0d2","c6cf942a79e1c1c2"],"x":1177,"y":1122,"w":272,"h":332},{"id":"86b00ff4227eb539","type":"NodeDevOps","z":"b3d8d3a926ff80e7","name":"","pname":"@bartbutenaers/node-red-autolayout-sidebar","pversion":"0.0.3","pauthorname":"Bart Butenaers","pauthoremail":"bart.butenaers@gmail.com","pdescription":"A sidebar plugin for Node-RED to offer auto-layouting","noderedinstall":true,"randompackagename":false,"ignore_package_check":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-autolayout-sidebar","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"version bump to 0.0.3","npmpublish":false,"npmunpublish":false,"npmotp":"111999","x":281,"y":393,"wires":[["7e5f64eaa8684e78"]]},{"id":"032b6dda18bca33c","type":"link out","z":"b3d8d3a926ff80e7","name":"link out 118","mode":"link","links":["963dfb765b0d9849"],"x":1541,"y":695,"wires":[]},{"id":"ea7b1b985ba6ac70","type":"NodeFactory","z":"b3d8d3a926ff80e7","g":"7a5004788641fa72","name":"","nodename":"WillBeIgnored","color":"#e5e4ef","hasbutton":false,"hasinput":true,"outputcount":1,"category":"","summary":"WillBeIgnored","description":"WillBeIgnored","icon":"font-awesome/fa-industry","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":false,"isplugin":false,"x":554.857177734375,"y":1456,"wires":[[]]},{"id":"96278268709caba6","type":"function","z":"b3d8d3a926ff80e7","g":"7a5004788641fa72","name":"retrieve tgz URL for package","func":"pacote.manifest(\n    msg.packagename + \"@\" + msg.packageversion\n).then(manifest => {\n    msg.payload = manifest._resolved\n    node.send(msg)\n}).catch( err => {\n    msg.error = err\n    node.error(\"failed to get url\", msg)\n})\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"pacote","module":"pacote"}],"x":462,"y":1250.7142333984375,"wires":[["fc620efcbaf77846"]]},{"id":"11289b70b58c767b","type":"inject","z":"b3d8d3a926ff80e7","g":"7a5004788641fa72","name":"inject package details","props":[{"p":"packagename","v":"@bartbutenaers/node-red-autolayout-sidebar","vt":"str"},{"p":"packageversion","v":"0.0.3","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":260,"y":1083.7142333984375,"wires":[["96278268709caba6"]]},{"id":"d981181116ccfb16","type":"http request","z":"b3d8d3a926ff80e7","g":"7a5004788641fa72","name":"","method":"GET","ret":"bin","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":507,"y":1378.7142333984375,"wires":[["ea7b1b985ba6ac70"]]},{"id":"fc620efcbaf77846","type":"change","z":"b3d8d3a926ff80e7","g":"7a5004788641fa72","name":"","rules":[{"t":"set","p":"url","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":485,"y":1317.7142333984375,"wires":[["d981181116ccfb16"]]},{"id":"644111e08dbf3cfd","type":"FlowHubPull","z":"b3d8d3a926ff80e7","g":"9aadf96d044f4e45","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":401,"y":208,"wires":[[]]},{"id":"47125d283722c23b","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","output":"str","x":956,"y":1163,"wires":[["8c11b91834babddd"]]},{"id":"8c11b91834babddd","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"auto_layout_config.html","filename":"auto_layout_config.html","format":"html","syntax":"mustache","template":"<!--\r\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<script type=\"text/javascript\">\r\n(function ($) {\r\n    RED.nodes.registerType('auto_layout_config', {\r\n        category: 'config',\r\n        hasUsers: false,\r\n        defaults: {\r\n            name: { value: \"AutoLayout\" },\r\n            algorithm: { value: \"dagre_lr\" },\r\n            settings: { value: {} }\r\n        },\r\n        paletteLabel: 'AutoLayout',\r\n        label: function () {\r\n            return this.name;\r\n        }\r\n    });\r\n})(jQuery);\r\n</script>\r\n\r\n<!-- The html for the config node does NOT include input fields, because the data only arrives from user input in the sidebar screen. -->\r\n<script type=\"text/x-red\" data-template-name=\"auto_layout_config\">\r\n    <div class=\"form-tips\">This config node is read-only, because it stores the information entered in the 'Auto Layout' sidebar.</div>\r\n</script>\r\n\r\n<script type=\"text/x-red\" data-help-name=\"auto_layout_config\">\r\n    <p>Configuration for the 'Auto Layout' sidebar.</p>\r\n</script>\r\n","output":"str","x":956,"y":1213,"wires":[["1d0df67f8e9a3a43"]]},{"id":"1d0df67f8e9a3a43","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"auto_layout_plugin.html","filename":"auto_layout_plugin.html","format":"html","syntax":"mustache","template":"<!--\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<script src=\"auto_layout_config/lib/elkjs\"></script>\n<script src=\"auto_layout_config/lib/dagrejs\"></script>\n\n<script type=\"text/javascript\">\n(function() {\n    var globalAutoLayoutConfigNode = null;\n    \n    function findSelectedNodes(/*thisNode*/) {\n        /*\n         * Take the selection and create a nodeset from it.\n         */\n        var selection = RED.view.selection();\n        var fixedNodeId = undefined;\n        var ns = undefined;\n\n        if (!selection.nodes || selection.nodes.length == 0) {\n            RED.notify(\"Select exactly one node.\");\n            return;\n        }\n\n        if ( selection.nodes.length == 1 ) {\n            // This is not applicable for the sidebar plugin\n            //if (selection.nodes[0].id == thisNode.id || selection.nodes[0].type == thisNode.type) {\n            //    RED.notify(\"Please do not select the align node.\");\n            //    return;\n            //}\n\n            if ( selection.nodes[0].type == \"group\") {\n                ns = RED.group.getNodes(selection.nodes[0])\n                if ( ns.length == 0 ) {\n                    RED.notify(\"Empty group selected, very funny.\");\n                    return;\n                }\n                fixedNodeId = ns[0].id;\n            } else {\n                ns = RED.nodes.getAllFlowNodes(selection.nodes[0])\n                fixedNodeId = selection.nodes[0].id;\n            }\n        }\n\n        if ( selection.nodes.length > 1 ) {\n            ns = []\n            for ( var idx = 0 ; idx < selection.nodes.length ; idx++ ) {\n                if ( selection.nodes[idx].type == \"group\") {\n                    ns = ns.concat(RED.group.getNodes(selection.nodes[idx]))\n                } else {\n                    ns.push(selection.nodes[idx])\n                    fixedNodeId ||= selection.nodes[idx].id;\n                }\n          }\n\n          fixedNodeId ||= ns[0].id;\n        }\n\n        if ( !ns ) {\n            RED.notify(\"No nodes selected.\");\n            return;\n        }\n\n        /* \n         * From here it's all nodeset based.\n         */\n\n        // Convert nodes to flows.json format since all the wires, i.e. links, are \n        // contained in one simple json format.\n        var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n            return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n        });\n\n        var alledges = [];\n        var allNodeIds = allnodes.map( d => d.id);\n\n        allnodes.forEach((n) => {\n            // Only continue if the node has wires (e.g. a ui_group has no wires)\n            if (n.wires) {\n                for (var widx = 0; widx < (n.wires || []).length; widx++) {\n                    for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                        if ( allNodeIds.indexOf(n.wires[widx][xidx])> -1){\n                            alledges.push({\n                                id: n.id + n.wires[widx][xidx],\n                                sources: [n.id],\n                                targets: [n.wires[widx][xidx]]\n                            });\n                        }\n                    }\n                }\n            }\n        })\n\n        allnodes = allnodes.map((n) => {\n            let bbox = ( ( document.getElementById(n.id) && document.getElementById(n.id).getBBox && document.getElementById(n.id) ) || {\n              getBBox: () => {\n                return {\n                  width: 0,\n                  height: 0\n                }\n              }\n            });\n\n            return {\n                id: n.id,\n                width: bbox.getBBox().width + 3,\n                height: bbox.getBBox().height + 3,\n            }\n        });\n\n        return {\n            allnodes: allnodes,\n            alledges: alledges,\n            fixedNodeId: fixedNodeId\n        };\n    }\n    \n    function moveNodes(fixedNodeId, children) {\n        //var children = payload.nodes;\n        //var fixedNodeId = payload.fixedNodeId;\n\n        var changedNodes = [];\n\n        // Before moving anything we get the offset (x,y) - this is the amount that our\n        // fixed Node moved - our fixed node does not move, this means everything is offset\n        // by the distance it moved.\n        var offsetX = 0;\n        var offsetY = 0;\n        children.forEach((c) => {\n            if (c.id == fixedNodeId) {\n                var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n                offsetX = c.x - nd.x;\n                offsetY = c.y - nd.y;\n            }\n        });\n\n        children.forEach((c) => {\n            var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n\n            changedNodes.push({\n                n: nd,\n                ox: nd.x,\n                oy: nd.y,\n                moved: nd.moved\n            });\n\n            nd.x = c.x - offsetX;\n            nd.y = c.y - offsetY;\n            nd.dirty = true;\n        });\n\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n    \n    function getDefaultSettings() {\n        return {\n            \"dagre_lr\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 20,\n                \"marginy\": 20,\n                \"nodesep\": 30,\n                \"ranksep\": 50\n            },\n            \"dagre_longest_path\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 2,\n                \"marginy\": 2,\n                \"ranker\": \"longest-path\",\n                \"nodesep\": 2,\n                \"ranksep\": 2\n            },\n            \"elkjs_mr_tree\": {\n                \"algorithm\": \"mrtree\",\n                \"childAreaHeight\": 4500,\n                \"childAreaWidth\": 4500,\n                \"org.eclipse.elk.direction\": \"RIGHT\"\n            },\n            \"elkjs_layered_upwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"UP\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15,\n                \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n                \"elk.layered.spacing.edgeNodeBetweenLayers\": 40,\n                \"elk.layered.nodePlacement.bk.fixedAlignment\": \"BALANCED\",\n                \"layering.layerConstraint\": \"FIRST\"\n            },\n            \"elkjs_layered_downwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"DOWN\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15\n            },\n            \"elkjs_box\": {\n                \"algorithm\": \"org.eclipse.elk.box\",\n                \"childAreaHeight\": 3000,\n                \"childAreaWidth\": 3000\n            },\n            \"pull_request_2267\": {\n                // TODO\n            }\n        }\n    }\n  \n    // Ensure that the globalAutoLayoutConfigNode (still) exists, because the user might have deleted it meanwhile...\n    // !!!!!!!!!!!!!!! CALL THIS FUNCTION EVERYWHERE THE globalAutoLayoutConfigNode IS BEING USED !!!!!!!!!!!!!!!\n    function ensureAutoLayoutConfigNode() {\n        // If we had found it previously, check if it has been deleted by the user behind our back\n        if (globalAutoLayoutConfigNode !== null) {\n            var configNode = RED.nodes.node(globalAutoLayoutConfigNode.id);\n            if (configNode === null) { globalAutoLayoutConfigNode = null; }\n        }\n\n        // If not found previously, let's go find it\n        if (globalAutoLayoutConfigNode === null) {\n            var configNodes = [];\n            console.log(\"=======================> HIER configNodes via eachConfig nodig\")\n            RED.nodes.eachConfig(function(configNode) {\n                if (configNode.type === 'auto_layout_config') { \n                    configNodes.push(configNode); \n                }\n            });\n\n            // Make sure we only have 1 config node\n            while (configNodes.length > 1) {\n                var configNode = configNodes.pop();\n                RED.nodes.remove(configNode.id);\n                RED.nodes.dirty(true);\n            }\n\n            // When we found a config node, let's use that one\n            if (configNodes.length === 1) { globalAutoLayoutConfigNode = configNodes[0]; }\n        }\n\n        // When it doesn't exist yet, create it if required\n        if (globalAutoLayoutConfigNode === null) {\n            // TODO controleren of de defaults door de config node code zelf toegepast worden????\n\n            // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n            // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n            // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n            // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n            globalAutoLayoutConfigNode = {\n                id: RED.nodes.id(),\n                _def: RED.nodes.getType(\"auto_layout_config\"),\n                type: \"auto_layout_config\",\n                hasUsers: false, \n                users: [],\n                // TODO default values for all properties\n                name: \"AutoLayout\",\n                label: function() { return this.name || \"AutoLayout\"},\n                algorithm: \"dagre_lr\", // Default algorithm\n                settings: JSON.stringify(getDefaultSettings()) // Start with the default settings per algorithm\n            }\n\n            // Add the new config node to the collection of Node-RED nodes\n            RED.nodes.add(globalAutoLayoutConfigNode);\n\n            // Make sure the \"Deploy\" button becomes active\n            RED.nodes.dirty(true);\n        }\n    }\n\n    function executeAutoLayout() {\n        ensureAutoLayoutConfigNode();\n\n        let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n        let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n        let selection = findSelectedNodes();\n\n        if (!selection) {\n            return;\n        }\n\n        switch(currentAlgorithm) {\n            case \"dagre_lr\":\n            case \"dagre_longest_path\":\n                // Code take from https://pastebin.com/TJRFD3mg\n                // Which came from https://discourse.nodered.org/t/read-flows-json-and-position-the-nodes-in-most-efficient-readable-way/78158/12\n                var g = new dagre.graphlib.Graph();\n                g.setGraph(currentAlgorithmSettings);\n                g.setDefaultEdgeLabel(function () { return {}; });                       \n\n                for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                    var n = selection.allnodes[idx];\n                    g.setNode(n.id, {\n                        ...n,\n                    })\n                }\n                \n                // The above loop can be replaced by :\n                // for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                //     var node = selection.allnodes[idx];\n                //     var clonedNode = Object.assign({}, node);\n                //     g.setNode(n.id, clonedNode);\n                // }\n\n\n                for (var idx = 0; idx < selection.alledges.length; idx++) {\n                    var e = selection.alledges[idx];\n                    g.setEdge(e.sources[0], e.targets[0])\n                }\n\n                dagre.layout(g);\n                \n                var nodes = g.nodes().map(function (v) {\n                     return {\n                          ...g.node(v)\n                        }\n                })   \n                \n                try {\n                    moveNodes(selection.fixedNodeId, nodes);\n                } catch ( ex ) {\n                    console.error( \"Dagre exception moving nodes\", ex)\n                    // ensure that dagre errors are also shown as notifications in Node-RED.\n                    RED.notify(\"Dagre autoroute error: \" + ex);\n                }\n                break;\n            case \"elkjs_mr_tree\": \n            case \"elkjs_layered_upwards\": \n            case \"elkjs_layered_downwards\": \n            case \"elkjs_box\": \n                // see https://github.com/kieler/elkjs#api for more details\n                var graph = {\n                    id: \"root\",\n                    layoutOptions: currentAlgorithmSettings,\n                    children: selection.allnodes,\n                    edges: selection.alledges\n                };\n\n                const elk = new ELK();\n\n                elk.layout(graph)\n                    .then((g) => {\n                        moveNodes(selection.fixedNodeId, g.children);\n                    })\n                    .catch((ex) => {\n                        console.error( \"ELKjs exception moving nodes\", ex)\n                        RED.notify(\"ElkJs autoroute error: \" + ex);\n                    });\n                break;\n            \n            case \"pull_request_2267\": \n                // Code Taken from https://github.com/node-red/node-red/pull/2267/files\n                // I only replaced 'selection' by 'selection_', but it would be better to use the above 'selection' variable.\n                var selection_ = RED.view.selection();\n                \n                if (!selection_.nodes || selection_.nodes.length !== 1) {\n                    RED.notify(\"Select exactly one node\");\n                    return;\n                }\n                \n                var ns = undefined;\n                if (selection_.nodes[0].type == \"group\") {\n                    ns = RED.group.getNodes(selection_.nodes[0])\n                } else {\n                    ns = RED.nodes.getAllFlowNodes(selection_.nodes[0]);\n                }\n\n                // Find Input node\n\n                var nodes = {};\n                var minRank = 0;\n                var stack = [];\n                var candidateInputs = {};\n                var candidateOutputs = {};\n                ns.forEach(function (n) {\n                    candidateInputs[n.id] = n;\n                    candidateOutputs[n.id] = n;\n                    nodes[n.id] = {\n                        n: n,\n                        i: [],\n                        o: [],\n                        d: -1, // depth from start\n                        r: -1, // rank order at that depth\n                        downstream: 0\n                    }\n                });\n                RED.nodes.eachLink(function (link) {\n                    if (nodes[link.source.id] || nodes[link.target.id]) {\n                        nodes[link.source.id].o.push(link.target.id);\n                        nodes[link.target.id].i.push(link.source.id);\n                        delete candidateInputs[link.target.id]\n                        delete candidateOutputs[link.source.id]\n                    }\n                })\n\n                var inputs = Object.keys(candidateInputs);\n                var outputs = Object.keys(candidateOutputs);\n\n                if (inputs.length > 1) {\n                    RED.notify(\"Multiple start points - bailing\")\n                    return;\n                }\n\n                if (outputs.length === 0) {\n                    RED.notify(\"No outputs - is this a big loop? Bailing\");\n                    return;\n                }\n\n                function applyDepth(id, d) {\n                    if (nodes[id].d < d) {\n                        nodes[id].d = d;\n                        nodes[id].o.forEach(function (nid) {\n                            applyDepth(nid, d + 1);\n                        })\n                    }\n                }\n                applyDepth(inputs[0], 0)\n\n                function calculateDownstream(id, downstream) {\n                    nodes[id].downstream += downstream;\n                    nodes[id].i.forEach(function (nid) {\n                        calculateDownstream(nid, nodes[id].downstream + 1);\n                    })\n                }\n                outputs.forEach(function (id) {\n                    calculateDownstream(id, 0)\n                })\n\n                var ranks = {};\n                function rankNodes(node) {\n                    if (node.r === -1) {\n                        ranks[node.d] = ranks[node.d] || [];\n                        node.r = ranks[node.d].length;\n                        ranks[node.d].push(node);\n                        node.o.sort(function (a, b) {\n                            return nodes[b].downstream - nodes[a].downstream\n                        })\n                        node.o.forEach(function (nid) {\n                            rankNodes(nodes[nid])\n                        })\n                    }\n                }\n                rankNodes(nodes[inputs[0]]);\n                function shuffleRanks(node) {\n                    var pushed = false;\n                    if (node.o.length > 1) {\n                        var outputs = node.o.slice(0);\n                        outputs.sort(function (a, b) {\n                            if (nodes[a].d === nodes[b].d) {\n                                return nodes[a].r - nodes[b].r;\n                            } else {\n                                return nodes[b].d - nodes[a].d;\n                            }\n                        })\n                        // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n                        var rank = nodes[outputs[0]].r;\n                        var depth = nodes[outputs[0]].d;\n                        for (var i = 1; i < outputs.length; i++) {\n                            // console.log(outputs[i]);\n                            var n = nodes[outputs[i]];\n                            if (n.d !== depth && n.r === rank) {\n                                // need to move n down one.\n                                var r = n.r;\n                                ns.forEach(function (_n) {\n                                    var nn = nodes[_n.id];\n                                    if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                                        pushed = true;\n                                        nn.r++;\n                                    }\n                                })\n                            }\n                            depth = n.d;\n                            rank = n.r;\n                        }\n                    }\n                    node.o.forEach(function (n) {\n                        pushed = pushed || shuffleRanks(nodes[n])\n                    })\n                    return pushed;\n                }\n                var shuffle = function () {\n                    if (shuffleRanks(nodes[inputs[0]])) {\n                        shuffle();\n                    }\n                }\n                shuffle();\n\n\n                var x = nodes[inputs[0]].n.x;\n                var y = nodes[inputs[0]].n.y;\n                var changedNodes = [];\n                ns.forEach(function (n) {\n                    var d = nodes[n.id].d;\n                    var r = nodes[n.id].r;\n\n                    changedNodes.push({\n                        n: n,\n                        ox: n.x,\n                        oy: n.y,\n                        moved: n.moved\n                    });\n\n                    n.x = x + d * 200;\n                    n.y = y + r * 50;\n                    n.dirty = true;\n                    // n.dirtyStatus = true;\n                    // n.status = {\n                    //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n                    // }\n                });\n\n                if (changedNodes.length > 0) {\n                    RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n                    RED.nodes.dirty(true);\n                    RED.view.redraw(true);\n                }\n                \n                break;\n\n        }\n    }\n\n    RED.plugins.registerPlugin(\"autolayout-sidebar-plugin\", {});\n\n    // Make sure the editor is completely loaded, before filling the sidebar with content.\n    // Because only just before that, RED.nodes will be loaded.  Otherwise RED.nodes.getType(\"auto_layout_config\") would \n    // return undefined, and RED.nodes.add would throw an exception...\n    // The problem is that Node-RED does not offer an \"editor-loaded\" event.\n    // I did a feature request for that, but for some obscure reason it was not accepted...\n    // (see https://discourse.nodered.org/t/new-editor-event-when-all-nodes-have-been-loaded/60314)\n    // On Discourse there was a workaround shared, but the 'workspace:change' is emitted a bit too early.\n    // Because it is emitted just before the config nodes are loaded, so RED.nodes.eachConfig above would not find our config node.\n    // (see https://discourse.nodered.org/t/add-sidebar-tab-on-app-start-not-working/64726/4).\n    // I found that the 'runtime-state' event is triggered just after the config nodes are loaded, so it works fine. \n    // But it is a non-official unpublished event, so it might be changed or removed in the future...\n    RED.events.on('runtime-state', function() {\n        // Register an action so the user could bind a keyboard shortcut to show the auto-layout sidebar\n        // but avoid an \"Error: Cannot override existing action\" error in the browser console:\n        RED.actions.remove(\"core:auto-layout-flow\");\n        RED.actions.add(\"core:auto-layout-flow\",function() {\n            executeAutoLayout();\n        });\n\n        // The html content of the sidebar has been specified below as a data-template, from where it can be loaded:\n        var content = $($('script[type=\"text/x-red\"][data-template-name=\"auto_layout_sidebar\"]').i18n().html());\n       \n        // Add a \"Auto Layout\" tabsheet to the right sidebar panel, in which this sidebar panel can be displayed\n        RED.sidebar.addTab({\n            id: \"sidebar-auto-layout\",\n            label: \"auto_layout\", // short name for the tab\n            name: \"Auto Layout\", // long name for the menu\n            content: content,\n            closeable: true,\n            disableOnEdit: true,\n            iconClass: \"fa fa-outdent\"\n        });\n\n        // Show the algorithm settings as json in a typedinput element (in the sidebar)\n        $(\"#node-input-settings\").typedInput({\n            default: 'json',\n            types:['json']\n        });\n\n        // When the algorithm properties are changed in the sidebar, then store them into the config node\n        $(\"#node-input-settings\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithmSettings = $(this).typedInput('value');\n            let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            //if (globalAutoLayoutConfigNode.settings[currentAlgorithm] != currentAlgorithmSettings) {\n                let settingsObj = JSON.parse(globalAutoLayoutConfigNode.settings);\n                settingsObj[currentAlgorithm] = JSON.parse(currentAlgorithmSettings);\n                globalAutoLayoutConfigNode.settings = JSON.stringify(settingsObj);\n                RED.nodes.dirty(true);\n            //}\n        })\n\n        // When the algorithm is changed in the sidebar, then store it into the config node\n        $(\"#node-input-algorithm\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithm = $(this).val();\n            let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            if (globalAutoLayoutConfigNode.algorithm != currentAlgorithm) {\n                globalAutoLayoutConfigNode.algorithm = currentAlgorithm;\n                RED.nodes.dirty(true);\n            }\n            \n            $(\"#node-input-settings\").typedInput('value', JSON.stringify(currentAlgorithmSettings));\n        })\n        $(\"#node-input-algorithm\").change();\n\n        $(\"#auto-layout-button\").click(function() {\n            executeAutoLayout();\n        })\n    });\n})();\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"auto_layout_sidebar\">\n    <div style=\"position: relative; height: 100%; margin: 15px;\">\n        <label for=\"node-input-algorithm\" style=\"margin-top: 25px\"><i class=\"fa fa-terminal\"></i> Algorithm</label>\n        <select id=\"node-input-algorithm\">\n            <option value=\"dagre_lr\">Dagre LR</option>\n            <option value=\"dagre_longest_path\">Dagre Longest Path</option>\n            <option value=\"elkjs_mr_tree\">ELKjs Mr. Tree</option>\n            <option value=\"elkjs_layered_upwards\">ELKjs Layered Upwards</option>\n            <option value=\"elkjs_layered_downwards\">ELKjs Layered Downwards</option>\n            <option value=\"elkjs_box\">ELKjs Box</option>\n            <option value=\"pull_request_2267\">Pull Request 2267</option></select>\n        </select>\n\n        <label for=\"node-input-settings\" style=\"margin-top: 15px\"><i class=\"fa fa-cog\"></i> Settings</label>\n        <input type=\"text\" id=\"node-input-settings\" style=\"width: 100%; margin-top: 30px\">\n        \n        <button type=\"button\" id=\"auto-layout-button\" style=\"font-size: larger;width:100%;background-color: yellowgreen;color:white;border: none;height: 32px;margin-top: 30px;\">Execute auto-layout</button>\n    </div>\n</script>\n","output":"str","x":956,"y":1263,"wires":[["1ed582fbcacceede"]]},{"id":"1ed582fbcacceede","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"auto_layout_config.js","filename":"auto_layout_config.js","format":"javascript","syntax":"mustache","template":"/**\r\n * Copyright 2023 Bart Butenaers & Gerrit Riessen\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n module.exports = function (RED) {\r\n    const fs   = require('fs');\r\n    const path = require('path');\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var elkJsBundledPath = require.resolve(\"elkjs\");\r\n\r\n    // For example suppose the require.resolved results in elkJsBundledPath = /home/pi/.node-red/node_modules/elkjs/lib/main.js\r\n    elkJsBundledPath = elkJsBundledPath.replace(\"main.js\", \"elk.bundled.js\");\r\n\r\n    if (!fs.existsSync(elkJsBundledPath)) {\r\n        console.log(\"Javascript file \" + elkJsBundledPath + \" does not exist\");\r\n        elkJsBundledPath = null;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var dagreJsMinifiedPath = require.resolve(\"@dagrejs/dagre\");\r\n\r\n    // For example suppose the require.resolved results in dagreJsMinifiedPath = /home/pi/.node-red/node_modules/@dagrejs/dagre/index.js\r\n    dagreJsMinifiedPath = dagreJsMinifiedPath.replace(\"index.js\", \"dist\" + path.sep + \"dagre.min.js\");\r\n\r\n    if (!fs.existsSync(dagreJsMinifiedPath)) {\r\n        console.log(\"Javascript file \" + dagreJsMinifiedPath + \" does not exist\");\r\n        dagreJsMinifiedPath = null;\r\n    }\r\n \r\n    function AutoLayoutConfigNode (config) {\r\n        RED.nodes.createNode(this, config)\r\n        // Remark: we only store here the server-relevant settings\r\n    }\r\n\r\n    RED.nodes.registerType('auto_layout_config', AutoLayoutConfigNode);\r\n    \r\n    // Make all the javascript library files available to the FLOW EDITOR.\r\n    // We use a separate endpoint, since no permissions are required to read those resources.\r\n    // Otherwise we get 'unauthorized' problems, when calling this endpoint from a 'script' tag.\r\n    // See details on https://discourse.nodered.org/t/unauthorized-when-accessing-custom-admin-endpoint/20201/4\r\n    RED.httpAdmin.get('/auto_layout_config/lib/:libraryname', function(req, res){ \r\n        // Send the requested js library file to the client\r\n        switch (req.params.libraryname) {\r\n            case \"elkjs\":\r\n                // The ElkJs graph layout library\r\n                if (elkJsBundledPath) {\r\n                    res.sendFile(elkJsBundledPath);\r\n                    return;\r\n                }\r\n                break;\r\n            case \"dagrejs\":\r\n                // The DagreJs graph layout library\r\n                if (dagreJsMinifiedPath) {\r\n                    res.sendFile(dagreJsMinifiedPath);\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n        \r\n        res.writeHead(404);\r\n        return res.end(\"The requested library is not supported\");\r\n    });\r\n}\r\n","output":"str","x":956,"y":1313,"wires":[["70017102103439f0"]]},{"id":"70017102103439f0","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n    \"name\": \"@bartbutenaers/node-red-autolayout-sidebar\",\n    \"version\": \"0.0.2\",\n    \"description\": \"A sidebar plugin for Node-RED to offer auto-layouting\",\n    \"dependencies\": {\n        \"elkjs\": \"^0.8.2\",\n        \"@dagrejs/dagre\": \"^1.0.4\"\n    },\n    \"author\": {\n        \"name\": \"Bart Butenaers\"\n    },\n    \"contributors\": [\n        {\n            \"name\": \"Gerrit Riessen\",\n            \"url\": \"https://github.com/gorenje\"\n        }\n    ],\n    \"license\": \"Apache-2.0\",\n    \"keywords\": [\"node-red\", \"auto\", \"layout\", \"graph\", \"sidebar\"],\n    \"bugs\": {\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar/issues\"\n    },\n    \"homepage\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar#readme\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar.git\"\n    },\n    \"publishConfig\": {\n        \"access\": \"public\"\n    },\n    \"engines\": {\n        \"node\": \">=8\"\n    },\n    \"node-red\": {\n        \"version\": \">=2.0.0\",\n        \"nodes\": {\n            \"auto_layout_config\": \"auto_layout_config.js\"\n        },\n        \"plugins\": {\n          \"sidebar-plugin\": \"auto_layout_plugin.html\"\n        }\n    }\n}\n","output":"str","x":956,"y":1363,"wires":[["5b051ae43c8fa960"]]},{"id":"5b051ae43c8fa960","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"f46162b8c86ae48c","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# node-red-autolayout-sidebar\nA sidebar plugin for Node-RED to offer auto-layouting, i.e. rearrange the selected nodes in a flow (based om specified layout parameters).\n\nAll credits for the layout logic go to [Gerrit Riessen](https://github.com/gorenje)!  This sidebar plugin is based on his [node-red-contrib-auto-alignment](https://github.com/gorenje/node-red-contrib-auto-alignment) node, and some code snippets are copied shameless :-)\nSince I am more a fan of sidebars (instead of plugins) for this kind of flow editor features, I developed this sidebar as an addition to Gerrit's node-red-contrib-auto-alignment node.\n\n## Experimental\nThis sidebar plugin is experimental, which means some breaking changes might be introduced in the near future!\n\nThe reason is that there are a number of uncertainties at this moment:\n+ Which algorithm fits best for Node-RED flows?\n+ Is one of these algorithms capable to handle all the use cases?\n+ And so on...\n\nFor more details on why there isn't a one-size-fits-all solution, check out discussions [here](https://discourse.nodered.org/t/noisecraft-anyone-heard-of-it/79813/32) and [here](https://discourse.nodered.org/t/node-red-auto-layouting-using-elkjs-dagre/81052) on discourse.\n\n## Issues\nIf you have an issue or question about the algorithms (i.e. how the nodes are layouted), it might be better to start a new discussion on the Node-RED [forum](https://discourse.nodered.org/).  That way others in the community can think loud, and join the discussion.  Please mention Gerrit (@gregorius) and me (@bartbutenaers) in that discussion, to make sure we get a notification about it.\n\n## Node usage\nThe following demo shows how to auto layout the selected nodes in a flow.\n\n![auto_layout_demo](https://github.com/bartbutenaers/node-red-autolayout-sidebar/assets/14224149/10c5f04d-e0bb-4a55-ad24-571b2aba9646)\n\nThe steps described in detail:\n\n1. Open the *\"Auto Layout\"* sidebar:\n\n2. Select a node in the flow (from where on the successive nodes need to be auto layouted).\n\n3. Optionally select another layouting algorithm in the sidebar.\n\n4. Optionally change the layout parameters of the selected algorithm, via the json typedinput field.\n\n5. Press the green *\"Execute auto layout\"* button in the sidebar.\n\n## Node properties\n\n### Algorithm\nThe following layouting algorithms are currently supported:\n+ ***Dagre LR***: arrange the nodes from left to right (via the Dagre library).\n+ ***Dagre Longest Path***: arrange the nodes based on the longest path via the Dijkstra's algorithm (via the Dagre librar).\n+ ***ELKjs Mr. Tree***: arrange the nodes in a flow via a parent-children tree hierarchy.\n+ ***ELKjs Layered Upwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers upwards (via the ELKjs library).\n+ ***ELKjs Layered Downwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers downwards (via the ELKjs library).\n+ ***ELKjs Box***: arrange the nodes in a flow by packing them like boxes.\n+ ***Pull Request 2267***: algorithm implemented in a draft [pull request](https://github.com/node-red/node-red/pull/2267) dedicated for Node-RED.\n\n### Settings\nThe settings depend on the selected layouting algorithm.\n\nSettings for the dagrejs library (see a full list of all properties in their [wiki](https://github.com/dagrejs/dagre/wiki#configuring-the-layout)):\n+ ***rankdir***: direction of the layout (e.g. “LR” stands for Left to Right).\n+ ***marginx***: horizontal margin (in pixels) around the nodes.\n+ ***marginy***: vertical margin (in pixels) around the nodes.\n+ ***ranker***: method used for ranking nodes.\n+ ***nodesep***: separation between adjacent nodes in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n+ ***ranksep***: separation between adjacent levels in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n\n\nSettings for the ELKjs library (see a full list of all properties in their [documentation](https://eclipse.dev/elk/reference/options.html)):\n+ ***algorithm***: the layout algorithm1.\n+ ***elk.direction***: the main layout direction (\"UP\" or \"DOWN\").\n+ ***cycleBreaking.strategy***: \"INTERACTIVE\": This sets the strategy for cycle breaking (removing cycles in the graph for layout purposes) to interactive, which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge dummies3.\n+ ***layering.strategy***: the strategy to assign nodes to layers.\n+ ***crossingMinimization.semiInteractive***: when true, semi-interactive crossing minimization is activated (which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge).\n+ ***separateConnectedComponents***: when true, each connected component of the graph is processed separately.\n+ ***strategy***: \"NETWORK_SIMPLEX\": This sets the strategy for node placement (determining the x and y coordinates of nodes) to network simplex6.\n+ ***nodeNode***: minimal distance to be preserved between each two nodes.\n+ ***spacing.nodeNodeBetweenLayers***: spacing to be preserved between any pair of nodes of two adjacent layers.\n+ ***spacing.edgeNode***: spacing to be preserved between nodes and edges.\n+ ***spacing.edgeNodeBetweenLayers***: spacing to be preserved between nodes and edges that are routed next to the node’s layer.\n+ ***spacing.edgeEdge***: spacing to be preserved between any two edges.\n+ ***spacing.edgeEdgeBetweenLayers***: spacing between pairs of edges crossing the same layer.\n+ ***hierarchyHandling***: controls how hierarchy is handled in the layout (e.g. \"INCLUDE_CHILDREN\" means that child nodes are included in the layout).\n+ ***edgeNodeBetweenLayers***: spacing between edges and nodes between layers.\n+ ***nodePlacement.bk.fixedAlignment***: the alignment of nodes during node placement (via the Brandes & Köpf node placement algorithm).\n+ ***layerConstraint***: \"FIRST\" constrains a node to be placed in the first layer.\n+ ***childAreaHeight***: the height of the area available for placing child nodes.\n+ ***childAreaWidth***: the width of the area available for placing child nodes.\n\n","output":"str","x":956,"y":1413,"wires":[[]]},{"id":"7e5f64eaa8684e78","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","output":"str","x":858,"y":442,"wires":[["5b1e40d7287d964d"]]},{"id":"5b1e40d7287d964d","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"auto_layout_config.html","filename":"auto_layout_config.html","format":"html","syntax":"mustache","template":"<!--\r\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<script type=\"text/javascript\">\r\n(function ($) {\r\n    RED.nodes.registerType('auto_layout_config', {\r\n        category: 'config',\r\n        hasUsers: false,\r\n        defaults: {\r\n            name: { value: \"AutoLayout\" },\r\n            algorithm: { value: \"dagre_lr\" },\r\n            settings: { value: {} }\r\n        },\r\n        paletteLabel: 'AutoLayout',\r\n        label: function () {\r\n            return this.name;\r\n        }\r\n    });\r\n})(jQuery);\r\n</script>\r\n\r\n<!-- The html for the config node does NOT include input fields, because the data only arrives from user input in the sidebar screen. -->\r\n<script type=\"text/x-red\" data-template-name=\"auto_layout_config\">\r\n    <div class=\"form-tips\">This config node is read-only, because it stores the information entered in the 'Auto Layout' sidebar.</div>\r\n</script>\r\n\r\n<script type=\"text/x-red\" data-help-name=\"auto_layout_config\">\r\n    <p>Configuration for the 'Auto Layout' sidebar.</p>\r\n</script>\r\n","output":"str","x":858,"y":492,"wires":[["3f0b349ac650db21"]]},{"id":"3f0b349ac650db21","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"auto_layout_plugin.html","filename":"auto_layout_plugin.html","format":"html","syntax":"mustache","template":"<!--\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<script src=\"auto_layout_config/lib/elkjs\"></script>\n<script src=\"auto_layout_config/lib/dagrejs\"></script>\n\n<script type=\"text/javascript\">\n(function() {\n    var globalAutoLayoutConfigNode = null;\n    \n    function findSelectedNodes(/*thisNode*/) {\n        /*\n         * Take the selection and create a nodeset from it.\n         */\n        var selection = RED.view.selection();\n        var fixedNodeId = undefined;\n        var ns = undefined;\n\n        if (!selection.nodes || selection.nodes.length == 0) {\n            RED.notify(\"Select exactly one node.\");\n            return;\n        }\n\n        if ( selection.nodes.length == 1 ) {\n            // This is not applicable for the sidebar plugin\n            //if (selection.nodes[0].id == thisNode.id || selection.nodes[0].type == thisNode.type) {\n            //    RED.notify(\"Please do not select the align node.\");\n            //    return;\n            //}\n\n            if ( selection.nodes[0].type == \"group\") {\n                ns = RED.group.getNodes(selection.nodes[0])\n                if ( ns.length == 0 ) {\n                    RED.notify(\"Empty group selected, very funny.\");\n                    return;\n                }\n                fixedNodeId = ns[0].id;\n            } else {\n                ns = RED.nodes.getAllFlowNodes(selection.nodes[0])\n                fixedNodeId = selection.nodes[0].id;\n            }\n        }\n\n        if ( selection.nodes.length > 1 ) {\n            ns = []\n            for ( var idx = 0 ; idx < selection.nodes.length ; idx++ ) {\n                if ( selection.nodes[idx].type == \"group\") {\n                    ns = ns.concat(RED.group.getNodes(selection.nodes[idx]))\n                } else {\n                    ns.push(selection.nodes[idx])\n                    fixedNodeId ||= selection.nodes[idx].id;\n                }\n          }\n\n          fixedNodeId ||= ns[0].id;\n        }\n\n        if ( !ns ) {\n            RED.notify(\"No nodes selected.\");\n            return;\n        }\n\n        /* \n         * From here it's all nodeset based.\n         */\n\n        // Convert nodes to flows.json format since all the wires, i.e. links, are \n        // contained in one simple json format.\n        var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n            return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n        });\n\n        var alledges = [];\n        var allNodeIds = allnodes.map( d => d.id);\n\n        allnodes.forEach((n) => {\n            // Only continue if the node has wires (e.g. a ui_group has no wires)\n            if (n.wires) {\n                for (var widx = 0; widx < (n.wires || []).length; widx++) {\n                    for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                        if ( allNodeIds.indexOf(n.wires[widx][xidx])> -1){\n                            alledges.push({\n                                id: n.id + n.wires[widx][xidx],\n                                sources: [n.id],\n                                targets: [n.wires[widx][xidx]]\n                            });\n                        }\n                    }\n                }\n            }\n        })\n\n        allnodes = allnodes.map((n) => {\n            let bbox = ( ( document.getElementById(n.id) && document.getElementById(n.id).getBBox && document.getElementById(n.id) ) || {\n              getBBox: () => {\n                return {\n                  width: 0,\n                  height: 0\n                }\n              }\n            });\n\n            return {\n                id: n.id,\n                width: bbox.getBBox().width + 3,\n                height: bbox.getBBox().height + 3,\n            }\n        });\n\n        return {\n            allnodes: allnodes,\n            alledges: alledges,\n            fixedNodeId: fixedNodeId\n        };\n    }\n    \n    function moveNodes(fixedNodeId, children) {\n        //var children = payload.nodes;\n        //var fixedNodeId = payload.fixedNodeId;\n\n        var changedNodes = [];\n\n        // Before moving anything we get the offset (x,y) - this is the amount that our\n        // fixed Node moved - our fixed node does not move, this means everything is offset\n        // by the distance it moved.\n        var offsetX = 0;\n        var offsetY = 0;\n        children.forEach((c) => {\n            if (c.id == fixedNodeId) {\n                var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n                offsetX = c.x - nd.x;\n                offsetY = c.y - nd.y;\n            }\n        });\n\n        children.forEach((c) => {\n            var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n\n            changedNodes.push({\n                n: nd,\n                ox: nd.x,\n                oy: nd.y,\n                moved: nd.moved\n            });\n\n            nd.x = c.x - offsetX;\n            nd.y = c.y - offsetY;\n            nd.dirty = true;\n        });\n\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n    \n    function getDefaultSettings() {\n        return {\n            \"dagre_lr\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 20,\n                \"marginy\": 20,\n                \"nodesep\": 30,\n                \"ranksep\": 50\n            },\n            \"dagre_longest_path\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 2,\n                \"marginy\": 2,\n                \"ranker\": \"longest-path\",\n                \"nodesep\": 2,\n                \"ranksep\": 2\n            },\n            \"elkjs_mr_tree\": {\n                \"algorithm\": \"mrtree\",\n                \"childAreaHeight\": 4500,\n                \"childAreaWidth\": 4500,\n                \"org.eclipse.elk.direction\": \"RIGHT\"\n            },\n            \"elkjs_layered_upwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"UP\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15,\n                \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n                \"elk.layered.spacing.edgeNodeBetweenLayers\": 40,\n                \"elk.layered.nodePlacement.bk.fixedAlignment\": \"BALANCED\",\n                \"layering.layerConstraint\": \"FIRST\"\n            },\n            \"elkjs_layered_downwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"DOWN\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15\n            },\n            \"elkjs_box\": {\n                \"algorithm\": \"org.eclipse.elk.box\",\n                \"childAreaHeight\": 3000,\n                \"childAreaWidth\": 3000\n            },\n            \"pull_request_2267\": {\n                // TODO\n            }\n        }\n    }\n  \n    // Ensure that the globalAutoLayoutConfigNode (still) exists, because the user might have deleted it meanwhile...\n    // !!!!!!!!!!!!!!! CALL THIS FUNCTION EVERYWHERE THE globalAutoLayoutConfigNode IS BEING USED !!!!!!!!!!!!!!!\n    function ensureAutoLayoutConfigNode() {\n        // If we had found it previously, check if it has been deleted by the user behind our back\n        if (globalAutoLayoutConfigNode !== null) {\n            var configNode = RED.nodes.node(globalAutoLayoutConfigNode.id);\n            if (configNode === null) { globalAutoLayoutConfigNode = null; }\n        }\n\n        // If not found previously, let's go find it\n        if (globalAutoLayoutConfigNode === null) {\n            var configNodes = [];\n            console.log(\"=======================> HIER configNodes via eachConfig nodig\")\n            RED.nodes.eachConfig(function(configNode) {\n                if (configNode.type === 'auto_layout_config') { \n                    configNodes.push(configNode); \n                }\n            });\n\n            // Make sure we only have 1 config node\n            while (configNodes.length > 1) {\n                var configNode = configNodes.pop();\n                RED.nodes.remove(configNode.id);\n                RED.nodes.dirty(true);\n            }\n\n            // When we found a config node, let's use that one\n            if (configNodes.length === 1) { globalAutoLayoutConfigNode = configNodes[0]; }\n        }\n\n        // When it doesn't exist yet, create it if required\n        if (globalAutoLayoutConfigNode === null) {\n            // TODO controleren of de defaults door de config node code zelf toegepast worden????\n\n            // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n            // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n            // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n            // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n            globalAutoLayoutConfigNode = {\n                id: RED.nodes.id(),\n                _def: RED.nodes.getType(\"auto_layout_config\"),\n                type: \"auto_layout_config\",\n                hasUsers: false, \n                users: [],\n                // TODO default values for all properties\n                name: \"AutoLayout\",\n                label: function() { return this.name || \"AutoLayout\"},\n                algorithm: \"dagre_lr\", // Default algorithm\n                settings: JSON.stringify(getDefaultSettings()) // Start with the default settings per algorithm\n            }\n\n            // Add the new config node to the collection of Node-RED nodes\n            RED.nodes.add(globalAutoLayoutConfigNode);\n\n            // Make sure the \"Deploy\" button becomes active\n            RED.nodes.dirty(true);\n        }\n    }\n\n    function executeAutoLayout() {\n        ensureAutoLayoutConfigNode();\n\n        let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n        let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n        let selection = findSelectedNodes();\n\n        if (!selection) {\n            return;\n        }\n\n        switch(currentAlgorithm) {\n            case \"dagre_lr\":\n            case \"dagre_longest_path\":\n                // Code take from https://pastebin.com/TJRFD3mg\n                // Which came from https://discourse.nodered.org/t/read-flows-json-and-position-the-nodes-in-most-efficient-readable-way/78158/12\n                var g = new dagre.graphlib.Graph();\n                g.setGraph(currentAlgorithmSettings);\n                g.setDefaultEdgeLabel(function () { return {}; });                       \n\n                for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                    var n = selection.allnodes[idx];\n                    g.setNode(n.id, {\n                        ...n,\n                    })\n                }\n                \n                // The above loop can be replaced by :\n                // for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                //     var node = selection.allnodes[idx];\n                //     var clonedNode = Object.assign({}, node);\n                //     g.setNode(n.id, clonedNode);\n                // }\n\n\n                for (var idx = 0; idx < selection.alledges.length; idx++) {\n                    var e = selection.alledges[idx];\n                    g.setEdge(e.sources[0], e.targets[0])\n                }\n\n                dagre.layout(g);\n                \n                var nodes = g.nodes().map(function (v) {\n                     return {\n                          ...g.node(v)\n                        }\n                })   \n                \n                try {\n                    moveNodes(selection.fixedNodeId, nodes);\n                } catch ( ex ) {\n                    console.error( \"Dagre exception moving nodes\", ex)\n                    // ensure that dagre errors are also shown as notifications in Node-RED.\n                    RED.notify(\"Dagre autoroute error: \" + ex);\n                }\n                break;\n            case \"elkjs_mr_tree\": \n            case \"elkjs_layered_upwards\": \n            case \"elkjs_layered_downwards\": \n            case \"elkjs_box\": \n                // see https://github.com/kieler/elkjs#api for more details\n                var graph = {\n                    id: \"root\",\n                    layoutOptions: currentAlgorithmSettings,\n                    children: selection.allnodes,\n                    edges: selection.alledges\n                };\n\n                const elk = new ELK();\n\n                elk.layout(graph)\n                    .then((g) => {\n                        moveNodes(selection.fixedNodeId, g.children);\n                    })\n                    .catch((ex) => {\n                        console.error( \"ELKjs exception moving nodes\", ex)\n                        RED.notify(\"ElkJs autoroute error: \" + ex);\n                    });\n                break;\n            \n            case \"pull_request_2267\": \n                // Code Taken from https://github.com/node-red/node-red/pull/2267/files\n                // I only replaced 'selection' by 'selection_', but it would be better to use the above 'selection' variable.\n                var selection_ = RED.view.selection();\n                \n                if (!selection_.nodes || selection_.nodes.length !== 1) {\n                    RED.notify(\"Select exactly one node\");\n                    return;\n                }\n                \n                var ns = undefined;\n                if (selection_.nodes[0].type == \"group\") {\n                    ns = RED.group.getNodes(selection_.nodes[0])\n                } else {\n                    ns = RED.nodes.getAllFlowNodes(selection_.nodes[0]);\n                }\n\n                // Find Input node\n\n                var nodes = {};\n                var minRank = 0;\n                var stack = [];\n                var candidateInputs = {};\n                var candidateOutputs = {};\n                ns.forEach(function (n) {\n                    candidateInputs[n.id] = n;\n                    candidateOutputs[n.id] = n;\n                    nodes[n.id] = {\n                        n: n,\n                        i: [],\n                        o: [],\n                        d: -1, // depth from start\n                        r: -1, // rank order at that depth\n                        downstream: 0\n                    }\n                });\n                RED.nodes.eachLink(function (link) {\n                    if (nodes[link.source.id] || nodes[link.target.id]) {\n                        nodes[link.source.id].o.push(link.target.id);\n                        nodes[link.target.id].i.push(link.source.id);\n                        delete candidateInputs[link.target.id]\n                        delete candidateOutputs[link.source.id]\n                    }\n                })\n\n                var inputs = Object.keys(candidateInputs);\n                var outputs = Object.keys(candidateOutputs);\n\n                if (inputs.length > 1) {\n                    RED.notify(\"Multiple start points - bailing\")\n                    return;\n                }\n\n                if (outputs.length === 0) {\n                    RED.notify(\"No outputs - is this a big loop? Bailing\");\n                    return;\n                }\n\n                function applyDepth(id, d) {\n                    if (nodes[id].d < d) {\n                        nodes[id].d = d;\n                        nodes[id].o.forEach(function (nid) {\n                            applyDepth(nid, d + 1);\n                        })\n                    }\n                }\n                applyDepth(inputs[0], 0)\n\n                function calculateDownstream(id, downstream) {\n                    nodes[id].downstream += downstream;\n                    nodes[id].i.forEach(function (nid) {\n                        calculateDownstream(nid, nodes[id].downstream + 1);\n                    })\n                }\n                outputs.forEach(function (id) {\n                    calculateDownstream(id, 0)\n                })\n\n                var ranks = {};\n                function rankNodes(node) {\n                    if (node.r === -1) {\n                        ranks[node.d] = ranks[node.d] || [];\n                        node.r = ranks[node.d].length;\n                        ranks[node.d].push(node);\n                        node.o.sort(function (a, b) {\n                            return nodes[b].downstream - nodes[a].downstream\n                        })\n                        node.o.forEach(function (nid) {\n                            rankNodes(nodes[nid])\n                        })\n                    }\n                }\n                rankNodes(nodes[inputs[0]]);\n                function shuffleRanks(node) {\n                    var pushed = false;\n                    if (node.o.length > 1) {\n                        var outputs = node.o.slice(0);\n                        outputs.sort(function (a, b) {\n                            if (nodes[a].d === nodes[b].d) {\n                                return nodes[a].r - nodes[b].r;\n                            } else {\n                                return nodes[b].d - nodes[a].d;\n                            }\n                        })\n                        // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n                        var rank = nodes[outputs[0]].r;\n                        var depth = nodes[outputs[0]].d;\n                        for (var i = 1; i < outputs.length; i++) {\n                            // console.log(outputs[i]);\n                            var n = nodes[outputs[i]];\n                            if (n.d !== depth && n.r === rank) {\n                                // need to move n down one.\n                                var r = n.r;\n                                ns.forEach(function (_n) {\n                                    var nn = nodes[_n.id];\n                                    if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                                        pushed = true;\n                                        nn.r++;\n                                    }\n                                })\n                            }\n                            depth = n.d;\n                            rank = n.r;\n                        }\n                    }\n                    node.o.forEach(function (n) {\n                        pushed = pushed || shuffleRanks(nodes[n])\n                    })\n                    return pushed;\n                }\n                var shuffle = function () {\n                    if (shuffleRanks(nodes[inputs[0]])) {\n                        shuffle();\n                    }\n                }\n                shuffle();\n\n\n                var x = nodes[inputs[0]].n.x;\n                var y = nodes[inputs[0]].n.y;\n                var changedNodes = [];\n                ns.forEach(function (n) {\n                    var d = nodes[n.id].d;\n                    var r = nodes[n.id].r;\n\n                    changedNodes.push({\n                        n: n,\n                        ox: n.x,\n                        oy: n.y,\n                        moved: n.moved\n                    });\n\n                    n.x = x + d * 200;\n                    n.y = y + r * 50;\n                    n.dirty = true;\n                    // n.dirtyStatus = true;\n                    // n.status = {\n                    //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n                    // }\n                });\n\n                if (changedNodes.length > 0) {\n                    RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n                    RED.nodes.dirty(true);\n                    RED.view.redraw(true);\n                }\n                \n                break;\n\n        }\n    }\n\n    RED.plugins.registerPlugin(\"autolayout-sidebar-plugin\", {});\n\n    // Make sure the editor is completely loaded, before filling the sidebar with content.\n    // Because only just before that, RED.nodes will be loaded.  Otherwise RED.nodes.getType(\"auto_layout_config\") would \n    // return undefined, and RED.nodes.add would throw an exception...\n    // The problem is that Node-RED does not offer an \"editor-loaded\" event.\n    // I did a feature request for that, but for some obscure reason it was not accepted...\n    // (see https://discourse.nodered.org/t/new-editor-event-when-all-nodes-have-been-loaded/60314)\n    // On Discourse there was a workaround shared, but the 'workspace:change' is emitted a bit too early.\n    // Because it is emitted just before the config nodes are loaded, so RED.nodes.eachConfig above would not find our config node.\n    // (see https://discourse.nodered.org/t/add-sidebar-tab-on-app-start-not-working/64726/4).\n    // I found that the 'runtime-state' event is triggered just after the config nodes are loaded, so it works fine. \n    // But it is a non-official unpublished event, so it might be changed or removed in the future...\n    var dothisOneTimePlease = () => {\n        RED.events.off('runtime-state', dothisOneTimePlease )\n\n        // Register an action so the user could bind a keyboard shortcut to show the auto-layout sidebar\n        // but avoid an \"Error: Cannot override existing action\" error in the browser console:\n        if( RED.actions.list().filter( (d) => { return d.id == \"core:auto-layout-flow\"} ).length == 0 ) {\n            RED.actions.add(\"core:auto-layout-flow\", executeAutoLayout);\n        }\n        \n        // The html content of the sidebar has been specified below as a data-template, from where it can be loaded:\n        var content = $($('script[type=\"text/x-red\"][data-template-name=\"auto_layout_sidebar\"]').i18n().html());\n       \n        // Add a \"Auto Layout\" tabsheet to the right sidebar panel, in which this sidebar panel can be displayed\n        RED.sidebar.addTab({\n            id: \"sidebar-auto-layout\",\n            label: \"auto_layout\", // short name for the tab\n            name: \"Auto Layout\", // long name for the menu\n            content: content,\n            closeable: true,\n            disableOnEdit: true,\n            iconClass: \"fa fa-outdent\"\n        });\n\n        // Show the algorithm settings as json in a typedinput element (in the sidebar)\n        $(\"#node-input-settings\").typedInput({\n            default: 'json',\n            types:['json']\n        });\n\n        // When the algorithm properties are changed in the sidebar, then store them into the config node\n        $(\"#node-input-settings\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithmSettings = $(this).typedInput('value');\n            let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            //if (globalAutoLayoutConfigNode.settings[currentAlgorithm] != currentAlgorithmSettings) {\n                let settingsObj = JSON.parse(globalAutoLayoutConfigNode.settings);\n                settingsObj[currentAlgorithm] = JSON.parse(currentAlgorithmSettings);\n                globalAutoLayoutConfigNode.settings = JSON.stringify(settingsObj);\n                RED.nodes.dirty(true);\n            //}\n        })\n\n        // When the algorithm is changed in the sidebar, then store it into the config node\n        $(\"#node-input-algorithm\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithm = $(this).val();\n            let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            if (globalAutoLayoutConfigNode.algorithm != currentAlgorithm) {\n                globalAutoLayoutConfigNode.algorithm = currentAlgorithm;\n                RED.nodes.dirty(true);\n            }\n            \n            $(\"#node-input-settings\").typedInput('value', JSON.stringify(currentAlgorithmSettings));\n        })\n        $(\"#node-input-algorithm\").change();\n\n        $(\"#auto-layout-button\").click( executeAutoLayout );\n\n        $(\"#auto-layout-revert-button\").click(function() {\n            // revert the last change by calling undo but also maintain the \n            // original selection, making it easier to try out different \n            // algorithms.\n            var sle = RED.view.selection();\n\n            // this will clear the selection, hence make a copy beforehand\n            RED.actions.invoke(\"core:undo\");\n\n            RED.view.select(sle);\n        })\n    };\n    RED.events.on('runtime-state', dothisOneTimePlease )\n})();\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"auto_layout_sidebar\">\n    <div style=\"position: relative; height: 100%; margin: 15px;\">\n        <label for=\"node-input-algorithm\" style=\"margin-top: 25px\"><i class=\"fa fa-terminal\"></i> Algorithm</label>\n        <select id=\"node-input-algorithm\">\n            <option value=\"dagre_lr\">Dagre LR</option>\n            <option value=\"dagre_longest_path\">Dagre Longest Path</option>\n            <option value=\"elkjs_mr_tree\">ELKjs Mr. Tree</option>\n            <option value=\"elkjs_layered_upwards\">ELKjs Layered Upwards</option>\n            <option value=\"elkjs_layered_downwards\">ELKjs Layered Downwards</option>\n            <option value=\"elkjs_box\">ELKjs Box</option>\n            <option value=\"pull_request_2267\">Pull Request 2267</option></select>\n        </select>\n\n        <label for=\"node-input-settings\" style=\"margin-top: 15px\"><i class=\"fa fa-cog\"></i> Settings</label>\n        <input type=\"text\" id=\"node-input-settings\" style=\"width: 100%; margin-top: 30px\">\n        \n        <button type=\"button\" id=\"auto-layout-button\" style=\"font-size: larger;width:100%;background-color: yellowgreen;color:white;border: none;height: 32px;margin-top: 30px;\">Execute auto-layout</button>\n\n        <button type=\"button\" id=\"auto-layout-revert-button\" style=\"font-size: smaller;width:50%;background-color: rgb(225, 119, 129); color: rgb(246, 246, 246); border: 1px solid rgb(173, 22, 37); height: 32px; margin-top: 30px;\"><i class=\"fa fa-undo\"></i> Undo</button>\n    </div>\n</script>\n","output":"str","x":858,"y":542,"wires":[["833591eb04a642e7"]]},{"id":"833591eb04a642e7","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"auto_layout_config.js","filename":"auto_layout_config.js","format":"javascript","syntax":"mustache","template":"/**\r\n * Copyright 2023 Bart Butenaers & Gerrit Riessen\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n module.exports = function (RED) {\r\n    const fs   = require('fs');\r\n    const path = require('path');\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var elkJsBundledPath = require.resolve(\"elkjs\");\r\n\r\n    // For example suppose the require.resolved results in elkJsBundledPath = /home/pi/.node-red/node_modules/elkjs/lib/main.js\r\n    elkJsBundledPath = elkJsBundledPath.replace(\"main.js\", \"elk.bundled.js\");\r\n\r\n    if (!fs.existsSync(elkJsBundledPath)) {\r\n        console.log(\"Javascript file \" + elkJsBundledPath + \" does not exist\");\r\n        elkJsBundledPath = null;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var dagreJsMinifiedPath = require.resolve(\"@dagrejs/dagre\");\r\n\r\n    // For example suppose the require.resolved results in dagreJsMinifiedPath = /home/pi/.node-red/node_modules/@dagrejs/dagre/index.js\r\n    dagreJsMinifiedPath = dagreJsMinifiedPath.replace(\"index.js\", \"dist\" + path.sep + \"dagre.min.js\");\r\n\r\n    if (!fs.existsSync(dagreJsMinifiedPath)) {\r\n        console.log(\"Javascript file \" + dagreJsMinifiedPath + \" does not exist\");\r\n        dagreJsMinifiedPath = null;\r\n    }\r\n \r\n    function AutoLayoutConfigNode (config) {\r\n        RED.nodes.createNode(this, config)\r\n        // Remark: we only store here the server-relevant settings\r\n    }\r\n\r\n    RED.nodes.registerType('auto_layout_config', AutoLayoutConfigNode);\r\n    \r\n    // Make all the javascript library files available to the FLOW EDITOR.\r\n    // We use a separate endpoint, since no permissions are required to read those resources.\r\n    // Otherwise we get 'unauthorized' problems, when calling this endpoint from a 'script' tag.\r\n    // See details on https://discourse.nodered.org/t/unauthorized-when-accessing-custom-admin-endpoint/20201/4\r\n    RED.httpAdmin.get('/auto_layout_config/lib/:libraryname', function(req, res){ \r\n        // Send the requested js library file to the client\r\n        switch (req.params.libraryname) {\r\n            case \"elkjs\":\r\n                // The ElkJs graph layout library\r\n                if (elkJsBundledPath) {\r\n                    res.sendFile(elkJsBundledPath);\r\n                    return;\r\n                }\r\n                break;\r\n            case \"dagrejs\":\r\n                // The DagreJs graph layout library\r\n                if (dagreJsMinifiedPath) {\r\n                    res.sendFile(dagreJsMinifiedPath);\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n        \r\n        res.writeHead(404);\r\n        return res.end(\"The requested library is not supported\");\r\n    });\r\n}\r\n","output":"str","x":858,"y":592,"wires":[["bc7a3e49cad4b89d"]]},{"id":"bc7a3e49cad4b89d","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"package.json","filename":"package.json","format":"text","syntax":"mustache","template":"{\n    \"name\": \"@bartbutenaers/node-red-autolayout-sidebar\",\n    \"version\": \"{{{ pversion }}}\",\n    \"description\": \"A sidebar plugin for Node-RED to offer auto-layouting\",\n    \"dependencies\": {\n        \"elkjs\": \"^0.8.2\",\n        \"@dagrejs/dagre\": \"^1.0.4\"\n    },\n    \"author\": {\n        \"name\": \"Bart Butenaers\"\n    },\n    \"contributors\": [\n        {\n            \"name\": \"Gerrit Riessen\",\n            \"url\": \"https://github.com/gorenje\"\n        }\n    ],\n    \"license\": \"Apache-2.0\",\n    \"keywords\": [\"node-red\", \"auto\", \"layout\", \"graph\", \"sidebar\"],\n    \"bugs\": {\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar/issues\"\n    },\n    \"homepage\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar#readme\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar.git\"\n    },\n    \"publishConfig\": {\n        \"access\": \"public\"\n    },\n    \"engines\": {\n        \"node\": \">=18.0.0\"\n    },\n    \"node-red\": {\n        \"version\": \">=2.0.0\",\n        \"nodes\": {\n            \"auto_layout_config\": \"auto_layout_config.js\"\n        },\n        \"plugins\": {\n          \"sidebar-plugin\": \"auto_layout_plugin.html\"\n        }\n    }\n}\n","output":"str","x":858,"y":642,"wires":[["2307612927e41f6d"]]},{"id":"2307612927e41f6d","type":"PkgFile","z":"b3d8d3a926ff80e7","name":"README.md","filename":"README.md","format":"text","syntax":"mustache","template":"# node-red-autolayout-sidebar\nA sidebar plugin for Node-RED to offer auto-layouting, i.e. rearrange the selected nodes in a flow (based om specified layout parameters).\n\nAll credits for the layout logic go to [Gerrit Riessen](https://github.com/gorenje)!  This sidebar plugin is based on his [node-red-contrib-auto-alignment](https://github.com/gorenje/node-red-contrib-auto-alignment) node, and some code snippets are copied shameless :-)\nSince I am more a fan of sidebars (instead of plugins) for this kind of flow editor features, I developed this sidebar as an addition to Gerrit's node-red-contrib-auto-alignment node.\n\n## Install\nRun the following npm command in your Node-RED user directory (typically ~/.node-red):\n```\nnpm install @bartbutenaers/node-red-autolayout-sidebar\n```\nCaution: NodeJs version ***17.0.0*** is minimal required by the DagreJs graph library!\n\n## Experimental\nThis sidebar plugin is experimental, which means some breaking changes might be introduced in the near future!\n\nThe reason is that there are a number of uncertainties at this moment:\n+ Which algorithm fits best for Node-RED flows?\n+ Is one of these algorithms capable to handle all the use cases?\n+ And so on...\n\nFor more details on why there isn't a one-size-fits-all solution, check out discussions [here](https://discourse.nodered.org/t/noisecraft-anyone-heard-of-it/79813/32) and [here](https://discourse.nodered.org/t/node-red-auto-layouting-using-elkjs-dagre/81052) on discourse.\n\n## Issues\nIf you have an issue or question about the algorithms (i.e. how the nodes are layouted), it might be better to start a new discussion on the Node-RED [forum](https://discourse.nodered.org/).  That way others in the community can think loud, and join the discussion.  Please mention Gerrit (@gregorius) and me (@bartbutenaers) in that discussion, to make sure we get a notification about it.\n\n## Node usage\nThe following demo shows how to auto layout the selected nodes in a flow.\n\n![auto_layout_demo](https://github.com/bartbutenaers/node-red-autolayout-sidebar/assets/14224149/10c5f04d-e0bb-4a55-ad24-571b2aba9646)\n\nThe steps described in detail:\n\n1. Open the *\"Auto Layout\"* sidebar:\n\n2. Select a node in the flow (from where on the successive nodes need to be auto layouted).\n\n3. Optionally select another layouting algorithm in the sidebar.\n\n4. Optionally change the layout parameters of the selected algorithm, via the json typedinput field.\n\n5. Press the green *\"Execute auto layout\"* button in the sidebar.\n\n## Node Undo\n\nBecause the undo does not work in the sidebar, an undo button has been added:\n\n![img](https://cdn.openmindmap.org/content/1699442004757_auto-layout-undo.gif)\n\nThe Undo button works just as normal undo and multiple click will cause other things to be undone aswell: the undo button is **not** specific to the layout, it **will** undo other actions.\n\n## Node properties\n\n### Algorithm\nThe following layouting algorithms are currently supported:\n+ ***Dagre LR***: arrange the nodes from left to right (via the Dagre library).\n+ ***Dagre Longest Path***: arrange the nodes based on the longest path via the Dijkstra's algorithm (via the Dagre librar).\n+ ***ELKjs Mr. Tree***: arrange the nodes in a flow via a parent-children tree hierarchy.\n+ ***ELKjs Layered Upwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers upwards (via the ELKjs library).\n+ ***ELKjs Layered Downwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers downwards (via the ELKjs library).\n+ ***ELKjs Box***: arrange the nodes in a flow by packing them like boxes.\n+ ***Pull Request 2267***: algorithm implemented in a draft [pull request](https://github.com/node-red/node-red/pull/2267) dedicated for Node-RED.\n\n### Settings\nThe settings depend on the selected layouting algorithm.\n\nSettings for the dagrejs library (see a full list of all properties in their [wiki](https://github.com/dagrejs/dagre/wiki#configuring-the-layout)):\n+ ***rankdir***: direction of the layout (e.g. “LR” stands for Left to Right).\n+ ***marginx***: horizontal margin (in pixels) around the nodes.\n+ ***marginy***: vertical margin (in pixels) around the nodes.\n+ ***ranker***: method used for ranking nodes.\n+ ***nodesep***: separation between adjacent nodes in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n+ ***ranksep***: separation between adjacent levels in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n\n\nSettings for the ELKjs library (see a full list of all properties in their [documentation](https://eclipse.dev/elk/reference/options.html)):\n+ ***algorithm***: the layout algorithm1.\n+ ***elk.direction***: the main layout direction (\"UP\" or \"DOWN\").\n+ ***cycleBreaking.strategy***: \"INTERACTIVE\": This sets the strategy for cycle breaking (removing cycles in the graph for layout purposes) to interactive, which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge dummies3.\n+ ***layering.strategy***: the strategy to assign nodes to layers.\n+ ***crossingMinimization.semiInteractive***: when true, semi-interactive crossing minimization is activated (which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge).\n+ ***separateConnectedComponents***: when true, each connected component of the graph is processed separately.\n+ ***strategy***: \"NETWORK_SIMPLEX\": This sets the strategy for node placement (determining the x and y coordinates of nodes) to network simplex6.\n+ ***nodeNode***: minimal distance to be preserved between each two nodes.\n+ ***spacing.nodeNodeBetweenLayers***: spacing to be preserved between any pair of nodes of two adjacent layers.\n+ ***spacing.edgeNode***: spacing to be preserved between nodes and edges.\n+ ***spacing.edgeNodeBetweenLayers***: spacing to be preserved between nodes and edges that are routed next to the node’s layer.\n+ ***spacing.edgeEdge***: spacing to be preserved between any two edges.\n+ ***spacing.edgeEdgeBetweenLayers***: spacing between pairs of edges crossing the same layer.\n+ ***hierarchyHandling***: controls how hierarchy is handled in the layout (e.g. \"INCLUDE_CHILDREN\" means that child nodes are included in the layout).\n+ ***edgeNodeBetweenLayers***: spacing between edges and nodes between layers.\n+ ***nodePlacement.bk.fixedAlignment***: the alignment of nodes during node placement (via the Brandes & Köpf node placement algorithm).\n+ ***layerConstraint***: \"FIRST\" constrains a node to be placed in the first layer.\n+ ***childAreaHeight***: the height of the area available for placing child nodes.\n+ ***childAreaWidth***: the width of the area available for placing child nodes.\n\n## Sharing Settings\n\nIf you have a layout configuration that you wish to include in the presets, then please share your configuration in the [Node-RED forum](https://discourse.nodered.org/t/announcement-node-red-autolayout-sidebar-experimental-version-s/82263).\n\nAny suggestions and ideas are most welcome :+1:\n\n","output":"str","x":858,"y":692,"wires":[["032b6dda18bca33c"]]},{"id":"d8c653e62c18acd7","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n","output":"str","x":1313,"y":1163,"wires":[["4a5ab62640b32452"]]},{"id":"4a5ab62640b32452","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"auto_layout_config.html","filename":"auto_layout_config.html","format":"html","syntax":"mustache","template":"<!--\r\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<script type=\"text/javascript\">\r\n(function ($) {\r\n    RED.nodes.registerType('auto_layout_config', {\r\n        category: 'config',\r\n        hasUsers: false,\r\n        defaults: {\r\n            name: { value: \"AutoLayout\" },\r\n            algorithm: { value: \"dagre_lr\" },\r\n            settings: { value: {} }\r\n        },\r\n        paletteLabel: 'AutoLayout',\r\n        label: function () {\r\n            return this.name;\r\n        }\r\n    });\r\n})(jQuery);\r\n</script>\r\n\r\n<!-- The html for the config node does NOT include input fields, because the data only arrives from user input in the sidebar screen. -->\r\n<script type=\"text/x-red\" data-template-name=\"auto_layout_config\">\r\n    <div class=\"form-tips\">This config node is read-only, because it stores the information entered in the 'Auto Layout' sidebar.</div>\r\n</script>\r\n\r\n<script type=\"text/x-red\" data-help-name=\"auto_layout_config\">\r\n    <p>Configuration for the 'Auto Layout' sidebar.</p>\r\n</script>\r\n","output":"str","x":1313,"y":1213,"wires":[["dca516236aa21eef"]]},{"id":"dca516236aa21eef","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"auto_layout_plugin.html","filename":"auto_layout_plugin.html","format":"html","syntax":"mustache","template":"<!--\n  Copyright 2023, Bart Butenaers & Gerrit Riessen\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<script src=\"auto_layout_config/lib/elkjs\"></script>\n<script src=\"auto_layout_config/lib/dagrejs\"></script>\n\n<script type=\"text/javascript\">\n(function() {\n    var globalAutoLayoutConfigNode = null;\n    \n    function findSelectedNodes(/*thisNode*/) {\n        /*\n         * Take the selection and create a nodeset from it.\n         */\n        var selection = RED.view.selection();\n        var fixedNodeId = undefined;\n        var ns = undefined;\n\n        if (!selection.nodes || selection.nodes.length == 0) {\n            RED.notify(\"Select exactly one node.\");\n            return;\n        }\n\n        if ( selection.nodes.length == 1 ) {\n            // This is not applicable for the sidebar plugin\n            //if (selection.nodes[0].id == thisNode.id || selection.nodes[0].type == thisNode.type) {\n            //    RED.notify(\"Please do not select the align node.\");\n            //    return;\n            //}\n\n            if ( selection.nodes[0].type == \"group\") {\n                ns = RED.group.getNodes(selection.nodes[0])\n                if ( ns.length == 0 ) {\n                    RED.notify(\"Empty group selected, very funny.\");\n                    return;\n                }\n                fixedNodeId = ns[0].id;\n            } else {\n                ns = RED.nodes.getAllFlowNodes(selection.nodes[0])\n                fixedNodeId = selection.nodes[0].id;\n            }\n        }\n\n        if ( selection.nodes.length > 1 ) {\n            ns = []\n            for ( var idx = 0 ; idx < selection.nodes.length ; idx++ ) {\n                if ( selection.nodes[idx].type == \"group\") {\n                    ns = ns.concat(RED.group.getNodes(selection.nodes[idx]))\n                } else {\n                    ns.push(selection.nodes[idx])\n                    fixedNodeId ||= selection.nodes[idx].id;\n                }\n          }\n\n          fixedNodeId ||= ns[0].id;\n        }\n\n        if ( !ns ) {\n            RED.notify(\"No nodes selected.\");\n            return;\n        }\n\n        /* \n         * From here it's all nodeset based.\n         */\n\n        // Convert nodes to flows.json format since all the wires, i.e. links, are \n        // contained in one simple json format.\n        var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n            return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n        });\n\n        var alledges = [];\n        var allNodeIds = allnodes.map( d => d.id);\n\n        allnodes.forEach((n) => {\n            // Only continue if the node has wires (e.g. a ui_group has no wires)\n            if (n.wires) {\n                for (var widx = 0; widx < (n.wires || []).length; widx++) {\n                    for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                        if ( allNodeIds.indexOf(n.wires[widx][xidx])> -1){\n                            alledges.push({\n                                id: n.id + n.wires[widx][xidx],\n                                sources: [n.id],\n                                targets: [n.wires[widx][xidx]]\n                            });\n                        }\n                    }\n                }\n            }\n        })\n\n        allnodes = allnodes.map((n) => {\n            let bbox = ( ( document.getElementById(n.id) && document.getElementById(n.id).getBBox && document.getElementById(n.id) ) || {\n              getBBox: () => {\n                return {\n                  width: 0,\n                  height: 0\n                }\n              }\n            });\n\n            return {\n                id: n.id,\n                width: bbox.getBBox().width + 3,\n                height: bbox.getBBox().height + 3,\n            }\n        });\n\n        return {\n            allnodes: allnodes,\n            alledges: alledges,\n            fixedNodeId: fixedNodeId\n        };\n    }\n    \n    function moveNodes(fixedNodeId, children) {\n        //var children = payload.nodes;\n        //var fixedNodeId = payload.fixedNodeId;\n\n        var changedNodes = [];\n\n        // Before moving anything we get the offset (x,y) - this is the amount that our\n        // fixed Node moved - our fixed node does not move, this means everything is offset\n        // by the distance it moved.\n        var offsetX = 0;\n        var offsetY = 0;\n        children.forEach((c) => {\n            if (c.id == fixedNodeId) {\n                var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n                offsetX = c.x - nd.x;\n                offsetY = c.y - nd.y;\n            }\n        });\n\n        children.forEach((c) => {\n            var nd = RED.nodes.node(c.id) || RED.nodes.junction(c.id);\n\n            changedNodes.push({\n                n: nd,\n                ox: nd.x,\n                oy: nd.y,\n                moved: nd.moved\n            });\n\n            nd.x = c.x - offsetX;\n            nd.y = c.y - offsetY;\n            nd.dirty = true;\n        });\n\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n    \n    function getDefaultSettings() {\n        return {\n            \"dagre_lr\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 20,\n                \"marginy\": 20,\n                \"nodesep\": 30,\n                \"ranksep\": 50\n            },\n            \"dagre_longest_path\": {\n                \"rankdir\": \"LR\",\n                \"marginx\": 2,\n                \"marginy\": 2,\n                \"ranker\": \"longest-path\",\n                \"nodesep\": 2,\n                \"ranksep\": 2\n            },\n            \"elkjs_mr_tree\": {\n                \"algorithm\": \"mrtree\",\n                \"childAreaHeight\": 4500,\n                \"childAreaWidth\": 4500,\n                \"org.eclipse.elk.direction\": \"RIGHT\"\n            },\n            \"elkjs_layered_upwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"UP\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15,\n                \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n                \"elk.layered.spacing.edgeNodeBetweenLayers\": 40,\n                \"elk.layered.nodePlacement.bk.fixedAlignment\": \"BALANCED\",\n                \"layering.layerConstraint\": \"FIRST\"\n            },\n            \"elkjs_layered_downwards\": {\n                \"algorithm\": \"org.eclipse.elk.layered\",\n                \"elk.direction\": \"DOWN\",\n                \"cycleBreaking.strategy\": \"INTERACTIVE\",\n                \"layering.strategy\": \"INTERACTIVE\",\n                \"crossingMinimization.semiInteractive\": true,\n                \"separateConnectedComponents\": true,\n                \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n                \"spacing.nodeNode\": 70,\n                \"spacing.nodeNodeBetweenLayers\": 25,\n                \"spacing.edgeNode\": 25,\n                \"spacing.edgeNodeBetweenLayers\": 20,\n                \"spacing.edgeEdge\": 20,\n                \"spacing.edgeEdgeBetweenLayers\": 15\n            },\n            \"elkjs_box\": {\n                \"algorithm\": \"org.eclipse.elk.box\",\n                \"childAreaHeight\": 3000,\n                \"childAreaWidth\": 3000\n            },\n            \"pull_request_2267\": {\n                // TODO\n            }\n        }\n    }\n  \n    // Ensure that the globalAutoLayoutConfigNode (still) exists, because the user might have deleted it meanwhile...\n    // !!!!!!!!!!!!!!! CALL THIS FUNCTION EVERYWHERE THE globalAutoLayoutConfigNode IS BEING USED !!!!!!!!!!!!!!!\n    function ensureAutoLayoutConfigNode() {\n        // If we had found it previously, check if it has been deleted by the user behind our back\n        if (globalAutoLayoutConfigNode !== null) {\n            var configNode = RED.nodes.node(globalAutoLayoutConfigNode.id);\n            if (configNode === null) { globalAutoLayoutConfigNode = null; }\n        }\n\n        // If not found previously, let's go find it\n        if (globalAutoLayoutConfigNode === null) {\n            var configNodes = [];\n            console.log(\"=======================> HIER configNodes via eachConfig nodig\")\n            RED.nodes.eachConfig(function(configNode) {\n                if (configNode.type === 'auto_layout_config') { \n                    configNodes.push(configNode); \n                }\n            });\n\n            // Make sure we only have 1 config node\n            while (configNodes.length > 1) {\n                var configNode = configNodes.pop();\n                RED.nodes.remove(configNode.id);\n                RED.nodes.dirty(true);\n            }\n\n            // When we found a config node, let's use that one\n            if (configNodes.length === 1) { globalAutoLayoutConfigNode = configNodes[0]; }\n        }\n\n        // When it doesn't exist yet, create it if required\n        if (globalAutoLayoutConfigNode === null) {\n            // TODO controleren of de defaults door de config node code zelf toegepast worden????\n\n            // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n            // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n            // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n            // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n            globalAutoLayoutConfigNode = {\n                id: RED.nodes.id(),\n                _def: RED.nodes.getType(\"auto_layout_config\"),\n                type: \"auto_layout_config\",\n                hasUsers: false, \n                users: [],\n                // TODO default values for all properties\n                name: \"AutoLayout\",\n                label: function() { return this.name || \"AutoLayout\"},\n                algorithm: \"dagre_lr\", // Default algorithm\n                settings: JSON.stringify(getDefaultSettings()) // Start with the default settings per algorithm\n            }\n\n            // Add the new config node to the collection of Node-RED nodes\n            RED.nodes.add(globalAutoLayoutConfigNode);\n\n            // Make sure the \"Deploy\" button becomes active\n            RED.nodes.dirty(true);\n        }\n    }\n\n    function executeAutoLayout() {\n        ensureAutoLayoutConfigNode();\n\n        let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n        let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n        let selection = findSelectedNodes();\n\n        if (!selection) {\n            return;\n        }\n\n        switch(currentAlgorithm) {\n            case \"dagre_lr\":\n            case \"dagre_longest_path\":\n                // Code take from https://pastebin.com/TJRFD3mg\n                // Which came from https://discourse.nodered.org/t/read-flows-json-and-position-the-nodes-in-most-efficient-readable-way/78158/12\n                var g = new dagre.graphlib.Graph();\n                g.setGraph(currentAlgorithmSettings);\n                g.setDefaultEdgeLabel(function () { return {}; });                       \n\n                for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                    var n = selection.allnodes[idx];\n                    g.setNode(n.id, {\n                        ...n,\n                    })\n                }\n                \n                // The above loop can be replaced by :\n                // for (var idx = 0; idx < selection.allnodes.length; idx++) {\n                //     var node = selection.allnodes[idx];\n                //     var clonedNode = Object.assign({}, node);\n                //     g.setNode(n.id, clonedNode);\n                // }\n\n\n                for (var idx = 0; idx < selection.alledges.length; idx++) {\n                    var e = selection.alledges[idx];\n                    g.setEdge(e.sources[0], e.targets[0])\n                }\n\n                dagre.layout(g);\n                \n                var nodes = g.nodes().map(function (v) {\n                     return {\n                          ...g.node(v)\n                        }\n                })   \n                \n                try {\n                    moveNodes(selection.fixedNodeId, nodes);\n                } catch ( ex ) {\n                    console.error( \"Dagre exception moving nodes\", ex)\n                    // ensure that dagre errors are also shown as notifications in Node-RED.\n                    RED.notify(\"Dagre autoroute error: \" + ex);\n                }\n                break;\n            case \"elkjs_mr_tree\": \n            case \"elkjs_layered_upwards\": \n            case \"elkjs_layered_downwards\": \n            case \"elkjs_box\": \n                // see https://github.com/kieler/elkjs#api for more details\n                var graph = {\n                    id: \"root\",\n                    layoutOptions: currentAlgorithmSettings,\n                    children: selection.allnodes,\n                    edges: selection.alledges\n                };\n\n                const elk = new ELK();\n\n                elk.layout(graph)\n                    .then((g) => {\n                        moveNodes(selection.fixedNodeId, g.children);\n                    })\n                    .catch((ex) => {\n                        console.error( \"ELKjs exception moving nodes\", ex)\n                        RED.notify(\"ElkJs autoroute error: \" + ex);\n                    });\n                break;\n            \n            case \"pull_request_2267\": \n                // Code Taken from https://github.com/node-red/node-red/pull/2267/files\n                // I only replaced 'selection' by 'selection_', but it would be better to use the above 'selection' variable.\n                var selection_ = RED.view.selection();\n                \n                if (!selection_.nodes || selection_.nodes.length !== 1) {\n                    RED.notify(\"Select exactly one node\");\n                    return;\n                }\n                \n                var ns = undefined;\n                if (selection_.nodes[0].type == \"group\") {\n                    ns = RED.group.getNodes(selection_.nodes[0])\n                } else {\n                    ns = RED.nodes.getAllFlowNodes(selection_.nodes[0]);\n                }\n\n                // Find Input node\n\n                var nodes = {};\n                var minRank = 0;\n                var stack = [];\n                var candidateInputs = {};\n                var candidateOutputs = {};\n                ns.forEach(function (n) {\n                    candidateInputs[n.id] = n;\n                    candidateOutputs[n.id] = n;\n                    nodes[n.id] = {\n                        n: n,\n                        i: [],\n                        o: [],\n                        d: -1, // depth from start\n                        r: -1, // rank order at that depth\n                        downstream: 0\n                    }\n                });\n                RED.nodes.eachLink(function (link) {\n                    if (nodes[link.source.id] || nodes[link.target.id]) {\n                        nodes[link.source.id].o.push(link.target.id);\n                        nodes[link.target.id].i.push(link.source.id);\n                        delete candidateInputs[link.target.id]\n                        delete candidateOutputs[link.source.id]\n                    }\n                })\n\n                var inputs = Object.keys(candidateInputs);\n                var outputs = Object.keys(candidateOutputs);\n\n                if (inputs.length > 1) {\n                    RED.notify(\"Multiple start points - bailing\")\n                    return;\n                }\n\n                if (outputs.length === 0) {\n                    RED.notify(\"No outputs - is this a big loop? Bailing\");\n                    return;\n                }\n\n                function applyDepth(id, d) {\n                    if (nodes[id].d < d) {\n                        nodes[id].d = d;\n                        nodes[id].o.forEach(function (nid) {\n                            applyDepth(nid, d + 1);\n                        })\n                    }\n                }\n                applyDepth(inputs[0], 0)\n\n                function calculateDownstream(id, downstream) {\n                    nodes[id].downstream += downstream;\n                    nodes[id].i.forEach(function (nid) {\n                        calculateDownstream(nid, nodes[id].downstream + 1);\n                    })\n                }\n                outputs.forEach(function (id) {\n                    calculateDownstream(id, 0)\n                })\n\n                var ranks = {};\n                function rankNodes(node) {\n                    if (node.r === -1) {\n                        ranks[node.d] = ranks[node.d] || [];\n                        node.r = ranks[node.d].length;\n                        ranks[node.d].push(node);\n                        node.o.sort(function (a, b) {\n                            return nodes[b].downstream - nodes[a].downstream\n                        })\n                        node.o.forEach(function (nid) {\n                            rankNodes(nodes[nid])\n                        })\n                    }\n                }\n                rankNodes(nodes[inputs[0]]);\n                function shuffleRanks(node) {\n                    var pushed = false;\n                    if (node.o.length > 1) {\n                        var outputs = node.o.slice(0);\n                        outputs.sort(function (a, b) {\n                            if (nodes[a].d === nodes[b].d) {\n                                return nodes[a].r - nodes[b].r;\n                            } else {\n                                return nodes[b].d - nodes[a].d;\n                            }\n                        })\n                        // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n                        var rank = nodes[outputs[0]].r;\n                        var depth = nodes[outputs[0]].d;\n                        for (var i = 1; i < outputs.length; i++) {\n                            // console.log(outputs[i]);\n                            var n = nodes[outputs[i]];\n                            if (n.d !== depth && n.r === rank) {\n                                // need to move n down one.\n                                var r = n.r;\n                                ns.forEach(function (_n) {\n                                    var nn = nodes[_n.id];\n                                    if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                                        pushed = true;\n                                        nn.r++;\n                                    }\n                                })\n                            }\n                            depth = n.d;\n                            rank = n.r;\n                        }\n                    }\n                    node.o.forEach(function (n) {\n                        pushed = pushed || shuffleRanks(nodes[n])\n                    })\n                    return pushed;\n                }\n                var shuffle = function () {\n                    if (shuffleRanks(nodes[inputs[0]])) {\n                        shuffle();\n                    }\n                }\n                shuffle();\n\n\n                var x = nodes[inputs[0]].n.x;\n                var y = nodes[inputs[0]].n.y;\n                var changedNodes = [];\n                ns.forEach(function (n) {\n                    var d = nodes[n.id].d;\n                    var r = nodes[n.id].r;\n\n                    changedNodes.push({\n                        n: n,\n                        ox: n.x,\n                        oy: n.y,\n                        moved: n.moved\n                    });\n\n                    n.x = x + d * 200;\n                    n.y = y + r * 50;\n                    n.dirty = true;\n                    // n.dirtyStatus = true;\n                    // n.status = {\n                    //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n                    // }\n                });\n\n                if (changedNodes.length > 0) {\n                    RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n                    RED.nodes.dirty(true);\n                    RED.view.redraw(true);\n                }\n                \n                break;\n\n        }\n    }\n\n    RED.plugins.registerPlugin(\"autolayout-sidebar-plugin\", {});\n\n    // Make sure the editor is completely loaded, before filling the sidebar with content.\n    // Because only just before that, RED.nodes will be loaded.  Otherwise RED.nodes.getType(\"auto_layout_config\") would \n    // return undefined, and RED.nodes.add would throw an exception...\n    // The problem is that Node-RED does not offer an \"editor-loaded\" event.\n    // I did a feature request for that, but for some obscure reason it was not accepted...\n    // (see https://discourse.nodered.org/t/new-editor-event-when-all-nodes-have-been-loaded/60314)\n    // On Discourse there was a workaround shared, but the 'workspace:change' is emitted a bit too early.\n    // Because it is emitted just before the config nodes are loaded, so RED.nodes.eachConfig above would not find our config node.\n    // (see https://discourse.nodered.org/t/add-sidebar-tab-on-app-start-not-working/64726/4).\n    // I found that the 'runtime-state' event is triggered just after the config nodes are loaded, so it works fine. \n    // But it is a non-official unpublished event, so it might be changed or removed in the future...\n    var dothisOneTimePlease = () => {\n        RED.events.off('runtime-state', dothisOneTimePlease )\n\n        // Register an action so the user could bind a keyboard shortcut to show the auto-layout sidebar\n        // but avoid an \"Error: Cannot override existing action\" error in the browser console:\n        if( RED.actions.list().filter( (d) => { return d.id == \"core:auto-layout-flow\"} ).length == 0 ) {\n            RED.actions.add(\"core:auto-layout-flow\", executeAutoLayout);\n        }\n        \n        // The html content of the sidebar has been specified below as a data-template, from where it can be loaded:\n        var content = $($('script[type=\"text/x-red\"][data-template-name=\"auto_layout_sidebar\"]').i18n().html());\n       \n        // Add a \"Auto Layout\" tabsheet to the right sidebar panel, in which this sidebar panel can be displayed\n        RED.sidebar.addTab({\n            id: \"sidebar-auto-layout\",\n            label: \"auto_layout\", // short name for the tab\n            name: \"Auto Layout\", // long name for the menu\n            content: content,\n            closeable: true,\n            disableOnEdit: true,\n            iconClass: \"fa fa-outdent\"\n        });\n\n        // Show the algorithm settings as json in a typedinput element (in the sidebar)\n        $(\"#node-input-settings\").typedInput({\n            default: 'json',\n            types:['json']\n        });\n\n        // When the algorithm properties are changed in the sidebar, then store them into the config node\n        $(\"#node-input-settings\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithmSettings = $(this).typedInput('value');\n            let currentAlgorithm = globalAutoLayoutConfigNode.algorithm;\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            //if (globalAutoLayoutConfigNode.settings[currentAlgorithm] != currentAlgorithmSettings) {\n                let settingsObj = JSON.parse(globalAutoLayoutConfigNode.settings);\n                settingsObj[currentAlgorithm] = JSON.parse(currentAlgorithmSettings);\n                globalAutoLayoutConfigNode.settings = JSON.stringify(settingsObj);\n                RED.nodes.dirty(true);\n            //}\n        })\n\n        // When the algorithm is changed in the sidebar, then store it into the config node\n        $(\"#node-input-algorithm\").on(\"change\", function() {\n            ensureAutoLayoutConfigNode();\n\n            let currentAlgorithm = $(this).val();\n            let currentAlgorithmSettings = JSON.parse(globalAutoLayoutConfigNode.settings)[currentAlgorithm];\n\n            // When the property value has changed, save it in the config node and activate the 'deploy' button.\n            // Remark: don't check the input type (i.e. use != instead of  !==) because we will get the number values as strings...\n            if (globalAutoLayoutConfigNode.algorithm != currentAlgorithm) {\n                globalAutoLayoutConfigNode.algorithm = currentAlgorithm;\n                RED.nodes.dirty(true);\n            }\n            \n            $(\"#node-input-settings\").typedInput('value', JSON.stringify(currentAlgorithmSettings));\n        })\n        $(\"#node-input-algorithm\").change();\n\n        $(\"#auto-layout-button\").click( executeAutoLayout );\n\n        $(\"#auto-layout-revert-button\").click(function() {\n            // revert the last change by calling undo but also maintain the \n            // original selection, making it easier to try out different \n            // algorithms.\n            var sle = RED.view.selection();\n\n            // this will clear the selection, hence make a copy beforehand\n            RED.actions.invoke(\"core:undo\");\n\n            RED.view.select(sle);\n        })\n    };\n    RED.events.on('runtime-state', dothisOneTimePlease )\n})();\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"auto_layout_sidebar\">\n    <div style=\"position: relative; height: 100%; margin: 15px;\">\n        <label for=\"node-input-algorithm\" style=\"margin-top: 25px\"><i class=\"fa fa-terminal\"></i> Algorithm</label>\n        <select id=\"node-input-algorithm\">\n            <option value=\"dagre_lr\">Dagre LR</option>\n            <option value=\"dagre_longest_path\">Dagre Longest Path</option>\n            <option value=\"elkjs_mr_tree\">ELKjs Mr. Tree</option>\n            <option value=\"elkjs_layered_upwards\">ELKjs Layered Upwards</option>\n            <option value=\"elkjs_layered_downwards\">ELKjs Layered Downwards</option>\n            <option value=\"elkjs_box\">ELKjs Box</option>\n            <option value=\"pull_request_2267\">Pull Request 2267</option></select>\n        </select>\n\n        <label for=\"node-input-settings\" style=\"margin-top: 15px\"><i class=\"fa fa-cog\"></i> Settings</label>\n        <input type=\"text\" id=\"node-input-settings\" style=\"width: 100%; margin-top: 30px\">\n        \n        <button type=\"button\" id=\"auto-layout-button\" style=\"font-size: larger;width:100%;background-color: yellowgreen;color:white;border: none;height: 32px;margin-top: 30px;\">Execute auto-layout</button>\n\n        <button type=\"button\" id=\"auto-layout-revert-button\" style=\"font-size: smaller;width:50%;background-color: rgb(225, 119, 129); color: rgb(246, 246, 246); border: 1px solid rgb(173, 22, 37); height: 32px; margin-top: 30px;\"><i class=\"fa fa-undo\"></i> Undo</button>\n    </div>\n</script>\n","output":"str","x":1313,"y":1263,"wires":[["0faee7972091bb8c"]]},{"id":"0faee7972091bb8c","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"auto_layout_config.js","filename":"auto_layout_config.js","format":"javascript","syntax":"mustache","template":"/**\r\n * Copyright 2023 Bart Butenaers & Gerrit Riessen\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n module.exports = function (RED) {\r\n    const fs   = require('fs');\r\n    const path = require('path');\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var elkJsBundledPath = require.resolve(\"elkjs\");\r\n\r\n    // For example suppose the require.resolved results in elkJsBundledPath = /home/pi/.node-red/node_modules/elkjs/lib/main.js\r\n    elkJsBundledPath = elkJsBundledPath.replace(\"main.js\", \"elk.bundled.js\");\r\n\r\n    if (!fs.existsSync(elkJsBundledPath)) {\r\n        console.log(\"Javascript file \" + elkJsBundledPath + \" does not exist\");\r\n        elkJsBundledPath = null;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------\r\n    // Determining the path to the files in the dependent elkjs module once.\r\n    // See https://discourse.nodered.org/t/use-files-from-dependent-npm-module/17978/5?u=bartbutenaers\r\n    // -------------------------------------------------------------------------------------------------\r\n    var dagreJsMinifiedPath = require.resolve(\"@dagrejs/dagre\");\r\n\r\n    // For example suppose the require.resolved results in dagreJsMinifiedPath = /home/pi/.node-red/node_modules/@dagrejs/dagre/index.js\r\n    dagreJsMinifiedPath = dagreJsMinifiedPath.replace(\"index.js\", \"dist\" + path.sep + \"dagre.min.js\");\r\n\r\n    if (!fs.existsSync(dagreJsMinifiedPath)) {\r\n        console.log(\"Javascript file \" + dagreJsMinifiedPath + \" does not exist\");\r\n        dagreJsMinifiedPath = null;\r\n    }\r\n \r\n    function AutoLayoutConfigNode (config) {\r\n        RED.nodes.createNode(this, config)\r\n        // Remark: we only store here the server-relevant settings\r\n    }\r\n\r\n    RED.nodes.registerType('auto_layout_config', AutoLayoutConfigNode);\r\n    \r\n    // Make all the javascript library files available to the FLOW EDITOR.\r\n    // We use a separate endpoint, since no permissions are required to read those resources.\r\n    // Otherwise we get 'unauthorized' problems, when calling this endpoint from a 'script' tag.\r\n    // See details on https://discourse.nodered.org/t/unauthorized-when-accessing-custom-admin-endpoint/20201/4\r\n    RED.httpAdmin.get('/auto_layout_config/lib/:libraryname', function(req, res){ \r\n        // Send the requested js library file to the client\r\n        switch (req.params.libraryname) {\r\n            case \"elkjs\":\r\n                // The ElkJs graph layout library\r\n                if (elkJsBundledPath) {\r\n                    res.sendFile(elkJsBundledPath);\r\n                    return;\r\n                }\r\n                break;\r\n            case \"dagrejs\":\r\n                // The DagreJs graph layout library\r\n                if (dagreJsMinifiedPath) {\r\n                    res.sendFile(dagreJsMinifiedPath);\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n        \r\n        res.writeHead(404);\r\n        return res.end(\"The requested library is not supported\");\r\n    });\r\n}\r\n","output":"str","x":1313,"y":1313,"wires":[["b1a2da70219bf0d2"]]},{"id":"b1a2da70219bf0d2","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n    \"name\": \"@bartbutenaers/node-red-autolayout-sidebar\",\n    \"version\": \"0.0.3\",\n    \"description\": \"A sidebar plugin for Node-RED to offer auto-layouting\",\n    \"dependencies\": {\n        \"elkjs\": \"^0.8.2\",\n        \"@dagrejs/dagre\": \"^1.0.4\"\n    },\n    \"author\": {\n        \"name\": \"Bart Butenaers\"\n    },\n    \"contributors\": [\n        {\n            \"name\": \"Gerrit Riessen\",\n            \"url\": \"https://github.com/gorenje\"\n        }\n    ],\n    \"license\": \"Apache-2.0\",\n    \"keywords\": [\"node-red\", \"auto\", \"layout\", \"graph\", \"sidebar\"],\n    \"bugs\": {\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar/issues\"\n    },\n    \"homepage\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar#readme\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/bartbutenaers/node-red-autolayout-sidebar.git\"\n    },\n    \"publishConfig\": {\n        \"access\": \"public\"\n    },\n    \"engines\": {\n        \"node\": \">=18.0.0\"\n    },\n    \"node-red\": {\n        \"version\": \">=2.0.0\",\n        \"nodes\": {\n            \"auto_layout_config\": \"auto_layout_config.js\"\n        },\n        \"plugins\": {\n          \"sidebar-plugin\": \"auto_layout_plugin.html\"\n        }\n    }\n}\n","output":"str","x":1313,"y":1363,"wires":[["c6cf942a79e1c1c2"]]},{"id":"c6cf942a79e1c1c2","type":"PkgFile","z":"b3d8d3a926ff80e7","g":"e0c3f18adc6bcba2","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# node-red-autolayout-sidebar\nA sidebar plugin for Node-RED to offer auto-layouting, i.e. rearrange the selected nodes in a flow (based om specified layout parameters).\n\nAll credits for the layout logic go to [Gerrit Riessen](https://github.com/gorenje)!  This sidebar plugin is based on his [node-red-contrib-auto-alignment](https://github.com/gorenje/node-red-contrib-auto-alignment) node, and some code snippets are copied shameless :-)\nSince I am more a fan of sidebars (instead of plugins) for this kind of flow editor features, I developed this sidebar as an addition to Gerrit's node-red-contrib-auto-alignment node.\n\n## Install\nRun the following npm command in your Node-RED user directory (typically ~/.node-red):\n```\nnpm install @bartbutenaers/node-red-autolayout-sidebar\n```\nCaution: NodeJs version ***17.0.0*** is minimal required by the DagreJs graph library!\n\n## Experimental\nThis sidebar plugin is experimental, which means some breaking changes might be introduced in the near future!\n\nThe reason is that there are a number of uncertainties at this moment:\n+ Which algorithm fits best for Node-RED flows?\n+ Is one of these algorithms capable to handle all the use cases?\n+ And so on...\n\nFor more details on why there isn't a one-size-fits-all solution, check out discussions [here](https://discourse.nodered.org/t/noisecraft-anyone-heard-of-it/79813/32) and [here](https://discourse.nodered.org/t/node-red-auto-layouting-using-elkjs-dagre/81052) on discourse.\n\n## Issues\nIf you have an issue or question about the algorithms (i.e. how the nodes are layouted), it might be better to start a new discussion on the Node-RED [forum](https://discourse.nodered.org/).  That way others in the community can think loud, and join the discussion.  Please mention Gerrit (@gregorius) and me (@bartbutenaers) in that discussion, to make sure we get a notification about it.\n\n## Node usage\nThe following demo shows how to auto layout the selected nodes in a flow.\n\n![auto_layout_demo](https://github.com/bartbutenaers/node-red-autolayout-sidebar/assets/14224149/10c5f04d-e0bb-4a55-ad24-571b2aba9646)\n\nThe steps described in detail:\n\n1. Open the *\"Auto Layout\"* sidebar:\n\n2. Select a node in the flow (from where on the successive nodes need to be auto layouted).\n\n3. Optionally select another layouting algorithm in the sidebar.\n\n4. Optionally change the layout parameters of the selected algorithm, via the json typedinput field.\n\n5. Press the green *\"Execute auto layout\"* button in the sidebar.\n\n## Node Undo\n\nBecause the undo does not work in the sidebar, an undo button has been added:\n\n![img](https://cdn.openmindmap.org/content/1699442004757_auto-layout-undo.gif)\n\nThe Undo button works just as normal undo and multiple click will cause other things to be undone aswell: the undo button is **not** specific to the layout, it **will** undo other actions.\n\n## Node properties\n\n### Algorithm\nThe following layouting algorithms are currently supported:\n+ ***Dagre LR***: arrange the nodes from left to right (via the Dagre library).\n+ ***Dagre Longest Path***: arrange the nodes based on the longest path via the Dijkstra's algorithm (via the Dagre librar).\n+ ***ELKjs Mr. Tree***: arrange the nodes in a flow via a parent-children tree hierarchy.\n+ ***ELKjs Layered Upwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers upwards (via the ELKjs library).\n+ ***ELKjs Layered Downwards***: arrange the nodes in a flow by arranging as many edges as possible in subsequent layers downwards (via the ELKjs library).\n+ ***ELKjs Box***: arrange the nodes in a flow by packing them like boxes.\n+ ***Pull Request 2267***: algorithm implemented in a draft [pull request](https://github.com/node-red/node-red/pull/2267) dedicated for Node-RED.\n\n### Settings\nThe settings depend on the selected layouting algorithm.\n\nSettings for the dagrejs library (see a full list of all properties in their [wiki](https://github.com/dagrejs/dagre/wiki#configuring-the-layout)):\n+ ***rankdir***: direction of the layout (e.g. “LR” stands for Left to Right).\n+ ***marginx***: horizontal margin (in pixels) around the nodes.\n+ ***marginy***: vertical margin (in pixels) around the nodes.\n+ ***ranker***: method used for ranking nodes.\n+ ***nodesep***: separation between adjacent nodes in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n+ ***ranksep***: separation between adjacent levels in the graph. This will be a horizontal separation (when rankdir is ‘TB’ or ‘BT’), or a vertical separation (when rankdir is ‘LR’ or ‘RL’).\n\n\nSettings for the ELKjs library (see a full list of all properties in their [documentation](https://eclipse.dev/elk/reference/options.html)):\n+ ***algorithm***: the layout algorithm1.\n+ ***elk.direction***: the main layout direction (\"UP\" or \"DOWN\").\n+ ***cycleBreaking.strategy***: \"INTERACTIVE\": This sets the strategy for cycle breaking (removing cycles in the graph for layout purposes) to interactive, which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge dummies3.\n+ ***layering.strategy***: the strategy to assign nodes to layers.\n+ ***crossingMinimization.semiInteractive***: when true, semi-interactive crossing minimization is activated (which preserves the order of nodes within a layer but still minimizes crossings between edges connecting long edge).\n+ ***separateConnectedComponents***: when true, each connected component of the graph is processed separately.\n+ ***strategy***: \"NETWORK_SIMPLEX\": This sets the strategy for node placement (determining the x and y coordinates of nodes) to network simplex6.\n+ ***nodeNode***: minimal distance to be preserved between each two nodes.\n+ ***spacing.nodeNodeBetweenLayers***: spacing to be preserved between any pair of nodes of two adjacent layers.\n+ ***spacing.edgeNode***: spacing to be preserved between nodes and edges.\n+ ***spacing.edgeNodeBetweenLayers***: spacing to be preserved between nodes and edges that are routed next to the node’s layer.\n+ ***spacing.edgeEdge***: spacing to be preserved between any two edges.\n+ ***spacing.edgeEdgeBetweenLayers***: spacing between pairs of edges crossing the same layer.\n+ ***hierarchyHandling***: controls how hierarchy is handled in the layout (e.g. \"INCLUDE_CHILDREN\" means that child nodes are included in the layout).\n+ ***edgeNodeBetweenLayers***: spacing between edges and nodes between layers.\n+ ***nodePlacement.bk.fixedAlignment***: the alignment of nodes during node placement (via the Brandes & Köpf node placement algorithm).\n+ ***layerConstraint***: \"FIRST\" constrains a node to be placed in the first layer.\n+ ***childAreaHeight***: the height of the area available for placing child nodes.\n+ ***childAreaWidth***: the width of the area available for placing child nodes.\n\n## Sharing Settings\n\nIf you have a layout configuration that you wish to include in the presets, then please share your configuration in the [Node-RED forum](https://discourse.nodered.org/t/announcement-node-red-autolayout-sidebar-experimental-version-s/82263).\n\nAny suggestions and ideas are most welcome :+1:\n\n","output":"str","x":1313,"y":1413,"wires":[[]]}]