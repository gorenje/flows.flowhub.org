[{"id":"5e055769e7d91777","type":"tab","label":"[mindmap] Node-RED by Examples","disabled":false,"info":"","env":[]},{"id":"94f6b2b3609259e4","type":"Topic","z":"5e055769e7d91777","name":"Node-RED by alternative examples","info":"","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":314,"y":1205.0625,"wires":[["b793bc59c754b459","622c1bf013e40e8f","d85585f13ebbaaa5","3337df779ec63b90","c3d66d30b0053e41","c6e2de8178aac0b1"]]},{"id":"b793bc59c754b459","type":"Question","z":"5e055769e7d91777","name":"What is Node-RED","info":"Node-REDs has been developed in Node.js and is built around a client-server architecture. All flows are designed in the visual web-based editor and deployed to the server where flows are then executed. Flows consist of executable nodes (nodes represent algorithmic code blocks) interconnected be data links that model the data flows between nodes. Nodes can have multiple inputs and outputs so that data is cloned and shared amongst nodes. Flow execution is transparently concurrent as data flows are modelled and not algorithmic execution. Users model how the data flows between separate nodes that which are executed concurrently, if and when the data becomes available. This makes triggering background tasks trivial as it is a matter of diverting data to multiple nodes.\n","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":785,"y":218.25,"wires":[["cfa028c38b947e30","9555a4ebf5ad73a7","7a64236a8ce7a102","1e2e7d9693e26e04","c4fd17d41930ac60","d3801976a092ac0e","c64b37c4b409035c"]]},{"id":"9555a4ebf5ad73a7","type":"Observation","z":"5e055769e7d91777","name":"Data driven","info":"Modelling the data flows between nodes. Nodes represent execution units while connections between nodes directs the flow of data.","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1242,"y":155.5,"wires":[[]]},{"id":"7a64236a8ce7a102","type":"Observation","z":"5e055769e7d91777","name":"Event driven","info":"Event emitters communicate indirectly with event listeners. This decouples the code base making it more flexible.\n\n","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1246,"y":206,"wires":[["46cdb3602fd473a8"]]},{"id":"1e2e7d9693e26e04","type":"Observation","z":"5e055769e7d91777","name":"Visual coding","info":"Two dimensional visual coding environment provides a between overview of the code base, allowing non-coders to also understand the underlying algorithms.\n\nIt becomes simpler to represent business logic to business people.","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1246,"y":255,"wires":[["d17118e39aa8e765"]]},{"id":"c4fd17d41930ac60","type":"Observation","z":"5e055769e7d91777","name":"Low code","info":"Since node-RED takes care of all the boilerplate code, i.e., converting between formats, obtain data from the internet, listening for connections, the developer is left with only specific code that is required to solve their problems.","createdAt":"2023-07-03T08:08:48.530Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1238,"y":310,"wires":[[]]},{"id":"8adbfc93fe59bbc4","type":"Idea","z":"5e055769e7d91777","name":"","info":"Drawing Tool","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1288,"y":1797,"wires":[["34dae0e77ff1239b","2a79d45efeeddac9"]]},{"id":"c6e2de8178aac0b1","type":"Text","z":"5e055769e7d91777","name":"","info":"A collection of ideas that could be done with Node-RED to give people an understanding of how useful Node-RED can be.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":791,"y":1866,"wires":[["8adbfc93fe59bbc4","6e5cd4136d0bf1d8","4d24236f14221e6f","cfa095c2329a10d2","99536caab9741217","6f354eb1afe5f175","97082f61cfaae391","b19270c6ecaddf73","2a7aed19e83f998e","30f6bd5a3c9a565b","68c878fb2258f96b","ca5f119e63d46f93","4c8c5f5e5f1e475b","10f56f2b20bb21c6","adb7021eb4871c6d","a0cbea9ac7de3529","b8880a1d4be5a69c"]]},{"id":"6e5cd4136d0bf1d8","type":"Idea","z":"5e055769e7d91777","name":"","info":"Demonstrate how ANNs work","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1344,"y":1868,"wires":[["84d9af3921bf7cbd","b0cd641e7960f1dc"]]},{"id":"4d24236f14221e6f","type":"Idea","z":"5e055769e7d91777","name":"","info":"As backend for a larger application","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1358,"y":1707,"wires":[["61b9d871e1798c90"]]},{"id":"cfa095c2329a10d2","type":"Idea","z":"5e055769e7d91777","name":"","info":"Writermap or mindmap tool","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1336,"y":1925,"wires":[["53060772d84deaeb"]]},{"id":"99536caab9741217","type":"Idea","z":"5e055769e7d91777","name":"Simple Dashboard","info":"very simple dashboard with a button that makes an led (virtual) light to go from red to green and back again. just to give an intro into the dashboard and simple functionality","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1305,"y":2007,"wires":[[]]},{"id":"6f354eb1afe5f175","type":"Idea","z":"5e055769e7d91777","name":"Manpiulation of an SVG","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1325,"y":2093.25,"wires":[["ce17924dd8c21072"]]},{"id":"240e8df4049f1c02","type":"Blog-Post","z":"5e055769e7d91777","name":"Web Router","info":"Each web application has a collection of routes, i.e. URL that get accessed. This is no different here.\n\nMost web frameworks now have the concept of a [Router or URL mapping](https://en.wikipedia.org/w/index.php?title=Web_framework&oldid=1146176403#URL_mapping) the defines the endpoints for the web application.\n\nThe same can be done in Node-RED in form of a flow that accepts all HTTP requests and directs these to the correct flow to obtain a response.\n\nFlow: https://flowhub.org/f/40ea5f2aea6592ae\n\nThere is also a [dynamic router flow](https://flowhub.org/f/c562c43e69bcf0af).\n\nVarious router: [Rails](https://guides.rubyonrails.org/routing.html), [Flask](https://flask.palletsprojects.com/en/2.2.x/quickstart/#routing), [Express](https://expressjs.com/en/guide/routing.html), etc\n","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:07:13.316Z","x":1832,"y":1520,"wires":[[]]},{"id":"61b9d871e1798c90","type":"Code-Base","z":"5e055769e7d91777","name":"RedBack","info":"Node-RED as a backend\n\nNode-RED is a backend but can also act as a backend. The point of the project was to show that a backend for a web application (or mobile application or both) can be defined and run in Node-RED.\n\nNode-RED then provides a visual representation of a complete backend for an application.\n\nhttps://github.com/gorenje/redback","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1583,"y":1608,"wires":[["240e8df4049f1c02","f81d2db4c757f775","e9861c3ae3337d12","34bfb9144dc3c85e","c6e931ad0bfcc0ed"]]},{"id":"f81d2db4c757f775","type":"Blog-Post","z":"5e055769e7d91777","name":"Email templates","info":"Because Node-RED supports a template engine, it is possible to defined both HTML and text version of various emails that the platform sends out.\n\nEach template represents a customer interaction with the platform, be it login or resend password, each email template has a reason to be there.\n\nThese are templates with replacement made by the templating language - Moustache in this case.\n\n~~https://demo.openmindmap.org/omm/#flow/459c271a96458c7c~~","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:08:16.317Z","x":1839,"y":1571,"wires":[[]]},{"id":"e9861c3ae3337d12","type":"Blog-Post","z":"5e055769e7d91777","name":"Admin tool","info":"Admin tool is used by customer support and internal employees for solving customer problems. As such, this tool is restricted in access to only authorised people.\n\nIt provide a completely holistic view of all data stored in the database and is optimised for usage by customer support.\n\nDefinition: \n- ~~https://demo.openmindmap.org/omm/#flow/00143787a55e03a5~~\n- ~~https://demo.openmindmap.org/omm/#flow/3270a3a7e718167b~~\n\nInterface:\n- ~~https://demo.openmindmap.org/ui/#!/1~~\n- ~~https://demo.openmindmap.org/ui/#!/2~~\n- ~~https://demo.openmindmap.org/ui/#!/3~~\n- ~~https://demo.openmindmap.org/ui/#!/4~~\n- ~~https://demo.openmindmap.org/ui/#!/5~~","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:08:07.634Z","x":1831,"y":1616,"wires":[[]]},{"id":"34bfb9144dc3c85e","type":"Blog-Post","z":"5e055769e7d91777","name":"Background jobs","info":"A backend also needs regular running jobs to do various administrative tasks. These jobs can also be defined in Node-RED using the inject node.\n\nFlow: ~~https://demo.openmindmap.org/omm/#flow/005ca762a75685ad~~","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:08:23.634Z","x":1850,"y":1672,"wires":[[]]},{"id":"34dae0e77ff1239b","type":"Blog-Post","z":"5e055769e7d91777","name":"Node-RED architecture","info":"Node-RED can also be used to draw architecture diagrams.\n\nFlow: https://demo.openmindmap.org/omm/#flow/a76808ea90867cf0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1877,"y":1804,"wires":[[]]},{"id":"84d9af3921bf7cbd","type":"Blog-Post","z":"5e055769e7d91777","name":"Example","info":"Flow: https://demo.openmindmap.org/omm/#flow/4e2d8c13066b705e","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1831,"y":1913,"wires":[[]]},{"id":"ce17924dd8c21072","type":"Blog-Post","z":"5e055769e7d91777","name":"Example","info":"Flow: https://demo.openmindmap.org/omm/#flow/3ebb65fdbecb182e\n\nDashboard: https://demo.openmindmap.org/ui/#!/7","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1558,"y":2110,"wires":[[]]},{"id":"622c1bf013e40e8f","type":"Question","z":"5e055769e7d91777","name":"Why use Node-RED?","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":790,"y":857,"wires":[["32dcff7cdcdb0067","bb3f136f840aa5a4","06bd24b95ecd2b6b"]]},{"id":"97082f61cfaae391","type":"Idea","z":"5e055769e7d91777","name":"RSS Aggregator","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1299,"y":2170,"wires":[["494a0c34cc0854fb","98203aeb0f20e0d4"]]},{"id":"494a0c34cc0854fb","type":"Blog-Post","z":"5e055769e7d91777","name":"Example","info":"[link](/#flow/f35f16f9b167b055)","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1514,"y":2171,"wires":[[]]},{"id":"98203aeb0f20e0d4","type":"link out","z":"5e055769e7d91777","name":"link out 1","mode":"link","links":[],"x":1503,"y":2227,"wires":[]},{"id":"d85585f13ebbaaa5","type":"Question","z":"5e055769e7d91777","name":"Similar tools?","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":782,"y":1025,"wires":[["5c7585d704bc3926","30f1e174a3e83985","4fe278c3ef8561ba","283268b10a7963ae","2526244518881c96","09ee59b794ea0e90"]]},{"id":"5c7585d704bc3926","type":"Observation","z":"5e055769e7d91777","name":"Apache Nifi","info":"https://nifi.apache.org/\n\nBut more for designing hardware architecture than general purpose development of flows for the building of something useful.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1063,"y":1026,"wires":[[]]},{"id":"32dcff7cdcdb0067","type":"Observation","z":"5e055769e7d91777","name":"Flexiblity","info":"Easily extendable using Node.js nodes and straightforward development model.\n\nEach node has a editor and server part. The editor part is in form of `.html` file and the server side in form of a `.js`.\n\nAvailable extensions are easily managed with the Palete Manager, found in settings menu.\n\nThere are many community created nodes available at https://flows.nodered.org/","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1057,"y":809,"wires":[[]]},{"id":"3337df779ec63b90","type":"Question","z":"5e055769e7d91777","name":"How does it work?","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":779,"y":501,"wires":[["608ac6f533e4a466","c5eae1d721aa2cc5","55855e230b33a671"]]},{"id":"608ac6f533e4a466","type":"Observation","z":"5e055769e7d91777","name":"Node.js based","info":"Completely js based with Angular frontend.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1054,"y":446,"wires":[[]]},{"id":"c5eae1d721aa2cc5","type":"Observation","z":"5e055769e7d91777","name":"Architecture","info":"Node-RED base concept is that there is an editor to model and construct flows. Each flow describes the data flow from one Node to the next. Each node can alter the data flowing through the nodes. \n\nData can be diverted, duplicated and parallelised by multiple connections between nodes. The ouput of one node can go to input to as many nodes as necessary, Node-RED will take care of the duplication and parallelisation of the data processing.\n\nFlows are modelled in a web-browser based frontend before being deployed to the server backend. There the flows are carried out.\n\nThis duality is important to keep in mind since changes made in the flow editor are not immediate reflected on the server side, only with a deploy do the editor changes become active on the server.\n\nCertain syntax checking is done in the flow editor before changes are deployed to the server. This reduces changes of errors being introduced on the server side.\n\nAlso provides a dashboard component with which interactive interfaces can be built into Node-RED. This is the interface with which the user then interacts with the server directly.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1046,"y":501,"wires":[["a0ffa7685cdfb032","c6e155d7adb25882","65f7a694b9c48f9d","37e5419cbae0a76f","f3bc2d1184b4402a"]]},{"id":"cfa028c38b947e30","type":"Observation","z":"5e055769e7d91777","name":"Flow-based programming (FBP)","info":"https://en.wikipedia.org/wiki/Flow-based_programming\n\n> In computer programming, flow-based programming (FBP) is a programming paradigm that defines applications as networks of \"black box\" processes, which exchange data across predefined connections by message passing, where the connections are specified externally to the processes. These black box processes can be reconnected endlessly to form different applications without having to be changed internally. FBP is thus naturally component-oriented. ","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1073,"y":113,"wires":[[]]},{"id":"bb3f136f840aa5a4","type":"Observation","z":"5e055769e7d91777","name":"Visually understandable","info":"Code is visualised so that it becomes simpler to explain.\n\nCode because two-dimensional and therefore gains from being more expressive.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1105,"y":857,"wires":[[]]},{"id":"a0ffa7685cdfb032","type":"Observation","z":"5e055769e7d91777","name":"Editor and Server","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1345,"y":475,"wires":[["9f98e18b5cfcbddf"]]},{"id":"9f98e18b5cfcbddf","type":"Observation","z":"5e055769e7d91777","name":"Communication via Web-Sockets","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1669,"y":430,"wires":[[]]},{"id":"c6e155d7adb25882","type":"Observation","z":"5e055769e7d91777","name":"Browser based editor frontend","info":"Not mobile conform however who spends any length of time coding on their phones?\n\nThe expectation that the editor works on a mobile phone is over ambitions.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1380,"y":533,"wires":[["2087d5df6b38a3a0","2b78f5727269ee60"]]},{"id":"65f7a694b9c48f9d","type":"Observation","z":"5e055769e7d91777","name":"Server runs on Node.js","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1349,"y":591,"wires":[["701da15a9ec54fef"]]},{"id":"2087d5df6b38a3a0","type":"Disadvantage","z":"5e055769e7d91777","name":"Editor - Cons","info":"1. Not Mobile Conform. Makes showing people the stuff you can do with Node-RED difficult, one always needs a laptop in the vicinity.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1709,"y":533,"wires":[[]]},{"id":"06bd24b95ecd2b6b","type":"Observation","z":"5e055769e7d91777","name":"Active forum and community","info":"Many users make for many help people to get questions answered.\n\nForum: https://discourse.nodered.org/\n\n","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1114,"y":913,"wires":[[]]},{"id":"30f1e174a3e83985","type":"Observation","z":"5e055769e7d91777","name":"Yahoo Pipes","info":"https://en.wikipedia.org/wiki/Yahoo!_Pipes","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1062,"y":975,"wires":[[]]},{"id":"4fe278c3ef8561ba","type":"Observation","z":"5e055769e7d91777","name":"Blender Nodes","info":"https://artisticrender.com/the-complete-beginners-guide-to-blender-nodes-eevee-cycles-and-pbr/\n\nVery specific to Blender and everything to do with 3D.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1072,"y":1079,"wires":[[]]},{"id":"c3d66d30b0053e41","type":"Question","z":"5e055769e7d91777","name":"How to try it out?","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":789,"y":1205.0625,"wires":[["0171724894e199c8","c938cd7943577470","8a5a8656d529b6eb","b96f89c2d1bc50ce"]]},{"id":"0171724894e199c8","type":"Observation","z":"5e055769e7d91777","name":"Install Locally","info":"https://nodered.org/docs/getting-started/local","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1077,"y":1144,"wires":[[]]},{"id":"c938cd7943577470","type":"Observation","z":"5e055769e7d91777","name":"Docker image ","info":"https://nodered.org/docs/getting-started/docker","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1070,"y":1205.0625,"wires":[[]]},{"id":"8a5a8656d529b6eb","type":"Observation","z":"5e055769e7d91777","name":"Heroku hosting","info":"https://github.com/joeartsea/node-red-heroku\n\n- admin is secured with user/password\n- flows are stored in postgres\n\nhttps://github.com/gorenje/node-red-heroku\n\n- dashboard is also secured with user/password","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1071,"y":1259,"wires":[["a0bf3650b4630dfb"]]},{"id":"a0bf3650b4630dfb","type":"Advantage","z":"5e055769e7d91777","name":"","info":"Read-only mode to allow users to play around but not change anything","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1507,"y":1232,"wires":[[]]},{"id":"b96f89c2d1bc50ce","type":"Disadvantage","z":"5e055769e7d91777","name":"No Serverless static version with single flow.json","info":"The server is used to deliver the `flows.json` to the frontend, so there always has to be a server running on a server somewhere.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1172,"y":1321,"wires":[[]]},{"id":"55855e230b33a671","type":"Observation","z":"5e055769e7d91777","name":"flows.json","info":"All flows are stored in a single `.json` file on the server. It can be be minimised and obfuscator but that does not have to be the case.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1054,"y":717,"wires":[["e0a5e7fc9f7f1103"]]},{"id":"e0a5e7fc9f7f1103","type":"Advantage","z":"5e055769e7d91777","name":"Human understandable and editable.","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1338,"y":754,"wires":[[]]},{"id":"37e5419cbae0a76f","type":"Observation","z":"5e055769e7d91777","name":"Dashboard: interactive interface to server","info":"The dashboard provides a designable interface for interacting directly with the running server.\n\nThe flow editor should be thought of as a coding environment, the server as the execution engine and the dashboard component is the interactive interface to the execution engine.\n\n","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1416,"y":642,"wires":[[]]},{"id":"53060772d84deaeb","type":"Idea","z":"5e055769e7d91777","name":"Import nodes from RSS feeds","info":"Using the mindmap as a filter for RSS feeds. In my case, taking the RSS feed for aeon and removing any URLs that I have already got in my mindmap. These would be found by using the search mechanism, i.e., if the URL is found anywhere (also in a section \"to be read\"), it would be removed from the RSS feed and not shown.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1619,"y":1997,"wires":[["0b3b4d0bef128992"]]},{"id":"2a79d45efeeddac9","type":"Blog-Post","z":"5e055769e7d91777","name":"Screenshot Node","info":"https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1862,"y":1745,"wires":[["8c3af061b5361ffc"]]},{"id":"0b3b4d0bef128992","type":"Observation","z":"5e055769e7d91777","name":"Search API - Frontend","info":"`RED.search.search(\"money\")`\n\nThat does a search\n\nQuestion is how to get the results to the backend? That is to create new nodes from the RSS feed.\n\nIf this ever happens, would need to throw up a dialog box to query the user if new nodes should be created from the RSS feed in question.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1905,"y":1997,"wires":[[]]},{"id":"b19270c6ecaddf73","type":"Idea","z":"5e055769e7d91777","name":"Visualisation of HN thread","info":"Visualisation of a  hacker news thread. \n\nSomething like a long leg of comments and subcomments and sub-subcomments.\n\nThen linking users together that made multiple comments and then their comments on other articles. \n\n![img](/content/signal-2023-05-12-164516.jpeg)\n\nA simply example of this could be to generate a `flows.json` using Node-RED and then have the flowsviewer display the resulting file. This would mean, however, that the generator would need to compute the locations of the nodes and the connections between the nodes. Obviously a lot of work for not much win. Instead could use some kind of [mermaid](https://github.com/mermaid-js/mermaid) generator that makes the diagrams from the data.","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-17T10:48:21.701Z","x":1320.5556030273438,"y":2292.666748046875,"wires":[[]]},{"id":"c6e931ad0bfcc0ed","type":"Observation","z":"5e055769e7d91777","name":"Learnings","info":"## Node - Red - Learnings from\n\nAlso this [post](https://news.ycombinator.com/item?id=34538701) on HN.\n\nIt requires a lot of discipline to keep the flows separate. Reuse of code is a challenge (very tempting just to copy and paste code) and generally to maintaining an overview (simply because of the number of flows).\n\nOn the other hand, business people can immediately see the flows and thereby understand the logic. Debugging is a matter of connecting a debug node at any point in flow. Background jobs (ie sending email) is a matter of splitting the output of a node (ie http response is sent and at the same time email is triggered or websocket update is sent).\n\nScalability and production performance remains an open question for me. In worse case scenario it would be a case of taking the flow.json (my entire backend is a 300k json) and building some kind of interpretor from scratch ;)\n\n\n1. No need to do data converting. Data is automagically converted from http request to JS object, from sql output to JS object.\n2. Use of moustache templates makes it easy to construct sql queries. \n3. Email templates can be created in Node-Red and not in code so that non-programmers can change those templates. Since the templating language is moustache, it is simpler and easier to get into the syntax.\n4. Debugging is a matter of drag&drop debug node and connecting in to the spot that needs to be debugged.\n5. Forking data flows is very simply and adding extra functionality (e.g. sending an email) becomes a matter of diverting the output of one node to another.\n6. Refactoring the code because a matter of redesigning flows so that they look \"good\". Visualisation data flow makes complexity stand out.\n7. Need to name nodes sensibly else it becomes very complex very fast. \n8. Using links (in and out) allows for breaking up flows and reusing flows when necessary.\n9. (downside) The comment node is very small and can't be resized to make it useful.\n10. (downside) It is difficult to change the default settings on nodes and some nodes have misunderstand-able defaults - switch for example checks all conditions by default, instead of a proper switch statement that stops after the first match.\n11. Parallelisation of code is done automagically\n12. No need for background jobs since things like sending emails is done via a fork of the data flow: request is responded to and the email is sent on a different thread.\n13. (downside) you don't know which data is required for which part of the flow. that means sometimes data is missing because at that part of the flow, the data wasn't added. \n14. (downside) you can have strange bugs if the `query` attribute is defined on `msg` since the postgres node will always take that before the query defined in the node. this makes for strange bugs if the `query` attribute isn't deleted somewhere before calling another postgres node to do something.\n15. (downside) procrastination trap: in aligning the various flows, and generally making them appear nicer, one can convince oneself that one is working even though one isn't doing anything useful (although this has to be taken with a pinch of salt since clearing and simplifying a flow is important but sometimes one ends up splitting hairs - instead of writing this article.)","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1824,"y":1474,"wires":[[]]},{"id":"8c3af061b5361ffc","type":"Blog-Post","z":"5e055769e7d91777","name":"Node-RED Plugin: Introspection","info":"@gregoriusrippenstein/node-red-contrib-introspection\n\nhttps://discourse.nodered.org/t/svg-screenshot-node/78143\n\nhttps://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection\n\nhttps://github.com/gorenje/node-red-contrib-introspection","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":2142,"y":1745,"wires":[["330f2ef2344bbf2b"]]},{"id":"b0cd641e7960f1dc","type":"Blog-Post","z":"5e055769e7d91777","name":"Node-RED Plugin: Neural Network Builder","info":"https://github.com/gorenje/node-red-contrib-neuralnet-builder\n\nhttps://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-neuralnet-builder\n\nhttps://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-neuralnet-builder\n\nhttps://github.com/gorenje/node-red-contrib-neuralnet-builder","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":2096.66650390625,"y":1873.1109619140625,"wires":[["330f2ef2344bbf2b"]]},{"id":"330f2ef2344bbf2b","type":"Observation","z":"5e055769e7d91777","name":"Lessons learnt from plugin development","info":"Extensions for Node-RED have two components: the frontend component that is displayed in the editor, and the server-side code base that is executed once the node has been deployed and a message is triggered.\n\n> - `.html` is frontend code and `.js` is backend code for the node.\n\nNode-RED provides a top-level `RED` object for manipulation of either the editor state or the server state. These objects are slightly different since the API is not the same on the frontend as the backend.\n\n> - Important to keep in mind that the frontend API (from Node-RED, i.e., `RED` object) is slightly different to the backend API. \n\nUpdating plugin code in both the backend and frontend is a matter of restarting Node-RED. I work with Node-RED in a docker container when I work locally with NR. The development process is edit code, restart Node-RED docker image, reload editor in browser and test.\n\nThis is a frustrating long development process but I haven't found anything better yet.\n\nOne alternative I have found is using the `npm pack` command to create a `.tgz` bundle that can be uploaded into the manage palette interface. This requires updating the version number and reloading the editor in the browser. So this process isn't much better.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":2438,"y":1801,"wires":[[]]},{"id":"2b78f5727269ee60","type":"Advantage","z":"5e055769e7d91777","name":"Editor - Pros","info":"1. No save button, auto save on the client side, deployment button for changes on the server side.\n\n2. Editor window can be closed by clicking outside the sidebar, not just by clicking on `Done`.\n\n3. Grouping is done well by using double clicks, one can address individual nodes within a group/collection.\n\n4. Subflow creation and modification is done very well.\n\n5. Adding a node between a connection between two nodes is possible if somewhat inaccurate sometimes.\n\n6. Extrememly fast and accurate search functionality with `type:` filtering.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1706,"y":479,"wires":[[]]},{"id":"701da15a9ec54fef","type":"Advantage","z":"5e055769e7d91777","name":"Easy to include any NPM package","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1765,"y":591,"wires":[[]]},{"id":"f3bc2d1184b4402a","type":"Observation","z":"5e055769e7d91777","name":"Palette management is usable","info":"Adding new nodes to the palette is simplified by the palatte manager.\n\nPalette/Node creation made easy by using the existing NPM infrastructure but then having an extra service to make packages available as palettes within Node-RED.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1391,"y":693,"wires":[[]]},{"id":"d3801976a092ac0e","type":"Advantage","z":"5e055769e7d91777","name":"Pros","info":"1. Easy to approach with an gentle learning curve as one gets familiar with the various builtin nodes. Visual and flow-based programming requires an alternative mindset to traditional editor-based coding. Node-REDs user interface is approachable however the meaning of connections and nodes requires understanding of the underlying concepts, for example: *what does a switch node do and how can I use it*?\n\n2. Once understood, code becomes more approachable for non-programmers. The flows are quickly understood and explained, flows can be quickly modified, extended or abstracted. Business logic is presented visually and can be discussed in visual terms. This allows for a closer interplay between programmers and business teams, with the common language becoming a visual interactive one.\n\n3. Web-based, Node-RED fits into any modern browser. No need to install a coding environment. Node-RED has a server-client architecture with modifications being deployed from within the browser. Once the server has been setup, any user with a browser can deploy and make changes to the production server.\n\n4. Extensions are managed using Node.js `npm` packages. These can be registered with the Node-RED palette manager so that packages appear in Node-RED. Extensions can define new nodes, sub-flows and flow examples, these can all be accessed directly via the palette management system.\n\n5. Node-RED is as flexible as Node.js: anything that can be done with Node.js can be done in Node-RED visually and flow-based. Any `npm` package can be integrated into the Node-RED server. All flows are executed on the server side and designed using the web-based editor frontend.\n\n6. Support for parallel modification to flows is provided via notification dialog. All users are immediately notified of deployed changes on the server side. Users can then merge those changes into the local version of the flows. Conflicts can occur but frequently changes can be trivially auto-merged.\n\n7. Data conversion between formats is done automatically. Support for XML, JSON, CSV, YAML and HTML are provided out of the box. Additionally SQL results are automagically converted to javascript objects. This removes the necessity for much boiler-plate code.\n\n8. Inbuilt templating support using Mustache syntax can be used for creating SQL queries or HTML content or any other formats supported by Node-RED. For example, this makes easy to create [email templates](https://demo.openmindmap.org/omm/#flow/459c271a96458c7c) within Node-RED. These email templates can then be modified by non-programmers.\n\n9. Debugging is a matter of connecting a debug node to a nodes output and deploying to the server. All debug output is streamed to the editor frontend.\n\n10. Adding extra business functionality into flows is trivial: connecting the output of one node to the input of another or linking flows via link nodes. Data flows are cloned automatically and can be diverted as required, there are no limits to connections between nodes.\n\n11. Refactoring the code becomes a matter of redesigning flows by moving nodes around or creating sub-flows that can be used as nodes in other flows. Visualisation makes complexity stand out, complex flows are *visually* complex.\n\n12. Multiple flows support is provide by tabs, one tab for each flow. Data flows across tabs (and thereby flows) using link nodes. Link nodes have two ends: in and out, and provide a great mechanism for refactoring complex flows.\n\n13. Sub-flows provide a mechanism for code encapsulation to avoid code repetition. Sub-flows are trivally created by highlighting a group of nodes and  clicking on `create sub-flow` menu point. Sub-flows can be updated and edited, code changes will be applied to all usages of the sub-flow.\n\n14. Parallelisation of code is automagical. Designed flows describe the flow of data, data is automatically copied to all nodes into which the data flows. These nodes are independent from one another and run concurrently.\n\n15. No need for background jobs since, for example, sending emails is done by diverting the data flow from a request-response flow to the necessary email sending nodes. Request and response cycles are executed in parallel to tasks such as sending emails or updates to databases.\n\n16. Inject nodes allow code to be triggered in regular intervals making cron-jobs redundant. Node-RED allows the modelling of complete backend system and becomes a type-of [UML](https://en.wikipedia.org/wiki/Unified_Modeling_Language) diagram.\n\n17. Automatic version control allows breaking changes to be rolled back. What business breaks, business can fix!\n\n18. Easy to get started using the [docker image](https://nodered.org/docs/getting-started/docker). Unfortunately there are limited playgrounds for experimenting with Node-RED online.\n\n19. Sharing and copying flows is easy because of the well thought UI which allows flows to be copied to the clipboard. These can then be pasted into an import dialog. Flows are exported in `json` form making them human readable.\n","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1220,"y":394,"wires":[[]]},{"id":"c64b37c4b409035c","type":"Disadvantage","z":"5e055769e7d91777","name":"Cons","info":"I see Node-RED as general development environment, so these *cons* do not apply to many users. Many cons are out-of-scope for the further development of Node-RED - this I acknowledge and respect.\n\nWhy do I see Node-RED as general development tool? Because I belief that code should not be secret sauce hidden from business teams and stakeholders. Cooperation, communication and many-eyes lead to better coding and business decisions. My personally experience is that when business and tech work together, the best results are achieved.\n\nI spent many years working in tech as an Emacs coder, deploying many systems and maintaining those. Coding was always visual for me: maximum 80 character lines and syntax highlight. But I realised that explaining code to non-tech people is simply not possible using Emacs. That's why things such [UML](https://en.wikipedia.org/wiki/Unified_Modeling_Language) were invented. I see Node-RED as the link between UML diagrams and Emacs, making business logic clear for all to see and extend.\n\n1. Editor is non-mobile compatible which could be argued should not be necessary since who would program/code on a mobile phone? Unfortunately  Node-RED is approachable by many people, in particular managers who might be tempted to make quick changes between business meetings. One step I took was to hide the sidebars using [a `IsMobile` node](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection) - definitely a hacky solution.\n\n2. No linting or other introspective tooling. The only checking of correctness is syntactical but on the other hand linting makes no sense in a visual flow based programming language. But other tools would make sense, for example path discovery between two points in the flow, i.e. *how many flows send a specific email?*.\n\n3. Flows can get complex and it is had to lose track what does what. Therefore a certain amount of maintenance of flows should (or *must*?) be done. This becomes the refactoring of Node-RED: making data flow lines straight and creating sub-flows for repeating node flows. It requires discipline to avoid code duplication and complexity.\n\n4. Deployment is limited to a single server. There is no clear way to support a testing-staging-production deployment/development strategy. In its defence, Node-RED was never designed for general application to all possible use-cases, it is a IoT dashboard tool that is amazingly useful for other applications and use-cases - but due to its flexibility not by design.\n\n5. No *scripted* deployment strategy. A tool such as capistrano or puppet for scripted deployment is not included but that goes back to the original goals of Node-RED. As the [Node-RED API](https://nodered.org/docs/api/admin/methods/) is documented, it would be trivial task to create such a tool.\n\n6. Node-RED has no specific support for testing or the development of tests for the flows created. Of course one can create ones own testing process but there is no support out-of-the-box and with that and hence no best practices for implementing testing within Node-RED.\n\n7. Difficult to work in parallel on the same flows. There is support for merging and notification if the server flows change but the shown differences are difficult to judge whether they are relevant or not. For example, a diff between two flows (i.e. your local flow and the changed flow on the server) will show you differences in positions of nodes - this isn't particular relevant to the business logic. So diffs become very noisy if there has been a rearrangement of nodes.\n\n8. No prevention of code duplication and it is tempting to copy & paste existing nodes, causing code duplication - in-particular of function nodes.\n\n9. Need to name nodes sensibly else it becomes very complex very quickly. There is automatic naming of nodes which works well for some nodes but not for all, e.g. function nodes.\n\n10. Comment node is very small and can't be resized to make it useful. Also it can't be attached to nodes to make it clear which nodes the comment might be referring to.\n\n11. It is difficult to change the default settings on nodes and some nodes have misunderstand-able defaults - switch for example checks all conditions by default, instead of a switch statement that stops after the first match - which for me would be more common. This behaviour is a reflection of a C-programming language convention since C case statements go through all cases *unless* a `break` is used - the switch node is emulating that behaviour. For me that was unexpected.\n\n12. Difficult to judge which data is required for which part of the flow. That sometimes leads to attributes missing on the data object, the attributes were not added by the previous flow parts but are assumed for the current flow. The contents of the `msg` object isn't always obvious - making it difficult to jump into a flow from somewhere else. (`msg` being the javascript object that is passed from node to node and can be extended by each node as required.)\n\n13. You can have strange bugs if the `query` attribute is defined on `msg` since the Postgres node will always take the `query` attribute before the query defined in the node itself. This makes for strange bugs if the query attribute is defined by one node and not deleted somewhere before calling the Postgres node. This also applies to the template nodes and other nodes which take values from the `msg` object that override default node-defined values.\n\n14. Procrastination trap: in aligning the various flows, and generally making them appear nicer, one can convince oneself that one is working even though one isn't doing anything useful (although this has to be taken with a smaller pinch of salt since cleaning and simplifying a flow is important but sometimes one ends up splitting hairs). On the other hand, it is easy to get back into the \"codebase\" (i.e. the flows) by doing some straightening of lines and making flows look nicer (e.g. renaming nodes).\n\n15. Easily extendable but the internal Node-RED APIs are not completely documented. Sometimes one is left in the dark concerning API usage. It is also important to remember where the code is being run: on the client or the server, the node-red API differs but the javascript object is called `RED` on both sides.\n\n16. No fine-grained user permissions. Users can either read or write all flows, it isn't possible to restrict users to specific flows. Authenticated users can deploy all flows which does represent a risk in multi-team environments.\n\n17. Deep linking to specific nodes is not supported. I created myself a hack workaround by creating the [`Navigator` node](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection) that supports [node specific links with `/n/XXXXX`](https://demo.openmindmap.org/omm/#flow/a6381cd32644cdf0/n/c6e2de8178aac0b1).\n","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1243,"y":356,"wires":[["7c6ef558789991ee","6cb31edd54b09561"]]},{"id":"7c6ef558789991ee","type":"Blog-Post","z":"5e055769e7d91777","name":"Fourteen for, Fourteen against, why I love, hate and connect with Node-RED","info":"https://gorenje.medium.com/fourteen-for-fourteen-against-why-i-love-hate-and-connect-with-node-23797f9466ec\n\nhttps://archive.is/XnEXT\n\nhttps://archive.is/8AVen","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1799,"y":316,"wires":[["a81aff09fa8fb878"]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/medium.svg"},{"id":"a81aff09fa8fb878","type":"Blog-Post","z":"5e055769e7d91777","name":"Node-RED Forum","info":"https://discourse.nodered.org/t/article-fourteen-for-fourteen-against-why-i-love-hate-and-connect-with-node-red/78738\n\n","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":2247,"y":316,"wires":[[]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/node-red.svg"},{"id":"283268b10a7963ae","type":"Observation","z":"5e055769e7d91777","name":"enebular","info":"https://www.enebular.com/en/\n\n> enebular is a development and operation service that comprehensively supports the creation of IoT products and services. By enabling developers to write IoT applications that span from edge devices to cloud, quickly deploying to avariety of devices and furthermore, making use of vast amounts of data through visualization and AI, enebular supports optimal operation of IoT applications.\nThe enebular name combines the words enable: “to make a system or device operational; activate” and nebular: from Latin for “cloud, fog” and also invokes the night sky, and represents the mission of enebular to activate IoT systems by connecting an unlimited number of edge devices to the cloud, bringing distributed intelligence to reality.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1250,"y":999,"wires":[[]]},{"id":"2526244518881c96","type":"Observation","z":"5e055769e7d91777","name":"FlowForge","info":"https://flowforge.com/\n\n> FlowForge allows organizations to reliably deliver Node-RED applications in a continuous, collaborative, and secure manner.\n\nThis is probably more simliar to enebular than Node-RED.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1252,"y":1060,"wires":[[]]},{"id":"b6d77e5e9a986453","type":"Text","z":"5e055769e7d91777","name":"Out of Scope: Node-REDs proven flexibility","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":739,"y":2179,"wires":[["6f354eb1afe5f175","97082f61cfaae391","cfa095c2329a10d2","6e5cd4136d0bf1d8","8adbfc93fe59bbc4"]]},{"id":"2a7aed19e83f998e","type":"Idea","z":"5e055769e7d91777","name":"Blog Site with 2 different domains","info":"One domain for the flow editor and one domain that goes directly to the dashboard.\n\nThis question from the forum https://discourse.nodered.org/t/custom-domains-for-dashboard-endpoint/78988\n\nUpdate the heroku repo for Node-RED to support customer domains --> https://github.com/gorenje/node-red-heroku/commit/70ba221aa666a437b6715293debb46d95988d83c","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1354,"y":2356,"wires":[["acff179a28625297"]]},{"id":"30f6bd5a3c9a565b","type":"Idea","z":"5e055769e7d91777","name":"Gender Slider","info":"Manipulation of SVG within the Node-RED dashboard. To store the values in a postgres database.","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1296,"y":2433,"wires":[["809ca123e3238b9a"]]},{"id":"809ca123e3238b9a","type":"link out","z":"5e055769e7d91777","name":"node-red by examples","mode":"link","links":["2c08bfc8099ec63e"],"x":1538,"y":2434,"wires":[]},{"id":"68c878fb2258f96b","type":"Idea","z":"5e055769e7d91777","name":"Visually implement the design patterns","info":"See this question https://discourse.nodered.org/t/singleton-node-concept/79270\n\nperhaps there is a space for creating some examples of the design patterns that can be useful for others.","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:26:33.189Z","x":1282,"y":2898,"wires":[["19028bbc3f08c3bd","ebd06a025d3427be"]]},{"id":"ca5f119e63d46f93","type":"Idea","z":"5e055769e7d91777","name":"Blog tool","info":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1277,"y":2590,"wires":[["6bfea16e42a279f5"]]},{"id":"6bfea16e42a279f5","type":"Blog-Post","z":"5e055769e7d91777","name":"Blogroller","info":"https://blog.openmindmap.org/blog/blogroller","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1548,"y":2591,"wires":[[]]},{"id":"25745e9c8f460738","type":"link in","z":"5e055769e7d91777","name":"node-red by examples","links":["8bff2a7724a57c19"],"x":120,"y":1133,"wires":[["94f6b2b3609259e4"]]},{"id":"46cdb3602fd473a8","type":"link out","z":"5e055769e7d91777","name":"node-red is event driven","mode":"link","links":["0f14490969d3257d"],"x":1461,"y":183,"wires":[]},{"id":"6cb31edd54b09561","type":"Observation","z":"5e055769e7d91777","name":"UML fills the consultants niche, Node-RED will never be accepted.","info":"No one consultant will ever jump on the Node-RED bandwagon and accept a Node-RED flow as a diagram that can be accepted for a presentation.\n\nThe reason is that UML is the exact fit for consults: \"listen to us we know what we are talking about and to prove it, here are some diagrams that will guide the implementation. Oh! implementation we don't do so that in case it fails, we aren't to be blamed.\"\n\nIf these consults were to be using Node-RED, then they would be held to their word and proven to be stupid. No one wants that since those that hired the consultants in the first place would also look bad!\n\nSo ironically, no one wants an consultant to fail or be proven wrong. Consultants are used to shift blame from CEOs (C-level) and decision makers to external \"forces\" that told (sorry advised) us to do this bad thing.\n\n","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:24:06.286Z","x":1912,"y":359,"wires":[[]]},{"id":"4c8c5f5e5f1e475b","type":"Idea","z":"5e055769e7d91777","name":"Node for publishing Subflows","info":"Would allow Node-RED to be an editor for creating subflows that can be published.\n\nThere is a [CLI tool](https://github.com/node-red/node-red-nodegen) for doing this.","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1346,"y":2645,"wires":[["9aa9f9453a927892","4a60265053757736"]]},{"id":"9aa9f9453a927892","type":"Blog-Post","z":"5e055769e7d91777","name":"Node Red Nodegen","info":"https://github.com/node-red/node-red-nodegen","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-07-03T11:41:28.407Z","x":1731,"y":2669,"wires":[[]]},{"id":"10f56f2b20bb21c6","type":"Idea","z":"5e055769e7d91777","name":"Todo list application using graphs","info":"What needs doing?\n\n- adding fields to the writermap nodes:\n  - completeUntil - when to be completed\n  - completedAt - when was it completed\n  - isTodo - extra flag so that any node may be made to a todo node\n\n- New nodes:\n  - NextTodos - list of todos that are coming due and in red, those that are over due\n  - Task - for a node that indicates it to be done\n  - Dependency - for a node to indicate something that needs doing but needs doing by an external party, i.e. not in ones own hands\n\n- Generate a web page with a list of todos and their subtasks. This provides a second view into the todo list.\n  - this page needs to be interactive to check off tasks that have been done. that requires that the flows.json (the storage of the todo list) be editable without the Node-RED editor. This means going into the Node-RED APIs and checking whether there is a way to do this.\n\n- Reminders need to be sent, this brings with it a) which channel b) what timing c) what frequency - this opens a real can of worms:\n  - channel: email, slack, whatsapp, signal, ...\n  - timing: 1 day, 1 week, 10 mins, 3 days after sunday, etc\n  - frequency: first 30mins before, than 10 mins","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-07-17T10:24:12.266Z","updatedAt":"2023-07-17T10:45:15.764Z","x":1356,"y":2696,"wires":[["c6e904448c8af82a"]]},{"id":"acff179a28625297","type":"Blog-Post","z":"5e055769e7d91777","name":"Example","info":"blog.openmindmap.org\n\ndemo.openmindmap.org\n\nopenmindmap.org\n\n","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:29:30.193Z","x":1600,"y":2331,"wires":[[]]},{"id":"c6e904448c8af82a","type":"Inspiration","z":"5e055769e7d91777","name":"Initial Idea","info":"https://news.ycombinator.com/item?id=36745993","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-07-17T10:39:33.158Z","updatedAt":"2023-08-21T09:18:36.246Z","x":1732,"y":2723,"wires":[[]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/hn.svg"},{"id":"adb7021eb4871c6d","type":"Idea","z":"5e055769e7d91777","name":"Generate UML diagrams from Node-RED flows","info":"An initial attempt could be to convert flows into [Mermaid](https://github.com/mermaid-js/mermaid) code.","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-07-17T10:40:47.516Z","updatedAt":"2023-07-17T10:42:08.218Z","x":1395,"y":2746,"wires":[["7a0a354a39c629bf"]]},{"id":"d17118e39aa8e765","type":"Blog-Post","z":"5e055769e7d91777","name":"Visual Programming & AI: is there a future?","info":"https://blog.openmindmap.org/blog/visual-programming-and-ai","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-21T09:04:49.663Z","updatedAt":"2023-08-21T09:05:27.647Z","x":1639,"y":237,"wires":[["e9895e3fd4d3372c"]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/open_mind_logo.svg"},{"id":"4a60265053757736","type":"Blog-Post","z":"5e055769e7d91777","name":"FlowHub.org","info":"Built this with Node-RED and the [flow viewer](https://github.com/gorenje/node-red-flowviewer-js).\n\nProvides a simple pastebin functionality for Node-RED, having [two nodes](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flowhub) defined that handle upload and download.\n\nEach flow on flowhub has a description and a comparison tool for comparing different versions of the flow.","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-21T09:08:58.568Z","updatedAt":"2023-08-21T09:18:11.596Z","x":1815,"y":2608,"wires":[["4a44de07064de4ce"]]},{"id":"a0cbea9ac7de3529","type":"Idea","z":"5e055769e7d91777","name":"Visually implement unit tests","info":"See this question https://discourse.nodered.org/t/visual-unit-tests/80478\n\n","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-21T09:21:18.566Z","x":1252,"y":2940,"wires":[["44d6d959dabb939d"]]},{"id":"e9895e3fd4d3372c","type":"link out","z":"5e055769e7d91777","name":"Visual Programming & AI: is there a future?","mode":"link","links":["7b844109680e70b7"],"x":1890,"y":149,"wires":[]},{"id":"7b844109680e70b7","type":"link in","z":"5e055769e7d91777","name":"visual unit tests & design patterns","links":["e9895e3fd4d3372c"],"x":1001,"y":2915,"wires":[["68c878fb2258f96b","a0cbea9ac7de3529"]]},{"id":"44d6d959dabb939d","type":"Blog-Post","z":"5e055769e7d91777","name":"Nodered forum","info":"https://discourse.nodered.org/t/visual-unit-tests/80478","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-21T09:25:41.405Z","updatedAt":"2023-08-21T09:26:45.823Z","x":1505,"y":2976,"wires":[[]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/node-red.svg"},{"id":"19028bbc3f08c3bd","type":"Blog-Post","z":"5e055769e7d91777","name":"Nodered forum","info":"https://discourse.nodered.org/t/singleton-node-concept/79270","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-21T09:25:41.405Z","updatedAt":"2023-08-21T09:26:37.756Z","x":1557,"y":2870,"wires":[[]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/node-red.svg"},{"id":"b8880a1d4be5a69c","type":"Idea","z":"5e055769e7d91777","name":"Visually implement pull requests?","info":"","sumPass":false,"sumPassPrio":"0","createdAt":"2023-07-03T08:08:48.531Z","updatedAt":"2023-08-23T10:45:34.199Z","x":1251,"y":3007,"wires":[[]]},{"id":"09ee59b794ea0e90","type":"Inspiration","z":"5e055769e7d91777","name":"Node-RED forum","info":"https://discourse.nodered.org/t/noisecraft-anyone-heard-of-it/79813","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-27T08:37:10.985Z","updatedAt":"2023-08-27T08:37:47.583Z","x":1400,"y":959,"wires":[[]],"icon":"@gorenje/node-red-contrib-writermap-mindmap/node-red.svg"},{"id":"4a44de07064de4ce","type":"Thought","z":"5e055769e7d91777","name":"Related: DevTools Tips","info":"\n<p>Article URL: <a href=\"https://devtoolstips.org/\">https://devtoolstips.org/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=37319666\">https://news.ycombinator.com/item?id=37319666</a></p>\n<p>Points: 143</p>\n<p># Comments: 29</p>\n","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-08-30T16:06:13.364Z","updatedAt":"2023-08-30T16:16:39.588Z","x":2073,"y":2544,"wires":[[]]},{"id":"ebd06a025d3427be","type":"Inspiration","z":"5e055769e7d91777","name":"Node-RED Design Patterns","info":"https://medium.com/node-red/node-red-design-patterns-893331422f42\n\nby Stephen Keep\n\n","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-09-08T14:38:00.897Z","updatedAt":"2023-09-08T14:38:21.597Z","x":1832,"y":2924,"wires":[[]]},{"id":"7a0a354a39c629bf","type":"Blog-Post","z":"5e055769e7d91777","name":"Vertical Node-RED","info":"https://discourse.nodered.org/t/vertical-flow-view/5487","sumPass":false,"sumPassPrio":0,"sumPassNodeId":"","createdAt":"2023-09-08T15:06:48.054Z","updatedAt":"2023-09-08T15:06:56.129Z","x":1813,"y":2814,"wires":[[]]}]