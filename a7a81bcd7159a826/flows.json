[{"id":"a7a81bcd7159a826","type":"tab","label":"[NodeDev] Validation + Documentation","disabled":false,"info":"::: aim\n\nJSON schema validation but on the top-level objects, other validation nodes only validate a property on `msg`.\n\n:::\n\n::: background\n\nThis is a fork of [node-red-contrib-full-msg-json-schema-validation](https://github.com/oarroyog/node-red-contrib-json-schema) with some changes:\n\n- validate on entire objects\n- generate documentation using [jsonschema2md](https://github.com/adobe/jsonschema2md)\n- validate the environment to ensure that specific values are set\n\n:::\n\n","env":[]},{"id":"54cbc9bb26bbc601","type":"group","z":"a7a81bcd7159a826","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["6a7ff81b121050f6"],"x":258,"y":249.71434211730957,"w":352,"h":82},{"id":"b72a30574c356480","type":"group","z":"a7a81bcd7159a826","name":"randomise package name for quicker local development","style":{"label":true},"nodes":["d8497787757b2cdc","f4c8a9f0993fed0a","4a492c2e9ec5855e"],"x":1278.4286499023438,"y":239.00006103515625,"w":705.9999465942383,"h":94},{"id":"b4b8ef2d22dc19b4","type":"FlowHubPull","z":"a7a81bcd7159a826","name":"","notab":false,"flowid":"36690f145d5af6ca","flowname":"[Validation] JSON Schema - Simple msg validation","x":448,"y":514,"wires":[[]]},{"id":"590ac7b2f8d401c6","type":"PkgFile","z":"a7a81bcd7159a826","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"bugs\": {\n    \"url\": \"https://github.com/gorenje/node-red-contrib-json-schema/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"ajv\": \"^8.12.0\",\n    \"global\": \"^4.3.2\",\n    \"@adobe/jsonschema2md\": \"^7.1.5\"\n  },\n  \"deprecated\": false,\n  \"description\": \"JSON Schema validator for Node Red\",\n  \"homepage\": \"https://github.com/gorenje/node-red-contrib-json-schema#readme\",\n  \"keywords\": [\n    \"json\",\n    \"node\",\n    \"node-red\",\n    \"schema\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"{{{ pname }}}\",\n  \"node-red\": {\n    \"nodes\": {\n      \"json-schema\": \"schema.js\"\n    }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/gorenje/node-red-contrib-json-schema\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"version\": \"{{ pversion }}\"\n}\n","output":"str","x":1207,"y":569,"wires":[["f4aaf6c29b1a68e8"]]},{"id":"f4aaf6c29b1a68e8","type":"PkgFile","z":"a7a81bcd7159a826","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"The MIT License (MIT)\n\nCopyright (c) 2016 @AvilaCwb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","output":"str","x":1207,"y":619,"wires":[["36f543090ff5acc5"]]},{"id":"36f543090ff5acc5","type":"PkgFile","z":"a7a81bcd7159a826","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"**Built upon [node-red-contrib-full-msg-json-schema-validation](https://github.com/oarroyog/node-red-contrib-json-schema), origial readme follows**\n\nThis validation node does two more things:\n\n- valid the *entire* object, previously it was only possible to validate a property on the object\n- generates documentation of the schema and replaces the info details of the node\n\n\n\n---\n\n# node-red-contrib-json-full-schema-validator\nJSON Full Schema validator for Node Red is pretty easy to use.\nJust open node properties and choose which property object wants to validate and paste JSON Schema\n- OK will returned in first response\n- KO will returned in second response. Error object with explanation will added in msg\n\n**JSON Schema:**\n\n{\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"required\":[\"lastName\"],\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\",\n      \"description\": \"The person's first name.\"\n    },\n    \"lastName\": {\n      \"type\": \"string\",\n      \"description\": \"The person's last name.\"\n    },\n    \"age\": {\n      \"description\": \"Age in years which must be equal to or greater than zero.\",\n      \"type\": \"integer\",\n      \"minimum\": 0\n    }\n  }\n}\n\nExamples:\n- OK \nmsg.payload= \n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 1\n};\n\n- KO\nmsg.payload= \n{\n  \"firstName\": \"John\",\n  \"age\": 1\n};","output":"str","x":1207,"y":669,"wires":[["8f0ef46b0bd33ee7"]]},{"id":"8f0ef46b0bd33ee7","type":"PkgFile","z":"a7a81bcd7159a826","name":"schema.html","filename":"schema.html","format":"html","syntax":"plain","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('JsonSchemaValidatorWithDocu', {\n        category: 'function',\n        inputs: 1,\n        outputs: 1,\n        color: \"#addb7b\",\n        icon: \"font-awesome/fa-check-circle-o\",\n        paletteLabel: \"Json Full-Body Schema Validator\",\n        defaults: {\n            name: {value: \"\" },\n            property: {\n                value:\"payload\", \n                required:false, \n            },\n            propertyType: { value:\"msg\" },\n            checkentireobject: { value: false },\n            func: { value: \"\" },\n            info: { value: \"\" },\n            schematitle: { value: \"\" },\n        },\n        label: function() {\n            return this.name || this.schematitle || this.type;\n        },\n        oneditprepare: function() {\n            var that = this;\n            $(\"#node-input-property\").typedInput({\n                default:this.propertyType||'msg',\n                types:['msg','flow','global','jsonata','env']\n            });\n\n            this.editor = RED.editor.createEditor({\n                id: 'node-input-func-editor',\n                mode: 'ace/mode/json',\n                value: $(\"#node-input-func\").val()\n            });\n\n            RED.library.create({\n                url: \"functions\", // where to get the data from\n                type: \"schema\", // the type of object the library is for\n                editor: this.editor, // the field name the main text body goes to\n                mode: \"ace/mode/json\",\n                fields: ['name']\n            });\n            this.editor.focus();\n\n            $('#node-input-checkentireobject').on('change', () => {\n                if ( $('#node-input-checkentireobject').is(\":checked\") ) {\n                    $(\"#node-input-property\").typedInput('value', \"\")\n                } else {\n                    $(\"#node-input-property\").typedInput('value', \"payload\");\n                }\n            });\n            \n            var nodeid = this.id;\n            \n            $('#node-input-generate-md-but').on('click', (e) => {\n                e.preventDefault();\n                \n                $.ajax({\n                    url:         \"JsonSchemaValidatorWithDocu/\" + nodeid,\n                    type:        \"POST\",\n                    contentType: \"application/json; charset=utf-8\",\n                    data:        that.editor.getValue(),\n\n                    success: function (resp) {\n                      $(\"#node-input-info\").val( resp.md.markdown.map( (d) => { return d.content }).join(\"\\n---\\n\") );\n                      $(\"#node-input-schematitle\").val( resp.md.schema && resp.md.schema[0] && resp.md.schema[0].content && resp.md.schema[0].content.title );\n\n                      RED.notify(\"JsonSchemaValidatorWithDocu Schema update info field\", {\n                        type: \"success\",\n                        id: nodeid,\n                        timeout: 3000\n                      });\n                    },\n\n                    error: function (jqXHR, textStatus, errorThrown) {\n                      RED.notify(\"JsonSchemaValidatorWithDocu Schema Invalid: \" +\n                                textStatus, {\n                        type: \"error\",\n                        id: nodeid,\n                        timeout: 3000\n                      });\n                    }\n                });\n            });                \n        },\n\n        oneditsave: function() {\n            var annot = this.editor.getSession().getAnnotations();\n            this.noerr = 0;\n            $(\"#node-input-noerr\").val(0);\n            for (var k = 0; k < annot.length; k++) {\n                if (annot[k].type === \"error\") {\n                    $(\"#node-input-noerr\").val(annot.length);\n                    this.noerr = annot.length;\n                }\n            }\n            \n            $(\"#node-input-func\").val(this.editor.getValue());\n            this.editor.destroy();\n            delete this.editor;\n\n            this.propertyType = $(\"#node-input-property\").typedInput('type');\n            $(\"#node-input-propertyType\").val(this.propertyType);\n        },\n\n        oneditresize: function(size) {\n            var rows = $(\"#dialog-form>div:not(.node-text-editor-row)\");\n            var height = $(\"#dialog-form\").height();\n            for (var i = 0; i < rows.size(); i++) {\n                height -= $(rows[i]).outerHeight(true);\n            }\n            var editorRow = $(\"#dialog-form>div.node-text-editor-row\");\n            height -= (parseInt(editorRow.css(\"marginTop\")) + parseInt(editorRow.css(\"marginBottom\")));\n            $(\".node-text-editor\").css(\"height\", height + \"px\");\n            this.editor.resize();\n        }\n    });\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"JsonSchemaValidatorWithDocu\">\n\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n\n    <div class=\"form-row\">\n         <button id=\"node-input-generate-md-but\"\n                 class=\"red-ui-button\">Generate Documentation</button>\n         <input type=\"hidden\" id=\"node-input-info\"/>\n         <input type=\"hidden\" id=\"node-input-schematitle\"/>\n    </div>\n    \n    <div class=\"form-row\">\n        <label for=\"node-input-property\">Property</label>\n        <input type=\"text\" id=\"node-input-property\" style=\"width: 100%\"/>\n\t\t<input type=\"hidden\" id=\"node-input-propertyType\"/>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-checkentireobject\" style=\"min-width: 160px;\">\n          Validate entire object?\n        </label>\n        <input type=\"checkbox\" id=\"node-input-checkentireobject\" style=\"display:inline-block; width:15px; vertical-align:baseline;\">\n    </div>\n\n    <div class=\"form-row\" style=\"margin-bottom: 0px;\">\n        <label for=\"node-input-func\"><i class=\"fa fa-wrench\"></i> JSON Schema</label>\n        <input type=\"hidden\" id=\"node-input-func\" autofocus=\"autofocus\"/>\n        <input type=\"hidden\" id=\"node-input-noerr\"/>\n    </div>\n    <div class=\"form-row node-text-editor-row\">\n        <div style=\"height: 250px;\" class=\"node-text-editor\" id=\"node-input-func-editor\"></div>\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"JsonSchemaValidatorWithDocu\">\n    <p>JSON Schema validator</p>\n    <p>Validate input based on schema. Schema can also be passed in as JSON object on `msg.schema`. If validation fails, an exception is raised.</p>\n</script>","output":"str","x":1207,"y":719,"wires":[["991b28b4d086c904"]]},{"id":"991b28b4d086c904","type":"PkgFile","z":"a7a81bcd7159a826","name":"schema.js","filename":"schema.js","format":"javascript","syntax":"plain","template":"module.exports = function (RED) {\n    \"use strict\";\n    function JsonSchemaValidator(n) {\n        RED.nodes.createNode(this, n);\n        this.func = n.func;\n        this.name = n.name;\n        this.property = n.property;\n        this.propertyType = n.propertyType;\n        this.checkentireobject = n.checkentireobject;\n\n        var node = this;\n\n        var process = require('process');\n        var Ajv = require('ajv');\n\n        var ajv = new Ajv({\n            allErrors: true,\n            messages: true,\n            allowUnionTypes: true\n        });\n\n        node.on('input', function (msg, send, done) {\n            try {\n                var schema = typeof node.func === 'string' && node.func.trim().length ? JSON.parse(node.func) : typeof msg.schema === 'string' ? JSON.parse(msg.schema) : msg.schema;                \n                var validate = ajv.compile(schema);\n\n                var runValidate = (prop) => {\n                    var valid = validate(prop);\n\n                    if (!valid) {\n                        msg['error'] = validate.errors;\n                        done(\"validation errors\", msg)\n                    }\n                    else {\n                        delete msg.schema;\n                        send(msg);\n                        done()\n                    }\n                };\n\n                if (node.checkentireobject) {\n                    var obj = msg;\n\n                    switch (node.propertyType) {\n                        case \"env\":    obj = process.env;           break;\n                        case \"msg\":    obj = msg;                   break;\n                        case 'flow':   obj = node.context().flow;   break;\n                        case 'global': obj = node.context().global; break;\n                        default:\n                            done(\"unknown property type '\" + node.propertyType + \"' to be check entirely.\", msg);\n                            return;\n                    }\n\n                    runValidate(obj)\n                } else {\n                    var prop = RED.util.evaluateNodeProperty(node.property, node.propertyType, node, msg);\n\n                    if (prop !== undefined) {\n                        runValidate(prop)\n                    } else {\n                        done(\"prop undefined\", msg)\n                    }\n                }\n            } catch (err) {\n                done(\"failed to scan schema\", msg);\n            }\n        });\n    }\n    RED.nodes.registerType(\"JsonSchemaValidatorWithDocu\", JsonSchemaValidator);\n\n    RED.httpAdmin.post(\"/JsonSchemaValidatorWithDocu/:id\",\n        RED.auth.needsPermission(\"JsonSchemaValidatorWithDocu.write\"),\n        (req, res) => {\n            var node = RED.nodes.getNode(req.params.id);\n            if (node != null) {\n                try {\n                    if (req.body && node.type == \"JsonSchemaValidatorWithDocu\") {\n                        // const { jsonschema2md } = require('@adobe/jsonschema2md');\n                        import('@adobe/jsonschema2md').then( (module) => {\n                            const markdown = module.jsonschema2md(req.body, {\n                                includeReadme: false,\n                            });\n\n                            res.status(200).send({\n                                md: markdown\n                            })\n                        }).catch(err => {\n                            console.error(err);\n                            res.status(500).send(err.toString());\n                            node.error(\"SchemaDocu: Submission failed: \" +\n                                err.toString())\n                        })                    \n                    } else {\n                        res.sendStatus(404);\n                    }\n                } catch (err) {\n                    console.error(err);\n                    res.status(500).send(err.toString());\n                    node.error(\"JsonSchemaValid: Submission failed: \" +\n                        err.toString())\n                }\n            } else {\n                res.sendStatus(404);\n            }\n        });\n\n};\n","output":"str","x":1207,"y":769,"wires":[["d7d542898cd0217b"]]},{"id":"823f247084e9c566","type":"FlowHubPull","z":"a7a81bcd7159a826","name":"","notab":false,"flowid":"390ee0021ded4910","flowname":"[GitHub] base functionality","x":378,"y":396,"wires":[[]]},{"id":"3ec773129868ccff","type":"FlowHubPull","z":"a7a81bcd7159a826","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","x":468,"y":455,"wires":[[]]},{"id":"6a7ff81b121050f6","type":"inject","z":"a7a81bcd7159a826","g":"54cbc9bb26bbc601","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-validation","vt":"str"},{"p":"pversion","v":"0.0.1","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"randompackagename","v":"true","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-json-schema","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"first final","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmotp","v":"111999","vt":"str"},{"p":"contents","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":444,"y":290.71434211730957,"wires":[["f4c8a9f0993fed0a"]]},{"id":"d8497787757b2cdc","type":"change","z":"a7a81bcd7159a826","g":"b72a30574c356480","name":"","rules":[{"t":"set","p":"pname","pt":"msg","to":"$$.pname & $substring(\"\"&$random(),2)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1878.428596496582,"y":280.00006103515625,"wires":[["590ac7b2f8d401c6"]]},{"id":"f4c8a9f0993fed0a","type":"switch","z":"a7a81bcd7159a826","g":"b72a30574c356480","name":"randompackagename","property":"randompackagename","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":1404.4286499023438,"y":292.00006103515625,"wires":[["4a492c2e9ec5855e"],["590ac7b2f8d401c6"]]},{"id":"4a492c2e9ec5855e","type":"switch","z":"a7a81bcd7159a826","g":"b72a30574c356480","name":"noderedinstall","property":"noderedinstall","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":1649.428596496582,"y":286,"wires":[["d8497787757b2cdc"],["590ac7b2f8d401c6"]]},{"id":"d7d542898cd0217b","type":"link out","z":"a7a81bcd7159a826","name":"link out 115","mode":"link","links":["963dfb765b0d9849"],"x":1849,"y":769,"wires":[]}]