[{"id":"b92be5062203ff69","type":"tab","label":"[NodeDev] Node-RED nodes for the development of Node-RED nodes in Node-RED","disabled":false,"info":"::: aim\n\nDevelopment of basic node within Node-RED.\n\n:::\n\n\n::: requirements\n\n- [development node flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n::: explanation\n\nThis flow creates the NodeDev nodes that make it easier to develop nodes within Node-RED, i.e., Node-RED nodes can be developed in Node-RED using Node-RED nodes.\n\nThe flow, by using random package names, does not require that Node-RED be restarted. The only thing to do between successive installation of a package is to reload the browser window.\n\nThat is if `randompackagename` is set and this should not be set once a package is published to NPMjs.com.\n\n:::\n","env":[]},{"id":"dfe1df55864d8e07","type":"group","z":"b92be5062203ff69","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["2b18be6bbfbd26a5"],"x":363.57140350341797,"y":266.71434211730957,"w":352,"h":82},{"id":"fbad0a1d40b08f79","type":"group","z":"b92be5062203ff69","name":"randomise package name for quicker local development","style":{"label":true},"nodes":["e37e48af49967b9a","6882d7b938aff9ae","586709ee98b3e111"],"x":779.0000534057617,"y":266.00006103515625,"w":706.9999465942383,"h":126},{"id":"2a6775a8c79c806f","type":"template","z":"b92be5062203ff69","name":"LICENSE","field":"contents.license","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1040,"y":517.0000610351562,"wires":[["afcb5f0634d9c8ed"]]},{"id":"afcb5f0634d9c8ed","type":"template","z":"b92be5062203ff69","name":"README.md","field":"contents.readme_md","fieldType":"msg","format":"markdown","syntax":"plain","template":"## Node-RED nodes for the development of Node-RED nodes in Node-RED using Node-RED nodes.\n\n*What?*\n\nThe idea behind this collection of nodes to democratise the development of Node-RED nodes. Normally the development of your [own nodes](https://nodered.org/docs/creating-nodes/) will require the use of a third-party editor. Something like VSCode or Vim or Atom or god forbid, [Emacs](https://discourse.nodered.org/t/node-red-node-development-in-node-red/81525/2). This requirement makes creating nodes that much harder. So why not create nodes for Node-RED in Node-RED? After all, if you are using Node-RED, you probably understand how to use Node-RED.\n\nSo this package tries to provide some supporting nodes for making node development in Node-RED possible and simpler. I have created a set of nodes that fulfill my needs, everything else is bound my imagination. \n\n*What do these nodes provide?*\n\n- A presentation a nodes package collection in the form of nodes. The nodes that represent a file in the package are called `PkgFile` and are a template representation of the files content. Template as they parsed by mustache so that `{{ replaceme }}` will be replaced. But this can also be deactivated using the syntax specification.\n- A `NpmTarball` node will create a gzipped tarball for uploading to [npmjs.com](https://npmjs.com) where all nodes live. This does not need to have since nodes can be installed localling into the Node-RED instance.\n- A `NRInstall` node allows for installing the node package into the Node-RED instance in which the flow is running. This means that nodes can be created, tested and modified with Node-RED. There are a few tricks so that Node-RED does not need to be restarted upon updating the package, more below.\n- A `NodeFactory` node that can create templates for node development. It also converts existing `.tgz` packages to `PkgFile` nodes, meaning that existing packages can easily be ported to this style of development. \n\n*This is all very confusing?*\n\nOf course, all this is very meta and it gets worse since these nodes are maintained by this [flow](https://flowhub.org/f/b92be5062203ff69). These nodes are creating in Node-RED in a kind of a bootstrapping for further node development in Node-RED.\n\nThis is not an inbuilt extension of Node-RED and obviously a more integrated workflow would be simpler. This is a attempt to find a better solution to node development, one by which testing and fixing nodes becomes faster.\n\nIt also gets more confusing since these nodes will open the Node-RED import dialog with pre-defined nodes. These are generally safe to import since that's how this package creates an initial set of nodes for representing a node package. Also importing nodes for an unknown node package is not recommended unless it happens to be your own package!\n\n### Examples \n\nExamples are included:\n\n- Converting an existing tar-gzip package file into a collection of `PkgFile` nodes for testing and maintaince and development\n- `NodeFactory` example of creating a boilerplate node for inclusion in a node package that can be installed into Node-RED\n\n### Tips\n\n*How to avoid restarting Node-RED?*\n\nNormally when developing nodes for Node-RED, a restart is necessary to flush older versions of the nodes out of Node-RED. This can be avoided by renaming the package each time its installed into Node-RED. There is no need to rename nodes, just the entire once in the `package.json`. Something I do is use a random number as extension to the package name. The workflow then becomes:\n\n1. Create nodes\n2. Install nodes\n3. Using the palette manager to remove the node package\n4. Reload the browser since it too has a cache of node code\n5. Make modifications to the nodes\n6. Change the package name\n7. Reinstall the nodes\n8. Repeat from step 3\n\nSince all this happens in the browser, there is no leaving Node-RED, making it more efficient to test and modify nodes. Renaming of packages can be done automagically as demonstrated by the [flow](https://flowhub.org/f/b92be5062203ff69) that maintains these nodes.\n\n### Outlook\n\nWherever the road shall lead, there it will go.\n","output":"str","x":1050,"y":558.0000610351562,"wires":[["510df0dc73cc31f0"]]},{"id":"510df0dc73cc31f0","type":"template","z":"b92be5062203ff69","name":"package.json","field":"contents.package_json","fieldType":"msg","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n    \"pako\":          \"latest\",\n    \"tar-stream\":    \"latest\",\n    \"mustache\":      \"latest\",\n    \"libnpmpublish\": \"latest\",\n    \"streamx\":       \"latest\"\n  },\n\n  \"keywords\": [\n    \"node-red\", \"node development\", \"introspection\", \"bootstrapping\", \"recursion\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"Gerrit Riessen <does.anyone@spread-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n      \"nodefactory\":    \"nodes/10-node-factory.js\",\n      \"pkgfile\":        \"nodes/20-pkg-file.js\",\n      \"npmtarball\":     \"nodes/30-npm-tarball.js\",\n      \"noderedinstall\": \"nodes/40-node-red-install.js\",\n      \"npmpublish\":     \"nodes/50-npm-publish.js\"\n    }\n  },\n\n  \"description\": \"Support the development of Node-RED nodes within Node-RED.\",\n  \"repository\": {\n    \"type\": \"github\",\n    \"url\": \"git+https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":1050,"y":597.0000610351562,"wires":[["8c064319f0461453"]]},{"id":"8c064319f0461453","type":"template","z":"b92be5062203ff69","name":"npm-tarball.html","field":"contents.npm_tarball_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('NpmTarBall', {\n        category: 'nodedev',\n        color: \"#e5e4ef\",\n        defaults: {\n            name: {\n                value: \"\"\n            }\n        },\n        inputs: 1,\n        outputs: 1,\n        icon: \"font-awesome/fa-birthday-cake\",\n        label: function() {\n            return this.name || this._def.paletteLabel;\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\": \"\";\n        }\n    });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NpmTarBall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n        <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NpmTarBall\">\n    <p>\n        NpmTarballirise msg content.\n    </p>\n</script>","output":"str","x":1592,"y":595.71435546875,"wires":[["b5ad22fbced928c8"]]},{"id":"b5ad22fbced928c8","type":"template","z":"b92be5062203ff69","name":"npm-tarball.js","field":"contents.npm_tarball_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NpmTarBallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        const tarStream = require('tar-stream');\n        const pakoGzip = require('pako')\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            const pack = tarStream.pack()\n\n            var buffer = [];\n\n            msg.contents.forEach((elem) => {\n                if (elem.type == \"base64\") {\n                    pack.entry({ name: \"package/\" + elem.name }, Buffer.from(elem.contents, 'base64'))\n                } else {\n                    pack.entry({ name: \"package/\" + elem.name }, elem.contents)\n                }\n            })\n\n            pack.on('end', function () {\n                try {\n                    var buf = Buffer.from(pakoGzip.gzip(Buffer.concat(buffer)))\n                    msg.payload = buf;\n                    send(msg);\n                } catch (ex) {\n                    msg.errors = ex\n                    done(\"failed to encode buffer\", msg)\n                }\n            });\n\n            pack.on('data', function (data) {\n                buffer.push(data)\n            });\n\n            pack.on('error', (err) => {\n                msg.error = err\n                done(\"tar packing failed\", msg)\n            })\n\n            pack.finalize() \n        });\n    };\n\n    RED.nodes.registerType(\"NpmTarBall\", NpmTarBallFunctionality);\n}","output":"str","x":1592,"y":639.71435546875,"wires":[["58dd46303e98cd62"]]},{"id":"5ba60d0406c96771","type":"function","z":"b92be5062203ff69","name":"package dir structure","func":"msg.contents = [\n    { name: 'LICENSE',                        contents: msg.contents.license },\n    { name: 'README.md',                      contents: msg.contents.readme_md },\n    { name: 'package.json',                   contents: msg.contents.package_json},\n\n    { name: 'nodes/10-node-factory.html',     contents: msg.contents.node_factory_html },\n    { name: 'nodes/10-node-factory.js',       contents: msg.contents.node_factory_js },\n    { name: 'nodes/20-pkg-file.html',         contents: msg.contents.pkg_file_html },\n    { name: 'nodes/20-pkg-file.js',           contents: msg.contents.pkg_file_js },\n    { name: 'nodes/30-npm-tarball.html',      contents: msg.contents.npm_tarball_html},\n    { name: 'nodes/30-npm-tarball.js',        contents: msg.contents.npm_tarball_js},\n    { name: 'nodes/40-node-red-install.html', contents: msg.contents.node_red_install_html},\n    { name: 'nodes/40-node-red-install.js',   contents: msg.contents.node_red_install_js},\n    { name: 'nodes/50-npm-publish.js',        contents: msg.contents.npm_publish_js },\n    { name: 'nodes/50-npm-publish.html',      contents: msg.contents.npm_publish_html },\n\n    { name: 'examples/convert-existing-tgz.json',          contents: msg.contents.example_convert_existing_tgz },\n    { name: 'examples/factory-generate-example-node.json', contents: msg.contents.example_factory_generate_example_node },\n\n    { name: 'nodes/templates/tmpl.js',   contents: msg.contents.templateJS },\n    { name: 'nodes/templates/tmpl.html', contents: msg.contents.templateHTML },\n]\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1826.0791015625,"y":1262.77783203125,"wires":[["6713609873f293c7"]]},{"id":"6713609873f293c7","type":"link out","z":"b92be5062203ff69","name":"link out 92","mode":"link","links":["963dfb765b0d9849"],"x":1935.3651123046875,"y":1416.0634765625,"wires":[]},{"id":"2b18be6bbfbd26a5","type":"inject","z":"b92be5062203ff69","g":"dfe1df55864d8e07","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-nodedev","vt":"str"},{"p":"pversion","v":"0.0.1","vt":"str"},{"p":"noderedinstall","v":"false","vt":"bool"},{"p":"gitcommit","v":"true","vt":"bool"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"randompackagename","v":"true","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-nodedev","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"readme","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmotp","v":"","vt":"str"},{"p":"contents","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":549.571403503418,"y":307.71434211730957,"wires":[["6882d7b938aff9ae"]]},{"id":"58dd46303e98cd62","type":"template","z":"b92be5062203ff69","name":"node-red-install.html","field":"contents.node_red_install_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n RED.comms.subscribe('nodedev:node-red-install-perform', (event,data) => {\n   if ( data.msg == \"execfunc\" ) {\n\n     var doSend = (data, nodeid, _msg) => {\n       if ( typeof data == \"object\" ) {\n         data = {\n           ..._msg,\n           ...data\n         };\n       }\n\n       $.ajax({\n         url:         \"NodeRedInstall/\" + nodeid,\n         type:        \"POST\",\n         contentType: \"application/json; charset=utf-8\",\n         data: JSON.stringify(data),\n\n         success: function (resp) {\n         },\n\n         error: function (jqXHR, textStatus, errorThrown) {\n           RED.notify(\"NodeRedInstall Communcation Failure: \" +\n                      nodeid + \": \" + textStatus, {\n             type: \"error\",\n             id: nodeid,\n             timeout: 3000\n           });\n         }\n       });\n     };\n\n     var doError = (msg, nodeid, _msg) => {\n       RED.notify(\"NodeRedInstall Failed: \" + nodeid + \": \" + msg, {\n         type: \"error\",\n         id: nodeid,\n         timeout: 3000\n       });\n\n       console.log( \"NodeRedInstall: Error with node: \" + nodeid + \": \" + msg);\n     };\n\n     var nodeid = data.nodeid;\n     var _msg = data._msg;\n\n     var node = {\n       send: (dt) => {\n         doSend(dt, nodeid, _msg)\n       },\n       error: (mg) => {\n         doError(mg, nodeid, _msg)\n       },\n       id: data.nodeid\n     };\n\n     var payload = data.payload;\n     var topic = data.topic;\n\n\n      var f = new File([new Blob([new Uint8Array(payload.data)])], \"tarball.tgz\", { type: \"application/x-gzip\" });\n\n      var data = new FormData();\n      data.append(\"tarball\", f);\n      var filename = f.name;\n\n      $.ajax({\n          url: 'nodes',\n          data: data,\n          cache: false,\n          contentType: false,\n          processData: false,\n          method: 'POST',\n      }).always(function (data, textStatus, xhr) {\n      }).success(function() {\n          RED.notify(\"Installed new package\", { type: \"success\"})\n      }).fail(function (xhr, textStatus, err) {\n          var message = textStatus;\n          if (xhr.responseJSON) {\n              message = xhr.responseJSON.message;\n          }\n          var notification = RED.notify(RED._('palette.editor.errors.installFailed', { module: filename, message: message }), {\n              type: 'error',\n              modal: true,\n              fixed: true,\n              buttons: [\n                  {\n                      text: RED._(\"common.label.close\"),\n                      click: function () {\n                          notification.close();\n                      }\n                  }, {\n                      text: RED._(\"eventLog.view\"),\n                      click: function () {\n                          notification.close();\n                          RED.actions.invoke(\"core:show-event-log\");\n                      }\n                  }\n              ]\n          });\n      })\n\n   }\n });\n\n  RED.nodes.registerType('NodeRedInstall',{\n    color: '#e5e4ef',\n    icon: \"icons/subflow.svg\",\n    category: 'nodedev',\n    paletteLabel: 'NRInstall',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NodeRedInstall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\">\n          <i class=\"fa fa-tag\"></i>\n          <span data-i18n=\"common.label.name\">Name</span>\n      </label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NodeRedInstall\">\n    <p>Install NPM tarball into Node-RED as new node package.</p>\n    Pass in the results of the NpmTarball node into here and the nodes will be installed into Node-RED.\n</script>","output":"str","x":1080,"y":708.4286499023438,"wires":[["878966b23666930c"]]},{"id":"878966b23666930c","type":"template","z":"b92be5062203ff69","name":"node-red-install.js","field":"contents.node_red_install_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NodeRedInstallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            RED.comms.publish(\n                \"nodedev:node-red-install-perform\",\n                RED.util.encodeObject({\n                    msg: \"execfunc\",\n                    payload: msg.payload,\n                    topic: msg.topic,\n                    nodeid: node.id,\n                    _msg: msg\n                })\n            );\n        });\n    }\n    RED.nodes.registerType(\"NodeRedInstall\", NodeRedInstallFunctionality);\n\n    RED.httpAdmin.post(\"/NodeRedInstall/:id\",\n        RED.auth.needsPermission(\"NodeRedInstall.write\"),\n        (req, res) => {\n            var node = RED.nodes.getNode(req.params.id);\n            if (node != null) {\n                try {\n                    if (req.body && node.type == \"NodeRedInstall\") {\n                        node.send(req.body);\n                        res.sendStatus(200);\n                    } else {\n                        res.sendStatus(404);\n                    }\n                } catch (err) {\n                    res.sendStatus(500);\n                    node.error(\"NodeRedInstall: Submission failed: \" +\n                        err.toString())\n                }\n            } else {\n                res.sendStatus(404);\n            }\n        });\n}\n","output":"str","x":1070,"y":752.4286499023438,"wires":[["ebcb731d6b7cf101"]]},{"id":"e37e48af49967b9a","type":"change","z":"b92be5062203ff69","g":"fbad0a1d40b08f79","name":"","rules":[{"t":"set","p":"pname","pt":"msg","to":"$$.pname & $substring(\"\"&$random(),2)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1380,"y":351.00006103515625,"wires":[["2a6775a8c79c806f"]]},{"id":"ebcb731d6b7cf101","type":"template","z":"b92be5062203ff69","name":"pkg-file.html","field":"contents.pkg_file_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/html\" data-template-name=\"PkgFile\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"></div>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-filename\"><i class=\"fa fa-tag\"></i> Filename</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-filename\" placeholder=\"dir1/dir2/file.txt\"></div>\n    </div>\n\n    <div class=\"form-row\" style=\"position: relative; margin-bottom: 0px;\">\n        <label for=\"node-input-template\"><i class=\"fa fa-file-code-o\"></i> Template</span></label>\n        <input type=\"hidden\" id=\"node-input-template\" autofocus=\"autofocus\">\n        <div style=\"position: absolute; right:0;display:inline-block; text-align: right; font-size: 0.8em;\">\n            Syntax:\n            <select id=\"node-input-format\" style=\"width:110px; font-size: 10px !important;  height: 24px; padding:0;\">\n                <option value=\"handlebars\">mustache</option>\n                <option value=\"html\">HTML</option>\n                <option value=\"json\">JSON</option>\n                <option value=\"javascript\">JavaScript</option>\n                <option value=\"css\">CSS</option>\n                <option value=\"markdown\">Markdown</option>\n                <option value=\"php\">PHP</option>\n                <option value=\"python\">Python</option>\n                <option value=\"sql\">SQL</option>\n                <option value=\"yaml\">YAML</option>\n                <option value=\"base64\">Base64</option>\n                <option value=\"text\">Text</option>\n            </select>\n            <button type=\"button\" id=\"node-pkgfile-expand-editor\" class=\"red-ui-button red-ui-button-small\"><i class=\"fa fa-expand\"></i></button>\n        </div>\n    </div>\n\n    <div class=\"form-row node-text-editor-row\">\n        <div style=\"height: 250px; min-height:150px;\" class=\"node-text-editor\" id=\"node-input-pkgfile-editor\" ></div>\n    </div>\n    \n    <div class=\"form-row\">\n        <label for=\"node-input-syntax\"><i class=\"fa fa-code\"></i> Syntax</label>\n        <select id=\"node-input-syntax\" style=\"width:180px;\">\n            <option value=\"mustache\">Mustache</option>\n            <option value=\"plain\">Plain</option>\n        </select>\n    </div>\n\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('PkgFile',{\n        color:\"#e5e4ef\",\n        category: 'nodedev',\n        defaults: {\n            name: {value:\"\"},\n            filename: { value: \"\"},\n            format: {value:\"handlebars\"},\n            syntax: {value:\"mustache\"},\n            template: {value:\"\"},\n            output: {value:\"str\"},\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"font-awesome/fa-file-o\",\n        label: function() {\n            return this.name || this.filename || this._def.paletteLabel;\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\":\"\";\n        },\n        oneditprepare: function() {\n            const that = this;\n            const stateId = RED.editor.generateViewStateId(\"node\", this, \"\");\n\n            if (!this.syntax) {\n                this.syntax = 'mustache';\n                $(\"#node-input-syntax\").val(this.syntax);\n            }\n\n            this.editor = RED.editor.createEditor({\n                id: 'node-input-pkgfile-editor',\n                mode: 'ace/mode/html',\n                stateId: stateId,\n                value: $(\"#node-input-template\").val()\n            });\n\n            $(\"#node-input-format\").on(\"change\", function() {\n                var mod = \"ace/mode/\"+$(\"#node-input-format\").val();\n                that.editor.getSession().setMode({\n                    path: mod,\n                    v: Date.now()\n                });\n            });\n            RED.popover.tooltip($(\"#node-pkgfile-expand-editor\"), RED._(\"node-red:common.label.expand\"));\n            $(\"#node-pkgfile-expand-editor\").on(\"click\", function (e) {\n                e.preventDefault();\n                const value = that.editor.getValue();\n                that.editor.saveView();\n                RED.editor.editText({\n                    mode: $(\"#node-input-format\").val(),\n                    value: value,\n                    stateId: stateId,\n                    width: \"Infinity\",\n                    focus: true,\n                    complete: function (v, cursor) {\n                        that.editor.setValue(v, -1);\n                        setTimeout(function () {\n                            that.editor.restoreView();\n                            that.editor.focus();\n                        }, 250);\n                    }\n                })\n            })\n        },\n        oneditsave: function() {\n            $(\"#node-input-template\").val(this.editor.getValue());\n            this.editor.destroy();\n            delete this.editor;\n        },\n        oneditcancel: function() {\n            this.editor.destroy();\n            delete this.editor;\n        },\n        oneditresize: function(size) {\n            var rows = $(\"#dialog-form>div:not(.node-text-editor-row)\");\n            var height = $(\"#dialog-form\").height();\n            for (var i=0; i<rows.length; i++) {\n                height -= $(rows[i]).outerHeight(true);\n            }\n            var editorRow = $(\"#dialog-form>div.node-text-editor-row\");\n            height -= (parseInt(editorRow.css(\"marginTop\"))+parseInt(editorRow.css(\"marginBottom\")));\n            $(\"#dialog-form .node-text-editor\").css(\"height\",height+\"px\");\n            this.editor.resize();\n        }\n    });\n</script>","output":"str","x":1602,"y":746.4286499023438,"wires":[["bd5543fda82119ae"]]},{"id":"bd5543fda82119ae","type":"template","z":"b92be5062203ff69","name":"pkg-file.js","field":"contents.pkg_file_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"/**\n * Copyright JS Foundation and other contributors, http://js.foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nmodule.exports = function (RED) {\n    \"use strict\";\n    var mustache = require(\"mustache\");\n\n    function extractTokens(tokens, set) {\n        set = set || new Set();\n        tokens.forEach(function (token) {\n            if (token[0] !== 'text') {\n                set.add(token[1]);\n                if (token.length > 4) {\n                    extractTokens(token[4], set);\n                }\n            }\n        });\n        return set;\n    }\n\n    function parseContext(key) {\n        var match = /^(flow|global)(\\[(\\w+)\\])?\\.(.+)/.exec(key);\n        if (match) {\n            var parts = {};\n            parts.type = match[1];\n            parts.store = (match[3] === '') ? \"default\" : match[3];\n            parts.field = match[4];\n            return parts;\n        }\n        return undefined;\n    }\n\n    function parseEnv(key) {\n        var match = /^env\\.(.+)/.exec(key);\n        if (match) {\n            return match[1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Custom Mustache Context capable to collect message property and node\n     * flow and global context\n     */\n\n    function NodeContext(msg, nodeContext, parent, escapeStrings, cachedContextTokens) {\n        this.msgContext = new mustache.Context(msg, parent);\n        this.nodeContext = nodeContext;\n        this.escapeStrings = escapeStrings;\n        this.cachedContextTokens = cachedContextTokens;\n    }\n\n    NodeContext.prototype = new mustache.Context();\n\n    NodeContext.prototype.lookup = function (name) {\n        // try message first:\n        try {\n            var value = this.msgContext.lookup(name);\n            if (value !== undefined) {\n                if (this.escapeStrings && typeof value === \"string\") {\n                    value = value.replace(/\\\\/g, \"\\\\\\\\\");\n                    value = value.replace(/\\n/g, \"\\\\n\");\n                    value = value.replace(/\\t/g, \"\\\\t\");\n                    value = value.replace(/\\r/g, \"\\\\r\");\n                    value = value.replace(/\\f/g, \"\\\\f\");\n                    value = value.replace(/[\\b]/g, \"\\\\b\");\n                }\n                return value;\n            }\n\n            // try env\n            if (parseEnv(name)) {\n                return this.cachedContextTokens[name];\n            }\n\n            // try flow/global context:\n            var context = parseContext(name);\n            if (context) {\n                var type = context.type;\n                var store = context.store;\n                var field = context.field;\n                var target = this.nodeContext[type];\n                if (target) {\n                    return this.cachedContextTokens[name];\n                }\n            }\n            return '';\n        }\n        catch (err) {\n            throw err;\n        }\n    }\n\n    NodeContext.prototype.push = function push(view) {\n        return new NodeContext(view, this.nodeContext, this.msgContext, undefined, this.cachedContextTokens);\n    };\n\n    function PkgFileNode(n) {\n        RED.nodes.createNode(this, n);\n        this.name = n.name;\n        this.filename = n.filename;\n        this.template = n.template;\n        this.format = n.format;\n        this.syntax = n.syntax || \"mustache\";\n        this.outputFormat = \"str\";\n\n        var node = this;\n\n        function output(nde, msg, value, send, done) {\n            if (!Array.isArray(msg.contents)) {\n                RED.util.setMessageProperty(msg, \"contents\", []);\n            }\n\n            msg.contents.push({\n                type: nde.format,\n                name: nde.filename,\n                contents: value\n            })\n\n            send(msg);\n            done();\n        }\n\n\n        node.on(\"input\", function (msg, send, done) {\n\n            try {\n                /***\n                * Allow template contents to be defined externally\n                * through inbound msg.template IFF node.template empty\n                */\n                var template = node.template;\n                if (msg.hasOwnProperty(\"template\")) {\n                    if (template == \"\" || template === null) {\n                        template = msg.template;\n                    }\n                }\n\n                if (node.syntax === \"mustache\") {\n                    var is_json = (node.outputFormat === \"json\");\n                    var promises = [];\n                    var tokens = extractTokens(mustache.parse(template));\n                    var resolvedTokens = {};\n                    tokens.forEach(function (name) {\n                        var env_name = parseEnv(name);\n                        if (env_name) {\n                            var promise = new Promise((resolve, reject) => {\n                                var val = RED.util.evaluateNodeProperty(env_name, 'env', node)\n                                resolvedTokens[name] = val;\n                                resolve();\n                            });\n                            promises.push(promise);\n                            return;\n                        }\n\n                        var context = parseContext(name);\n                        if (context) {\n                            var type = context.type;\n                            var store = context.store;\n                            var field = context.field;\n                            var target = node.context()[type];\n                            if (target) {\n                                var promise = new Promise((resolve, reject) => {\n                                    target.get(field, store, (err, val) => {\n                                        if (err) {\n                                            reject(err);\n                                        } else {\n                                            resolvedTokens[name] = val;\n                                            resolve();\n                                        }\n                                    });\n                                });\n                                promises.push(promise);\n                                return;\n                            }\n                        }\n                    });\n\n                    Promise.all(promises).then(function () {\n                        var value = mustache.render(template, new NodeContext(msg, node.context(), null, is_json, resolvedTokens));\n                        output(node, msg, value, send, done);\n                    }).catch(function (err) {\n                        done(err.message);\n                    });\n                } else {\n                    output(node, msg, template, send, done);\n                }\n            }\n            catch (err) {\n                done(err.message);\n            }\n        });\n    }\n\n    RED.nodes.registerType(\"PkgFile\", PkgFileNode);\n}","output":"str","x":1612,"y":794.4286499023438,"wires":[["780590dafd69c8dd"]]},{"id":"6882d7b938aff9ae","type":"switch","z":"b92be5062203ff69","g":"fbad0a1d40b08f79","name":"randompackagename","property":"randompackagename","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":905.0000534057617,"y":307.00006103515625,"wires":[["586709ee98b3e111"],["2a6775a8c79c806f"]]},{"id":"780590dafd69c8dd","type":"template","z":"b92be5062203ff69","name":"node-factory.html","field":"contents.node_factory_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/html\" data-template-name=\"NodeFactory\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"></div>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-autoimport\">\n                <span>Auto Import of Nodes?</span>\n            </label>\n        <input type=\"checkbox\" id=\"node-input-autoimport\" style=\"display:inline-block; width:15px; vertical-align:baseline;\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-nodename\"><i class=\"fa fa-tag\"></i> Node Name</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-nodename\" placeholder=\"Node Name\">\n        </div>\n    </div> \n\n    <div class=\"form-row\">\n        <label for=\"node-input-category\"><i class=\"fa fa-tag\"></i> Node Category</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-category\" placeholder=\"Node Category\">\n        </div>\n    </div>\n\n    <div id=\"node-input-row-style-colour\" class=\"form-row\">\n        <label>Color</label>\n     </div>\n\n    <div id=\"node-input-row-icon-picker\" class=\"form-row\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-hasbutton\">\n            <span>Has button?</span>\n        </label>\n        <input type=\"checkbox\" id=\"node-input-hasbutton\" style=\"display:inline-block; width:15px; vertical-align:baseline;\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-hasinput\">\n            <span>Has input port?</span>\n        </label>\n        <input type=\"checkbox\" id=\"node-input-hasinput\" style=\"display:inline-block; width:15px; vertical-align:baseline;\">\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-outputcount\">\n            <i class=\"fa fa-tag\"></i> Output ports\n          </label>\n        <select id=\"node-input-outputcount\"></select>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-summary\">\n          <i class=\"fa fa-tag\"></i>\n          <span>Summary</span>\n        </label>\n        <div style=\"height: 150px; min-height:150px; max-height: 150px;\" class=\"node-text-editor\" id=\"node-input-summary\">\n        </div>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-description\">\n              <i class=\"fa fa-tag\"></i>\n              <span>Description</span>\n            </label>\n        <div style=\"height: 350px; min-height:350px; max-height: 350px;\" class=\"node-text-editor\" id=\"node-input-description\">\n        </div>\n    </div>\n\n</script>\n\n<script type=\"text/javascript\">\n(function () {\n\n   RED.comms.subscribe(\"nodedev:perform-autoimport-nodes\", (event,data) => {\n     if ( data.msg == \"autoimport\" ) {\n        RED.clipboard.import();\n        \n        setTimeout(() => {\n            $('#red-ui-clipboard-dialog-import-text').val(\n               data.payload\n            ).trigger(\"paste\");\n        }, 300);\n     }\n    });\n\n    function doSubmission(node) {\n\n        var data = {};\n        Object.keys(node._def.defaults).forEach( (nam) => {\n            data[nam] = node[nam]\n        })\n        data[\"name\"] = node.nodename;\n        data[\"__task\"] = \"generate_from_templates\";\n        \n        $.ajax({\n            url: \"NodeFactory/\" + node.id,\n            type: \"POST\",\n            contentType: \"application/json; charset=utf-8\",\n\n            data: JSON.stringify({\n                node: data,\n            }),\n\n            success: function (resp) {\n                RED.notify(\"Data sent\", {\n                    type: \"warning\",\n                    id: \"FlowHubPush\",\n                    timeout: 2000\n                });\n            },\n\n            error: function (jqXHR, textStatus, errorThrown) {\n                if (jqXHR.status == 404) {\n                    RED.notify(node._(\"common.notification.error\", {\n                        message: node._(\"common.notification.errors.not-deployed\")\n                    }), \"error\");\n                } else if (jqXHR.status == 405) {\n                    RED.notify(node._(\"common.notification.not_allowed\", {\n                        message: node._(\"inject.errors.not_allowed\")\n                    }), \"error\");\n                } else if (jqXHR.status == 500) {\n                    RED.notify(node._(\"common.notification.error\", {\n                        message: node._(\"inject.errors.failed\")\n                    }), \"error\");\n                } else if (jqXHR.status == 0) {\n                    RED.notify(node._(\"common.notification.error\", {\n                        message: node._(\"common.notification.errors.no-response\")\n                    }), \"error\");\n                } else {\n                    RED.notify(node._(\"common.notification.error\", {\n                        message: node._(\"common.notification.errors.unexpected\", {\n                            status: jqXHR.status, message: textStatus\n                        })\n                    }), \"error\");\n                }\n            }\n        });\n    }\n    \n    RED.nodes.registerType('NodeFactory', {\n        color: \"#e5e4ef\",\n        category: 'nodedev',\n        defaults: {\n            name: { value: \"\" },\n            nodename: { value: \"\" },\n            color: { value: \"#e5e4ef\" },\n            hasbutton: { value: false },\n            hasinput: { value: true },\n            outputcount: { value: 1 },\n            autoimport: { value: true },\n            category: { value: \"\" },\n            summary: { value: \"\"},\n            description: { value: \"\"},\n            icon: { value: \"font-awesome/fa-industry\" }\n        },\n        inputs: 1,\n        outputs: 1,\n        icon: \"font-awesome/fa-industry\",\n        label: function () {\n            return this.name || this._def.paletteLabel;\n        },\n        labelStyle: function () {\n            return this.name ? \"node_label_italic\" : \"\";\n        },\n        oneditprepare: function () {\n            const that = this;\n            const stateId = RED.editor.generateViewStateId(\"node\", this, \"\");\n\n            var sltObj = $('#node-input-outputcount');\n            sltObj.html(\"\");\n            \n            [0,1,2,3,4,5,6,7,8,9,10].forEach( function(v) {\n                sltObj.append($('<option></option>').val(v).html(v));\n            });\n            \n            sltObj.val(this.outputcount || \"1\");\n\n            var colorPalette = [\n                \"#DDAA99\",\n                \"#3FADB5\", \"#87A980\", \"#A6BBCF\",\n                \"#AAAA66\", \"#C0C0C0\", \"#C0DEED\",\n                \"#C7E9C0\", \"#D7D7A0\", \"#D8BFD8\",\n                \"#DAC4B4\", \"#DEB887\", \"#DEBD5C\",\n                \"#E2D96E\", \"#E6E0F8\", \"#E7E7AE\",\n                \"#E9967A\", \"#F3B567\", \"#FDD0A2\",\n                \"#FDF0C2\", \"#FFAAAA\", \"#FFCC66\",\n                \"#FFF0F0\", \"#FFFFFF\"\n            ];\n\n            RED.editor.colorPicker.create({\n                id: \"node-input-colour\",\n                value: this.color || \"#a4a4a4\",\n                defaultValue: \"#a4a4a4\",\n                palette: colorPalette,\n                cellWidth: 16,\n                cellHeight: 16,\n                cellMargin: 3,\n                none: false,\n                opacity: 1.0,\n                sortPalette: function (a, b) { return a.l - b.l; }\n            }).appendTo(\"#node-input-row-style-colour\");\n\n            $(\"#node-input-colour\").on('change', function(ev) {\n                var colour = $(this).val();\n                var nodeDiv = $('.red-ui-search-result-node')\n                nodeDiv.css('backgroundColor',colour);\n                var borderColor = RED.utils.getDarkerColor(colour);\n                if (borderColor !== colour) {\n                        nodeDiv.css('border-color',borderColor);\n                }\n            });\n\n            this.editorSummary = RED.editor.createEditor({\n               id: 'node-input-summary',\n               mode: 'ace/mode/markdown',\n               value: $(\"#node-input-summary\").val()\n            });\n\n            this.editorDesc = RED.editor.createEditor({\n                id: 'node-input-description',\n                mode: 'ace/mode/markdown',\n                value: $(\"#node-input-description\").val()\n            });\n\n            var node = this;\n            var iconRow = $('#node-input-row-icon-picker');\n            $('<label data-i18n=\"editor.settingIcon\">').appendTo(iconRow);\n\n            var iconButton = $('<button type=\"button\" class=\"red-ui-button red-ui-editor-node-appearance-button\">').appendTo(iconRow);\n            $('<i class=\"fa fa-caret-down\"></i>').appendTo(iconButton);\n            var nodeDiv = $('<div>',{class:\"red-ui-search-result-node\"}).appendTo(iconButton);\n            var colour = this.color || RED.utils.getNodeColor(node.type, node._def);\n            var icon_url = RED.utils.getNodeIcon(node._def,node);\n            nodeDiv.css('backgroundColor',colour);\n            var borderColor = RED.utils.getDarkerColor(colour);\n            if (borderColor !== colour) {\n                nodeDiv.css('border-color',borderColor);\n            }\n\n            var iconContainer = $('<div/>',{class:\"red-ui-palette-icon-container\"}).appendTo(nodeDiv);\n            RED.utils.createIconElement(icon_url, iconContainer, true);\n\n            iconButton.on(\"click\", function(e) {\n                e.preventDefault();\n                var iconPath;\n                var icon = $(\"#red-ui-editor-node-icon\").val()||\"\";\n                if (icon) {\n                    iconPath = RED.utils.separateIconPath(icon);\n                } else {\n                    iconPath = RED.utils.getDefaultNodeIcon(node._def, node);\n                }\n                var backgroundColor = RED.utils.getNodeColor(node.type, node._def);\n                if (node.type === \"subflow\") {\n                    backgroundColor = $(\"#red-ui-editor-node-color\").val();\n                }\n                RED.editor.iconPicker.show(iconButton,backgroundColor,iconPath,false,function(newIcon) {\n                    $(\"#red-ui-editor-node-icon\").val(newIcon||\"\");\n                    var icon_url = RED.utils.getNodeIcon(node._def,{type:node.type,icon:newIcon});\n                    RED.utils.createIconElement(icon_url, iconContainer, true);\n                });\n            });\n\n            RED.popover.tooltip(iconButton, function() {\n                return $(\"#red-ui-editor-node-icon\").val() || RED._(\"editor.default\");\n            });\n            $('<input type=\"hidden\" id=\"red-ui-editor-node-icon\">').val(node.icon).appendTo(iconRow);\n        },\n        \n        oneditsave: function () {\n            this.color = $('#node-input-colour').val();\n            $(\"#node-input-summary\").val(this.editorSummary.getValue());\n            $(\"#node-input-description\").val(this.editorDesc.getValue());\n            this.icon = $('#red-ui-editor-node-icon').val();\n\n            this.editorSummary.destroy();\n            this.editorDesc.destroy();\n            delete this.editorSummary;\n            delete this.editorDesc;\n        },\n\n        oneditcancel: function () {\n            this.editorSummary.destroy();\n            this.editorDesc.destroy();\n            delete this.editorSummary;\n            delete this.editorDesc;\n        },\n\n        oneditresize: function (size) {\n        },\n\n        button: {\n            enabled: function () {\n                return !this.changed\n            },\n\n            onclick: function () {\n                if (this.changed) {\n                    return RED.notify(RED._(\"notification.warning\", {\n                        message: RED._(\"notification.warnings.undeployedChanges\")\n                    }), \"warning\");\n                }\n\n                doSubmission(this)\n            }\n        },\n    });\n})();\n</script>","output":"str","x":1070,"y":871.857177734375,"wires":[["1118a1ce4d5f6fe3"]]},{"id":"1118a1ce4d5f6fe3","type":"template","z":"b92be5062203ff69","name":"node-factory.js","field":"contents.node_factory_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    \"use strict\";\n\n    var fs = require('fs');\n    var path = require('path');\n    \n    var mustache = require(\"mustache\");\n    var tarStream = require('tar-stream');\n    var streamx = require('streamx');\n    var pakoGzip = require('pako');\n\n    function extractTokens(tokens, set) {\n        set = set || new Set();\n        tokens.forEach(function (token) {\n            if (token[0] !== 'text') {\n                set.add(token[1]);\n                if (token.length > 4) {\n                    extractTokens(token[4], set);\n                }\n            }\n        });\n        return set;\n    }\n\n    function parseContext(key) {\n        var match = /^(flow|global)(\\[(\\w+)\\])?\\.(.+)/.exec(key);\n        if (match) {\n            var parts = {};\n            parts.type = match[1];\n            parts.store = (match[3] === '') ? \"default\" : match[3];\n            parts.field = match[4];\n            return parts;\n        }\n        return undefined;\n    }\n\n    function parseEnv(key) {\n        var match = /^env\\.(.+)/.exec(key);\n        if (match) {\n            return match[1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Custom Mustache Context capable to collect message property and node\n     * flow and global context\n     */\n\n    function NodeContext(msg, nodeContext, parent, escapeStrings, cachedContextTokens) {\n        this.msgContext = new mustache.Context(msg, parent);\n        this.nodeContext = nodeContext;\n        this.escapeStrings = escapeStrings;\n        this.cachedContextTokens = cachedContextTokens;\n    }\n\n    NodeContext.prototype = new mustache.Context();\n\n    NodeContext.prototype.lookup = function (name) {\n        // try message first:\n        try {\n            var value = this.msgContext.lookup(name);\n            if (value !== undefined) {\n                if (this.escapeStrings && typeof value === \"string\") {\n                    value = value.replace(/\\\\/g, \"\\\\\\\\\");\n                    value = value.replace(/\\n/g, \"\\\\n\");\n                    value = value.replace(/\\t/g, \"\\\\t\");\n                    value = value.replace(/\\r/g, \"\\\\r\");\n                    value = value.replace(/\\f/g, \"\\\\f\");\n                    value = value.replace(/[\\b]/g, \"\\\\b\");\n                }\n                return value;\n            }\n\n            // try env\n            if (parseEnv(name)) {\n                return this.cachedContextTokens[name];\n            }\n\n            // try flow/global context:\n            var context = parseContext(name);\n            if (context) {\n                var type = context.type;\n                var store = context.store;\n                var field = context.field;\n                var target = this.nodeContext[type];\n                if (target) {\n                    return this.cachedContextTokens[name];\n                }\n            }\n            return '';\n        }\n        catch (err) {\n            throw err;\n        }\n    }\n\n    NodeContext.prototype.push = function push(view) {\n        return new NodeContext(view, this.nodeContext, this.msgContext, undefined, this.cachedContextTokens);\n    };\n\n    function handleTemplate(msg, node, template) {\n        var promises = [];\n        var tokens = extractTokens(mustache.parse(template));\n        var resolvedTokens = {};\n\n        tokens.forEach(function (name) {\n            var env_name = parseEnv(name);\n            if (env_name) {\n                var promise = new Promise((resolve, reject) => {\n                    var val = RED.util.evaluateNodeProperty(env_name, 'env', node)\n                    resolvedTokens[name] = val;\n                    resolve();\n                });\n                promises.push(promise);\n                return;\n            }\n\n            var context = parseContext(name);\n            if (context) {\n                var type = context.type;\n                var store = context.store;\n                var field = context.field;\n                var target = node.context()[type];\n                if (target) {\n                    var promise = new Promise((resolve, reject) => {\n                        target.get(field, store, (err, val) => {\n                            if (err) {\n                                reject(err);\n                            } else {\n                                resolvedTokens[name] = val;\n                                resolve();\n                            }\n                        });\n                    });\n                    promises.push(promise);\n                    return;\n                }\n            }\n        });\n\n        return Promise.all(promises).then(function () {\n            return mustache.render(template, new NodeContext(msg, node.context(), null, false, resolvedTokens));\n        });\n    }\n\n    function convertToPkgFileNodes(msg, jsCtnt, htmlCtnt) {\n        var allNodes = [];\n\n        var secondId = RED.util.generateId();\n\n        allNodes.push({\n            id: RED.util.generateId(),\n            type: \"PkgFile\",\n            name: msg.node.name + \".js\",\n            filename: \"nodes/\" + msg.node.name.toLowerCase() + \".js\",\n            template: jsCtnt,\n            syntax: \"mustache\",\n            format: \"javascript\",\n            output: \"str\",\n            x: 100,\n            y: 50,\n            wires: [\n                [\n                    secondId\n                ]\n            ]\n        })\n\n        allNodes.push({\n            id: secondId,\n            type: \"PkgFile\",\n            name: msg.node.name + \".html\",\n            filename: \"nodes/\" + msg.node.name.toLowerCase() + \".html\",\n            template: htmlCtnt,\n            syntax: \"mustache\",\n            format: \"html\",\n            output: \"str\",\n            x: 100,\n            y: 100,\n            wires: [\n                [\n                ]\n            ]\n        })\n\n        return allNodes;\n    }\n\n    function NodeFactoryFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            if (msg.node && msg.node.__task == \"generate_from_templates\") {\n                try {\n                    var htmlPath = path.join(__dirname, 'templates', 'tmpl.html');\n                    var jsPath = path.join(__dirname, 'templates', 'tmpl.js');\n\n                    var jsonTmpl = fs.readFileSync(jsPath, 'utf8');\n                    var htmlTmpl = fs.readFileSync(htmlPath, 'utf8');\n\n                    handleTemplate(msg, node, jsonTmpl).then(function (data) {\n                        var jsData = data;\n                        handleTemplate(msg, node, htmlTmpl).then(function (data) {\n                            var nodeImpStr = JSON.stringify(convertToPkgFileNodes(msg, jsData, data));\n\n                            send({ payload: nodeImpStr })\n\n                            if (cfg.autoimport) {\n                                RED.comms.publish(\n                                    \"nodedev:perform-autoimport-nodes\",\n                                    RED.util.encodeObject({\n                                        msg: \"autoimport\",\n                                        payload: nodeImpStr,\n                                        topic: msg.topic,\n                                        nodeid: node.id,\n                                        _msg: msg\n                                    })\n                                );\n                            }\n\n                            done()\n                        }).catch((err) => {\n                            msg.error = err\n                            done(err.message, msg)\n                        })\n                    }).catch((err) => {\n                        msg.error = err\n                        done(err.message, msg)\n                    })\n                    //send({ payload: jsonString })\n                } catch (err) {\n                    msg.error = err\n                    done(err.message, msg)\n                }\n            } else {\n                /* assume that payload is a buffer with a .tgz if not, error out */\n                try {\n                    const extract = tarStream.extract()\n\n                    var allFiles = [];\n\n                    /* \n                     * there is no indication in a tar file of whether a file is binary or textual.\n                     * we can only make a guess by the extension of the filename.\n                     ***/\n                    var computeFormat = (filename) => {\n                        var ext = filename.split(\".\").at(-1);\n\n                        return {\n                            \"html\": \"html\",\n                            \"js\": \"javascript\",\n                            \"md\": \"markdown\",\n                            \"json\": \"json\",\n                            /* binary formats are encoded in base64 */\n                            \"png\": \"base64\",\n                            \"tiff\": \"base64\",\n                            \"tif\": \"base64\",\n                            \"jpg\": \"base64\",\n                            \"jpeg\": \"base64\",\n                            \"bin\": \"base64\",\n                            \"bmp\": \"base64\",\n                        }[ext.toLowerCase()] || \"text\";\n                    };\n\n                    extract.on('entry', function (header, stream, next) {\n                        // header is the tar header\n                        // stream is the content body (might be an empty stream)\n                        // call next when you are done with this entry\n\n                        var buffer = [];\n\n                        stream.on('data', function (data) {\n                            buffer.push(data)\n                        });\n\n                        stream.on('end', function () {\n                            var frmt = computeFormat(header.name.split(\"/\").at(-1));\n\n                            allFiles.push({\n                                id: RED.util.generateId(),\n                                type: \"PkgFile\",\n                                name: header.name.split(\"/\").at(-1),\n                                filename: header.name.replace(/^package\\//, ''),\n                                template: Buffer.concat(buffer).toString(frmt == \"base64\" ? 'base64' : 'utf8'),\n                                syntax: \"mustache\",\n                                format: frmt,\n                                output: \"str\",\n                                x: 100,\n                                y: 50 * (allFiles.length + 1),\n                                wires: [\n                                    []\n                                ]\n                            })\n\n                            next() // ready for next entry\n                        })\n\n                        stream.resume() // just auto drain the stream\n                    })\n\n                    extract.on('finish', function () {\n                        // all entries read, wire them together\n                        for (var idx = 0; idx < allFiles.length - 1; idx++) {\n                            allFiles[idx].wires = [[allFiles[idx + 1].id]];\n                        }\n\n                        msg.payload = JSON.stringify(allFiles);\n                        send(msg)\n\n                        if (cfg.autoimport) {\n                            RED.comms.publish(\n                                \"nodedev:perform-autoimport-nodes\",\n                                RED.util.encodeObject({\n                                    msg: \"autoimport\",\n                                    payload: msg.payload,\n                                    topic: msg.topic,\n                                    nodeid: node.id,\n                                    _msg: msg\n                                })\n                            );\n                        }\n\n                        done()\n                    })\n\n                    extract.on('error', function (err) {\n                        msg.error = err;\n                        done(\"extraction error\", msg)\n                    });\n\n                    var stream = streamx.Readable.from(Buffer.from(pakoGzip.inflate(new Uint8Array(msg.payload))))\n                    stream.pipe(extract);\n                } catch (err) {\n                    msg.error = err\n                    done(err.message, msg)\n                }\n            }\n        });\n    }\n\n    RED.nodes.registerType(\"NodeFactory\", NodeFactoryFunctionality);\n\n    RED.httpAdmin.post(\"/NodeFactory/:id\",\n        RED.auth.needsPermission(\"NodeFactory.write\"),\n        (req, res) => {\n            var node = RED.nodes.getNode(req.params.id);\n            if (node != null) {\n                try {\n                    if (req.body && req.params.id) {\n                        var nde = RED.nodes.getNode(req.params.id)\n                        if (nde && nde.type == \"NodeFactory\") {\n                            node.receive(req.body);\n                        }\n                    } else {\n                        res.sendStatus(404);\n                    }\n                    res.sendStatus(200);\n                } catch (err) {\n                    res.sendStatus(500);\n                    node.error(\"FlowHub: Submission failed: \" +\n                        err.toString())\n                }\n            } else {\n                res.sendStatus(404);\n            }\n        });\n}\n","output":"str","x":1060,"y":921.857177734375,"wires":[["53034024a1ed7b97"]]},{"id":"425eb49ac97a0ff1","type":"template","z":"b92be5062203ff69","name":"npm-publish.js","field":"contents.npm_publish_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NpmPublishFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        const libpub = require('libnpmpublish');\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            RED.util.evaluateNodeProperty(cfg.authToken, cfg.authTokenType, node, msg, (err, result) => {\n                if (err || result.trim() == \"\") {\n                    node.status({\n                        fill: \"red\",\n                        shape: \"dot\",\n                        text: \"Failed, no AUTH TOKEN provided.\"\n                    });\n\n                    msg.error = err;\n                    done(\"failed to get auth token\", msg)\n                    return;\n                }\n\n                var auth_token = result;\n                var tarball = Buffer.from(msg.payload)\n\n                var manifest = JSON.parse(msg.contents.filter((d) => {\n                    return d.name == \"package.json\"\n                })[0].contents);\n\n                var opts = {\n                    userAgent: \"node-red-contrib-nodedev@1.1.1\",\n                    access: \"public\",\n                    otp: msg.npmotp || cfg.otp,\n                    authToken: auth_token,\n                    '//registry.npmjs.org/:_authToken': auth_token,\n                };\n\n                var userscope = manifest.name.split(\"/\")[0];\n                opts[userscope + \":registry\"] = \"https://registry.npmjs.org\"\n\n                if (cfg.action == \"publish\") {\n                    libpub.publish(\n                        manifest, tarball, opts\n                    ).then((data) => {\n                        msg.payload = JSON.stringify(data);\n                        send(msg)\n                        done()\n                    }).catch((exp) => {\n                        msg.error = exp;\n                        done(\"publish failed\", msg)\n                    })\n                }\n\n                if (cfg.action == \"unpublish\") {\n                    libpub.unpublish(\n                        manifest.name, opts\n                    ).then((data) => {\n                        msg.payload = JSON.stringify(data);\n                        send(msg)\n                        done()\n                    }).catch((exp) => {\n                        msg.error = exp;\n                        done(\"publish failed\", msg)\n                    })\n                }\n            })\n        });\n    }\n    \n    RED.nodes.registerType(\"NpmPublish\", NpmPublishFunctionality);\n}\n","output":"str","x":1592,"y":968.285400390625,"wires":[["1960e66dceeb44a5"]]},{"id":"53034024a1ed7b97","type":"template","z":"b92be5062203ff69","name":"npm-publish.html","field":"contents.npm_publish_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('NpmPublish',{\n    color: '#e5e4ef',\n    icon: \"font-awesome/fa-money\",\n    category: 'nodedev',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n      otp: {\n        value: \"\",\n      },\n      action: {\n        value: \"publish\"\n      },\n      authToken: {\n        value: \"NPM_AUTH_TOKEN\",\n      },\n      authTokenType: {\n        value: \"env\",\n      },\n    },\n\n    inputs: 1,\n    outputs: 1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n    },\n\n    oneditprepare: function() {\n      var sltObj = $('#node-input-action');\n      sltObj.html(\"\");\n      \n      [\"publish\",\"unpublish\"].forEach( function(v) {\n         sltObj.append($('<option></option>').val(v).html(v));\n      });\n      \n      sltObj.val(this.action || \"publish\");\n\n      $(\"#node-input-authToken\").typedInput({\n          types:[\"env\", \"msg\", \"flow\",\"global\", \"cred\"],\n          typeField: \"#node-input-authTokenType\"\n      });\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NpmPublish\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-authToken\">\n            <i class=\"fa fa-tag\"></i>\n            NPM Auth Token\n       </label>\n      <input type=\"text\" id=\"node-input-authToken\">\n      <input type=\"hidden\" id=\"node-input-authTokenType\">\n    </div>\n\n    <div class=\"form-row\">\n       <label for=\"node-input-otp\"><i class=\"fa fa-tag\"></i> OTP</label>\n       <input type=\"text\" id=\"node-input-otp\" placeholder=\"One Time Password\">\n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-action\">\n        <i class=\"fa fa-tag\"></i> Action\n      </label>\n      <select id=\"node-input-action\"></select>\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NpmPublish\">\n    <p>Publish tarball to NpmJS registry.</p>\n    This publishes or unpublishes a tarball generated by the NpmTarball node.\n\n    The package name is taken from the package.json if not supplied.\n</script>","output":"str","x":1582,"y":919.714111328125,"wires":[["425eb49ac97a0ff1"]]},{"id":"1960e66dceeb44a5","type":"template","z":"b92be5062203ff69","name":"example-convert-existing-tgz","field":"contents.example_convert_existing_tgz","fieldType":"msg","format":"json","syntax":"mustache","template":"[\n    {\n        \"id\": \"b84864b2ff870a45\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"name\": \"automatically creating nodes that represent package files\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"7f69502a67b8c689\",\n            \"ea7b1b985ba6ac70\",\n            \"aeb3094ecf54b2b2\",\n            \"24b26f5122abf1bb\",\n            \"ab37a3f877541c5b\"\n        ],\n        \"x\": 2018.142822265625,\n        \"y\": 735.7142333984375,\n        \"w\": 865.857177734375,\n        \"h\": 311.2857666015625\n    },\n    {\n        \"id\": \"7f69502a67b8c689\",\n        \"type\": \"inject\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b84864b2ff870a45\",\n        \"name\": \"Trigger\",\n        \"props\": [],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"x\": 2114.142822265625,\n        \"y\": 776.7142333984375,\n        \"wires\": [\n            [\n                \"aeb3094ecf54b2b2\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ea7b1b985ba6ac70\",\n        \"type\": \"NodeFactory\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b84864b2ff870a45\",\n        \"name\": \"\",\n        \"nodename\": \"\",\n        \"color\": \"#e5e4ef\",\n        \"hasbutton\": false,\n        \"hasinput\": true,\n        \"outputcount\": 1,\n        \"autoimport\": true,\n        \"category\": \"\",\n        \"summary\": \"\",\n        \"description\": \"\",\n        \"icon\": \"font-awesome/fa-industry\",\n        \"x\": 2788,\n        \"y\": 948,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"aeb3094ecf54b2b2\",\n        \"type\": \"http request\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b84864b2ff870a45\",\n        \"name\": \"http request to npmjs\",\n        \"method\": \"GET\",\n        \"ret\": \"bin\",\n        \"paytoqs\": \"ignore\",\n        \"url\": \"https://registry.npmjs.org/@gregoriusrippenstein/node-red-contrib-introspection/-/node-red-contrib-introspection-0.4.3.tgz\",\n        \"tls\": \"\",\n        \"persist\": false,\n        \"proxy\": \"\",\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 2394,\n        \"y\": 865,\n        \"wires\": [\n            [\n                \"ea7b1b985ba6ac70\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"24b26f5122abf1bb\",\n        \"type\": \"file in\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b84864b2ff870a45\",\n        \"name\": \"\",\n        \"filename\": \"/some/path/to/local/package.tgz\",\n        \"filenameType\": \"str\",\n        \"format\": \"\",\n        \"chunk\": false,\n        \"sendError\": false,\n        \"encoding\": \"none\",\n        \"allProps\": false,\n        \"x\": 2443,\n        \"y\": 1006,\n        \"wires\": [\n            [\n                \"ea7b1b985ba6ac70\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ab37a3f877541c5b\",\n        \"type\": \"inject\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b84864b2ff870a45\",\n        \"name\": \"Trigger\",\n        \"props\": [],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"x\": 2123,\n        \"y\": 946,\n        \"wires\": [\n            [\n                \"24b26f5122abf1bb\"\n            ]\n        ]\n    }\n]","output":"str","x":1110,"y":1047,"wires":[["78645975e7e6acac"]]},{"id":"78645975e7e6acac","type":"template","z":"b92be5062203ff69","name":"example-factory-generate-example-node","field":"contents.example_factory_generate_example_node","fieldType":"msg","format":"json","syntax":"mustache","template":"[\n    {\n        \"id\": \"2b6bc676aaa603ad\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"style\": {\n            \"stroke\": \"#999999\",\n            \"stroke-opacity\": \"1\",\n            \"fill\": \"none\",\n            \"fill-opacity\": \"1\",\n            \"label\": true,\n            \"label-position\": \"nw\",\n            \"color\": \"#a4a4a4\"\n        },\n        \"nodes\": [\n            \"d4c53464a044324a\",\n            \"fece8b2f1459b822\",\n            \"5dea66e11691c1f2\",\n            \"9f4584bc1aeabf43\",\n            \"8a667fa50ad9b9ee\",\n            \"42a101dda45403ee\",\n            \"a301a4a721a507d9\",\n            \"1fa5af4c7e44a739\",\n            \"b103106ae655b460\",\n            \"77bf2cb0aa2f60ff\"\n        ],\n        \"x\": 1872,\n        \"y\": 317,\n        \"w\": 1423,\n        \"h\": 860\n    },\n    {\n        \"id\": \"d4c53464a044324a\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"LICENSE\",\n        \"filename\": \"LICENSE\",\n        \"format\": \"text\",\n        \"syntax\": \"mustache\",\n        \"template\": \"Nothing, nope, can't do a thing. \",\n        \"output\": \"str\",\n        \"x\": 2215,\n        \"y\": 628,\n        \"wires\": [\n            [\n                \"fece8b2f1459b822\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fece8b2f1459b822\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"README\",\n        \"filename\": \"README.md\",\n        \"format\": \"markdown\",\n        \"syntax\": \"mustache\",\n        \"template\": \"## What does this package do?\\n\\n## Why does it exist?\\n\\n## Where will it go?\\n\\n\",\n        \"output\": \"str\",\n        \"x\": 2217,\n        \"y\": 674,\n        \"wires\": [\n            [\n                \"0e9d26e2b43ca0f5\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"5dea66e11691c1f2\",\n        \"type\": \"NpmTarBall\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"\",\n        \"x\": 2930,\n        \"y\": 1109,\n        \"wires\": [\n            [\n                \"9f4584bc1aeabf43\",\n                \"8a667fa50ad9b9ee\",\n                \"42a101dda45403ee\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9f4584bc1aeabf43\",\n        \"type\": \"NodeRedInstall\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"\",\n        \"x\": 3200,\n        \"y\": 821,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"8a667fa50ad9b9ee\",\n        \"type\": \"NodeFactory\",\n        \"z\": \"b92be5062203ff69\",\n        \"d\": true,\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"\",\n        \"nodename\": \"\",\n        \"color\": \"#e5e4ef\",\n        \"hasbutton\": false,\n        \"hasinput\": true,\n        \"outputcount\": 1,\n        \"autoimport\": true,\n        \"category\": \"\",\n        \"summary\": \"\",\n        \"description\": \"\",\n        \"icon\": \"font-awesome/fa-industry\",\n        \"x\": 3199,\n        \"y\": 670,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"42a101dda45403ee\",\n        \"type\": \"NpmPublish\",\n        \"z\": \"b92be5062203ff69\",\n        \"d\": true,\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"\",\n        \"otp\": \"\",\n        \"action\": \"publish\",\n        \"authToken\": \"NPM_AUTH_TOKEN\",\n        \"authTokenType\": \"env\",\n        \"x\": 3190,\n        \"y\": 529,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"a301a4a721a507d9\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"Step 1: create node templates\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"5798e7102230c00f\",\n            \"6ab6fc44537f08e4\"\n        ],\n        \"x\": 2342,\n        \"y\": 343,\n        \"w\": 352,\n        \"h\": 144\n    },\n    {\n        \"id\": \"5798e7102230c00f\",\n        \"type\": \"NodeFactory\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"a301a4a721a507d9\",\n        \"name\": \"Node with 4 outputs and a button\",\n        \"nodename\": \"NodeWithFour\",\n        \"color\": \"#87A980\",\n        \"hasbutton\": true,\n        \"hasinput\": false,\n        \"outputcount\": \"4\",\n        \"autoimport\": true,\n        \"category\": \"nodedev-background\",\n        \"summary\": \"This is the short summary of what this node does.\",\n        \"description\": \"This is a long and descriptive version of the summary. Rather boring and tedious to write but nonetheless, we try our best.\",\n        \"icon\": \"node-red/inject.svg\",\n        \"x\": 2528,\n        \"y\": 384,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"6ab6fc44537f08e4\",\n        \"type\": \"NodeFactory\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"a301a4a721a507d9\",\n        \"name\": \"Node with Input and Output\",\n        \"nodename\": \"NodeWithOne\",\n        \"color\": \"#F3B567\",\n        \"hasbutton\": false,\n        \"hasinput\": true,\n        \"outputcount\": \"1\",\n        \"autoimport\": true,\n        \"category\": \"nodedev-background\",\n        \"summary\": \"This node only has one input\",\n        \"description\": \"And does even less.\",\n        \"icon\": \"node-red/inject.svg\",\n        \"x\": 2508,\n        \"y\": 446,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"1fa5af4c7e44a739\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"Step 2: include the node templates within a package structure\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"38d7ab2facd1efd0\",\n            \"29fc98b9e556085c\",\n            \"cd9766062675838b\",\n            \"392e75983c1c894d\"\n        ],\n        \"x\": 2333,\n        \"y\": 903,\n        \"w\": 396,\n        \"h\": 248\n    },\n    {\n        \"id\": \"38d7ab2facd1efd0\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"1fa5af4c7e44a739\",\n        \"name\": \"NodeWithFour.js\",\n        \"filename\": \"nodes/nodewithfour.js\",\n        \"format\": \"javascript\",\n        \"syntax\": \"mustache\",\n        \"template\": \"module.exports = function(RED) {\\n  function NodeWithFourFunctionality(config) {\\n    RED.nodes.createNode(this,config);\\n\\n    var node = this;\\n    var cfg = config;\\n\\n    node.on('close', function() {\\n      node.status({});\\n    });\\n\\n    node.on(\\\"input\\\", function(msg, send, done) {\\n        send(msg);\\n        done();\\n    });\\n  }\\n  RED.nodes.registerType(\\\"NodeWithFour\\\", NodeWithFourFunctionality);\\n}\\n\",\n        \"output\": \"str\",\n        \"x\": 2449,\n        \"y\": 944,\n        \"wires\": [\n            [\n                \"29fc98b9e556085c\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"29fc98b9e556085c\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"1fa5af4c7e44a739\",\n        \"name\": \"NodeWithFour.html\",\n        \"filename\": \"nodes/nodewithfour.html\",\n        \"format\": \"html\",\n        \"syntax\": \"mustache\",\n        \"template\": \"<script type=\\\"text/javascript\\\">\\n  RED.nodes.registerType('NodeWithFour',{\\n    color: '#87A980',\\n    icon: \\\"node-red/inject.svg\\\",\\n    category: 'nodedev-background',\\n    defaults: {\\n      name: {\\n        value:\\\"\\\",\\n      },\\n    },\\n\\n    inputs: 0,\\n\\n    outputs: 4,\\n\\n    label: function() {\\n      return (this.name || this._def.paletteLabel);\\n    },\\n\\n    labelStyle: function() {\\n      return this.name?\\\"node_label_italic\\\":\\\"\\\";\\n    },\\n\\n    onpaletteadd: function() {\\n    },\\n\\n    oneditprepare: function() {\\n    },\\n\\n    oneditcancel: function() {\\n    },\\n\\n    oneditsave: function() {\\n    },\\n\\n    button: {\\n      enabled: function() {\\n        return !this.changed\\n      },\\n\\n      onclick: function () {\\n        if (this.changed) {\\n          return RED.notify(RED._(\\\"notification.warning\\\", {\\n            message: RED._(\\\"notification.warnings.undeployedChanges\\\")\\n          }), \\\"warning\\\");\\n        }\\n      }\\n    },\\n\\n  });\\n</script>\\n\\n<script type=\\\"text/html\\\" data-template-name=\\\"NodeWithFour\\\">\\n    <div class=\\\"form-row\\\">\\n        <label for=\\\"node-input-name\\\"><i class=\\\"fa fa-tag\\\"></i> Name</label>\\n        <input type=\\\"text\\\" id=\\\"node-input-name\\\" placeholder=\\\"Name\\\">\\n    </div>\\n</script>\\n\\n<script type=\\\"text/html\\\" data-help-name=\\\"NodeWithFour\\\">\\n  <p>This is the short summary of what this node does.</p>\\n  This is a long and descriptive version of the summary. Rather boring and tedious to write but nonetheless, we try our best.\\n</script>\\n\",\n        \"output\": \"str\",\n        \"x\": 2449,\n        \"y\": 994,\n        \"wires\": [\n            [\n                \"cd9766062675838b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"cd9766062675838b\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"1fa5af4c7e44a739\",\n        \"name\": \"NodeWithOne.js\",\n        \"filename\": \"nodes/nodewithone.js\",\n        \"format\": \"javascript\",\n        \"syntax\": \"mustache\",\n        \"template\": \"module.exports = function(RED) {\\n  function NodeWithOneFunctionality(config) {\\n    RED.nodes.createNode(this,config);\\n\\n    var node = this;\\n    var cfg = config;\\n\\n    node.on('close', function() {\\n      node.status({});\\n    });\\n\\n    node.on(\\\"input\\\", function(msg, send, done) {\\n        send(msg);\\n        done();\\n    });\\n  }\\n  RED.nodes.registerType(\\\"NodeWithOne\\\", NodeWithOneFunctionality);\\n}\\n\",\n        \"output\": \"str\",\n        \"x\": 2454,\n        \"y\": 1060,\n        \"wires\": [\n            [\n                \"392e75983c1c894d\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"392e75983c1c894d\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"1fa5af4c7e44a739\",\n        \"name\": \"NodeWithOne.html\",\n        \"filename\": \"nodes/nodewithone.html\",\n        \"format\": \"html\",\n        \"syntax\": \"mustache\",\n        \"template\": \"<script type=\\\"text/javascript\\\">\\n  RED.nodes.registerType('NodeWithOne',{\\n    color: '#F3B567',\\n    icon: \\\"node-red/inject.svg\\\",\\n    category: 'nodedev-background',\\n    defaults: {\\n      name: {\\n        value:\\\"\\\",\\n      },\\n    },\\n\\n    inputs: 1,\\n\\n    outputs: 1,\\n\\n    label: function() {\\n      return (this.name || this._def.paletteLabel);\\n    },\\n\\n    labelStyle: function() {\\n      return this.name?\\\"node_label_italic\\\":\\\"\\\";\\n    },\\n\\n    onpaletteadd: function() {\\n    },\\n\\n    oneditprepare: function() {\\n    },\\n\\n    oneditcancel: function() {\\n    },\\n\\n    oneditsave: function() {\\n    },\\n\\n\\n  });\\n</script>\\n\\n<script type=\\\"text/html\\\" data-template-name=\\\"NodeWithOne\\\">\\n    <div class=\\\"form-row\\\">\\n        <label for=\\\"node-input-name\\\"><i class=\\\"fa fa-tag\\\"></i> Name</label>\\n        <input type=\\\"text\\\" id=\\\"node-input-name\\\" placeholder=\\\"Name\\\">\\n    </div>\\n</script>\\n\\n<script type=\\\"text/html\\\" data-help-name=\\\"NodeWithOne\\\">\\n  <p>This node only has one input</p>\\n  And does even less.\\n</script>\\n\",\n        \"output\": \"str\",\n        \"x\": 2454,\n        \"y\": 1110,\n        \"wires\": [\n            [\n                \"5dea66e11691c1f2\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b103106ae655b460\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"Step 3: ensure package.json includes the nodes - only the .js file\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"0e9d26e2b43ca0f5\"\n        ],\n        \"x\": 2120,\n        \"y\": 777,\n        \"w\": 411,\n        \"h\": 82\n    },\n    {\n        \"id\": \"0e9d26e2b43ca0f5\",\n        \"type\": \"PkgFile\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"b103106ae655b460\",\n        \"name\": \"package.json\",\n        \"filename\": \"package.json\",\n        \"format\": \"json\",\n        \"syntax\": \"mustache\",\n        \"template\": \"{\\n  \\\"name\\\" : \\\"{{{ packagename }}}\\\",\\n  \\\"version\\\": \\\"{{{ packageversion }}}\\\",\\n  \\\"dependencies\\\": {\\n  },\\n\\n  \\\"keywords\\\": [\\n    \\\"node-red\\\"\\n  ],\\n\\n  \\\"homepage\\\": \\\"https://github.com/username/node-red-contrib-test\\\",\\n  \\\"license\\\": \\\"Don't do evil.\\\",\\n  \\\"author\\\": \\\"Joe Blog <joe.blog@spreads-the.love>\\\",\\n  \\\"engines\\\": {\\n    \\\"node\\\": \\\">=16\\\"\\n  },\\n\\n  \\\"node-red\\\" : {\\n    \\\"version\\\": \\\">=3.0.0\\\",\\n    \\\"nodes\\\": {\\n      \\\"nodewithfour\\\": \\\"nodes/nodewithfour.js\\\",\\n      \\\"nodewithone\\\":  \\\"nodes/nodewithone.js\\\"\\n    }\\n  },\\n\\n  \\\"description\\\": \\\"Description of what these nodes do.\\\",\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"github\\\",\\n    \\\"url\\\": \\\"git+https://github.com/username/node-red-contrib-test.git\\\"\\n  },\\n  \\\"bugs\\\": {\\n    \\\"url\\\": \\\"https://github.com/username/node-red-contrib-test\\\"\\n  }\\n}\\n\",\n        \"output\": \"str\",\n        \"x\": 2216,\n        \"y\": 818,\n        \"wires\": [\n            [\n                \"38d7ab2facd1efd0\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"77bf2cb0aa2f60ff\",\n        \"type\": \"group\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"2b6bc676aaa603ad\",\n        \"name\": \"Step 4: install into Node-RED to test the nodes\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"af227f8a9f44c79d\"\n        ],\n        \"x\": 1898,\n        \"y\": 434,\n        \"w\": 301,\n        \"h\": 82\n    },\n    {\n        \"id\": \"af227f8a9f44c79d\",\n        \"type\": \"inject\",\n        \"z\": \"b92be5062203ff69\",\n        \"g\": \"77bf2cb0aa2f60ff\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"packagename\",\n                \"v\": \"@username/node-red-contrib-test\",\n                \"vt\": \"str\"\n            },\n            {\n                \"p\": \"packageversion\",\n                \"v\": \"0.0.1\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"x\": 1994,\n        \"y\": 475,\n        \"wires\": [\n            [\n                \"d4c53464a044324a\"\n            ]\n        ]\n    }\n]","output":"str","x":1140,"y":1093,"wires":[["eb53f08325cea8b1"]]},{"id":"eb53f08325cea8b1","type":"template","z":"b92be5062203ff69","name":"htmlTemplate","field":"contents.templateHTML","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<script type=\"text/javascript\">\n  RED.nodes.registerType('{{ node.name }}',{\n    color: '{{ node.color }}',\n    icon: \"{{{ node.icon }}}\",\n    category: '{{ node.category }}',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    {{#node.hasinput}}\n    inputs: 1,\n    {{/node.hasinput}}\n    {{^node.hasinput}}\n    inputs: 0,\n    {{/node.hasinput}}\n\n    outputs: {{ node.outputcount }},\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    {{#node.hasbutton}}\n    button: {\n      enabled: function() {\n        return !this.changed\n      },\n\n      onclick: function () {\n        if (this.changed) {\n          return RED.notify(RED._(\"notification.warning\", {\n            message: RED._(\"notification.warnings.undeployedChanges\")\n          }), \"warning\");\n        }\n      }\n    },\n    {{/node.hasbutton}}\n\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"{{ node.name }}\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"{{ node.name }}\">\n  <p>{{ node.summary }}</p>\n  {{ node.description }}\n</script>\n","output":"str","x":1592,"y":1090,"wires":[["7cb5e63a010678c5"]]},{"id":"7cb5e63a010678c5","type":"template","z":"b92be5062203ff69","name":"jsTemplate","field":"contents.templateJS","fieldType":"msg","format":"javascript","syntax":"plain","template":"module.exports = function(RED) {\n  function {{ node.name }}Functionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    node.on(\"input\", function(msg, send, done) {\n        send(msg);\n        done();\n    });\n  }\n  RED.nodes.registerType(\"{{ node.name }}\", {{ node.name }}Functionality);\n}\n","output":"str","x":1602,"y":1144,"wires":[["5ba60d0406c96771"]]},{"id":"586709ee98b3e111","type":"switch","z":"b92be5062203ff69","g":"fbad0a1d40b08f79","name":"gitcommit","property":"gitcommit","propertyType":"msg","rules":[{"t":"false"},{"t":"true"}],"checkall":"false","repair":false,"outputs":2,"x":1132,"y":325,"wires":[["e37e48af49967b9a"],["2a6775a8c79c806f"]]}]