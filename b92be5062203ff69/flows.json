[{"id":"b92be5062203ff69","type":"tab","label":"[NodeDev] NodeDev nodes","disabled":false,"info":"::: aim\n\nDevelopment of basic node within Node-RED.\n\n:::\n\n\n::: requirements\n\n- [development node flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n::: explanation\n\nThis flow creates the NodeDev nodes that make it easier to develop nodes within Node-RED, i.e., Node-RED nodes can be developed in Node-RED.\n\n:::\n","env":[]},{"id":"dfe1df55864d8e07","type":"group","z":"b92be5062203ff69","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["2b18be6bbfbd26a5"],"x":190,"y":252.99998664855957,"w":352,"h":82},{"id":"2a6775a8c79c806f","type":"template","z":"b92be5062203ff69","name":"LICENSE","field":"contents.license","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":749,"y":489,"wires":[["afcb5f0634d9c8ed"]]},{"id":"afcb5f0634d9c8ed","type":"template","z":"b92be5062203ff69","name":"README.md","field":"contents.readme_md","fieldType":"msg","format":"markdown","syntax":"mustache","template":"## TarBall for Node-RED\n\nWork in progress\n","output":"str","x":759,"y":530,"wires":[["510df0dc73cc31f0"]]},{"id":"510df0dc73cc31f0","type":"template","z":"b92be5062203ff69","name":"package.json","field":"contents.package_json","fieldType":"msg","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n    \"pako\": \"latest\",\n    \"tar-stream\": \"latest\",\n    \"mustache\": \"latest\"\n  },\n\n  \"keywords\": [\n    \"node-red\", \"node development\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"Gerrit Riessen <does.anyone@spread-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n      \"npmtarball\":     \"nodes/90-npm-tarball.js\",\n      \"noderedinstall\": \"nodes/42-node-red-install.js\",\n      \"pkgfile\":        \"nodes/23-pkg-file.js\"\n    }\n  },\n\n  \"description\": \"Support the development of Node-RED nodes within Node-RED.\",\n  \"repository\": {\n    \"type\": \"github\",\n    \"url\": \"git+https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":759,"y":569,"wires":[["8c064319f0461453"]]},{"id":"8c064319f0461453","type":"template","z":"b92be5062203ff69","name":"90-npm-tarball.html","field":"contents.npm_tarball_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('NpmTarBall', {\n        category: 'nodedev',\n        color: \"#DEBD5C\",\n        defaults: {\n            name: {\n                value: \"\"\n            }\n        },\n        inputs: 1,\n        outputs: 1,\n        icon: \"font-awesome/fa-file-zip-o\",\n        label: function() {\n            return this.name || this._def.paletteLabel;\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\": \"\";\n        }\n    });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NpmTarBall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n        <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NpmTarBall\">\n    <p>\n        NpmTarballirise msg content.\n    </p>\n</script>","output":"str","x":650,"y":664,"wires":[["b5ad22fbced928c8"]]},{"id":"b5ad22fbced928c8","type":"template","z":"b92be5062203ff69","name":"90-npm-tarball.js","field":"contents.npm_tarball_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NpmTarBallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        const tarStream = require('tar-stream');\n        const pakoGzip = require('pako')\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            const pack = tarStream.pack()\n\n            var buffer = [];\n\n            msg.contents.forEach((elem) => {\n                console.error(elem.name)\n                pack.entry({ name: \"package/\" + elem.name }, elem.contents)\n            })\n\n            pack.on('end', function () {\n                console.error(\"end call\")\n                try {\n                    var buf = Buffer.from(pakoGzip.gzip(Buffer.concat(buffer)))\n                    msg.payload = buf;\n                    console.error(\"data sent call\")\n                    send(msg);\n                    done()\n                } catch (ex) {\n                    msg.errors = ex\n                    node.error(\"failed to encode buffer\", msg)\n                }\n            });\n\n            pack.on('data', function (data) {\n                console.error(\"pack - data\")\n                buffer.push(data)\n            });\n\n            pack.on('error', (err) => {\n                msg.error = err\n                node.error(\"tar packing failed\", msg)\n            })\n\n            console.error(\"finalize called\")\n            pack.finalize() \n        });\n    };\n\n    RED.nodes.registerType(\"NpmTarBall\", NpmTarBallFunctionality);\n}","output":"str","x":640,"y":708,"wires":[["58dd46303e98cd62"]]},{"id":"5ba60d0406c96771","type":"function","z":"b92be5062203ff69","name":"package dir structure","func":"msg.contents = [\n    { name: 'LICENSE',                        contents: msg.contents.license },\n    { name: 'README.md',                      contents: msg.contents.readme_md },\n    { name: 'package.json',                   contents: msg.contents.package_json},\n    { name: 'nodes/90-npm-tarball.html',      contents: msg.contents.npm_tarball_html},\n    { name: 'nodes/90-npm-tarball.js',        contents: msg.contents.npm_tarball_js},\n    { name: 'nodes/42-node-red-install.html', contents: msg.contents.node_red_install_html},\n    { name: 'nodes/42-node-red-install.js',   contents: msg.contents.node_red_install_js},\n    { name: 'nodes/23-pkg-file.html',         contents: msg.contents.pkg_file_html},\n    { name: 'nodes/23-pkg-file.js',           contents: msg.contents.pkg_file_js},\n]\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1292.22216796875,"y":833.77783203125,"wires":[["6713609873f293c7","3ecb6c0111438324"]]},{"id":"6713609873f293c7","type":"link out","z":"b92be5062203ff69","name":"link out 92","mode":"link","links":["963dfb765b0d9849"],"x":1621.22216796875,"y":877.7777709960938,"wires":[]},{"id":"2b18be6bbfbd26a5","type":"inject","z":"b92be5062203ff69","g":"dfe1df55864d8e07","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-nodedev","vt":"str"},{"p":"pversion","v":"0.0.3","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-nodedev","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"nice commit message","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"npmotp","v":"514058","vt":"str"},{"p":"contents","v":"{}","vt":"json"},{"p":"randompackagename","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":376,"y":293.99998664855957,"wires":[["6882d7b938aff9ae"]]},{"id":"3ecb6c0111438324","type":"debug","z":"b92be5062203ff69","name":"debug 41","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1650,"y":731,"wires":[]},{"id":"58dd46303e98cd62","type":"template","z":"b92be5062203ff69","name":"42-node-red-install.html","field":"contents.node_red_install_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n RED.comms.subscribe('introspect:node-red-install-perform', (event,data) => {\n   if ( data.msg == \"execfunc\" ) {\n\n     var doSend = (data, nodeid, _msg) => {\n       if ( typeof data == \"object\" ) {\n         data = {\n           ..._msg,\n           ...data\n         };\n       }\n\n       $.ajax({\n         url:         \"NodeRedInstall/\" + nodeid,\n         type:        \"POST\",\n         contentType: \"application/json; charset=utf-8\",\n         data: JSON.stringify(data),\n\n         success: function (resp) {\n         },\n\n         error: function (jqXHR, textStatus, errorThrown) {\n           RED.notify(\"NodeRedInstall Communcation Failure: \" +\n                      nodeid + \": \" + textStatus, {\n             type: \"error\",\n             id: nodeid,\n             timeout: 3000\n           });\n         }\n       });\n     };\n\n     var doError = (msg, nodeid, _msg) => {\n       RED.notify(\"NodeRedInstall Failed: \" + nodeid + \": \" + msg, {\n         type: \"error\",\n         id: nodeid,\n         timeout: 3000\n       });\n\n       console.log( \"NodeRedInstall: Error with node: \" + nodeid + \": \" + msg);\n     };\n\n     var nodeid = data.nodeid;\n     var _msg = data._msg;\n\n     var node = {\n       send: (dt) => {\n         doSend(dt, nodeid, _msg)\n       },\n       error: (mg) => {\n         doError(mg, nodeid, _msg)\n       },\n       id: data.nodeid\n     };\n\n     var payload = data.payload;\n     var topic = data.topic;\n\n\n      var f = new File([new Blob([new Uint8Array(payload.data)])], \"tarball.tgz\", { type: \"application/x-gzip\" });\n\n      var data = new FormData();\n      data.append(\"tarball\", f);\n      var filename = f.name;\n\n      $.ajax({\n          url: 'nodes',\n          data: data,\n          cache: false,\n          contentType: false,\n          processData: false,\n          method: 'POST',\n      }).always(function (data, textStatus, xhr) {\n      }).success(function() {\n          RED.notify(\"Installed new package\", { type: \"success\"})\n      }).fail(function (xhr, textStatus, err) {\n          var message = textStatus;\n          if (xhr.responseJSON) {\n              message = xhr.responseJSON.message;\n          }\n          var notification = RED.notify(RED._('palette.editor.errors.installFailed', { module: filename, message: message }), {\n              type: 'error',\n              modal: true,\n              fixed: true,\n              buttons: [\n                  {\n                      text: RED._(\"common.label.close\"),\n                      click: function () {\n                          notification.close();\n                      }\n                  }, {\n                      text: RED._(\"eventLog.view\"),\n                      click: function () {\n                          notification.close();\n                          RED.actions.invoke(\"core:show-event-log\");\n                      }\n                  }\n              ]\n          });\n      })\n\n   }\n });\n\n  RED.nodes.registerType('NodeRedInstall',{\n    color: '#e5e4ef',\n    icon: \"icons/subflow.svg\",\n    category: 'nodedev',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditsave: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditresize: function(size) {\n    }\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NodeRedInstall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\">\n          <i class=\"fa fa-tag\"></i>\n          <span data-i18n=\"common.label.name\">Name</span>\n      </label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-fubar\">\n              <i class=\"fa fa-tag\"></i>\n              <span data-i18n=\"common.label.name\">Name</span>\n          </label>\n      <input type=\"text\" id=\"node-input-fubar\" placeholder=\"Fubar\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NodeRedInstall\">\n    <p>Install tarball into Node-RED as new node package.</p>\n</script>","output":"str","x":841.857177734375,"y":775.7142944335938,"wires":[["878966b23666930c"]]},{"id":"878966b23666930c","type":"template","z":"b92be5062203ff69","name":"42-node-red-install.js","field":"contents.node_red_install_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NodeRedInstallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            RED.comms.publish(\n                \"introspect:node-red-install-perform\",\n                RED.util.encodeObject({\n                    msg: \"execfunc\",\n                    payload: msg.payload,\n                    topic: msg.topic,\n                    nodeid: node.id,\n                    _msg: msg\n                })\n            );\n        });\n    }\n    RED.nodes.registerType(\"NodeRedInstall\", NodeRedInstallFunctionality);\n\n    RED.httpAdmin.post(\"/NodeRedInstall/:id\",\n        RED.auth.needsPermission(\"NodeRedInstall.write\"),\n        (req, res) => {\n            var node = RED.nodes.getNode(req.params.id);\n            if (node != null) {\n                try {\n                    if (req.body && node.type == \"NodeRedInstall\") {\n                        node.send(req.body);\n                        res.sendStatus(200);\n                    } else {\n                        res.sendStatus(404);\n                    }\n                } catch (err) {\n                    res.sendStatus(500);\n                    node.error(\"NodeRedInstall: Submission failed: \" +\n                        err.toString())\n                }\n            } else {\n                res.sendStatus(404);\n            }\n        });\n}\n","output":"str","x":831.857177734375,"y":819.7142944335938,"wires":[["ebcb731d6b7cf101"]]},{"id":"e37e48af49967b9a","type":"change","z":"b92be5062203ff69","name":"","rules":[{"t":"set","p":"pname","pt":"msg","to":"$$.pname & $substring(\"\"&$random(),2)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":961,"y":427,"wires":[["2a6775a8c79c806f"]]},{"id":"ebcb731d6b7cf101","type":"template","z":"b92be5062203ff69","name":"23-pkg-file.html","field":"contents.pkg_file_html","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<script type=\"text/html\" data-template-name=\"PkgFile\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"></div>\n    </div>\n\n    <div class=\"form-row\">\n        <label for=\"node-input-filename\"><i class=\"fa fa-tag\"></i> Filename</label>\n        <div style=\"display: inline-block; width: calc(100% - 105px)\"><input type=\"text\" id=\"node-input-filename\" placeholder=\"dir1/dir2/file.txt\"></div>\n    </div>\n\n    <div class=\"form-row\" style=\"position: relative; margin-bottom: 0px;\">\n        <label for=\"node-input-template\"><i class=\"fa fa-file-code-o\"></i> Template</span></label>\n        <input type=\"hidden\" id=\"node-input-template\" autofocus=\"autofocus\">\n        <div style=\"position: absolute; right:0;display:inline-block; text-align: right; font-size: 0.8em;\">\n            Syntax:\n            <select id=\"node-input-format\" style=\"width:110px; font-size: 10px !important;  height: 24px; padding:0;\">\n                <option value=\"handlebars\">mustache</option>\n                <option value=\"html\">HTML</option>\n                <option value=\"json\">JSON</option>\n                <option value=\"javascript\">JavaScript</option>\n                <option value=\"css\">CSS</option>\n                <option value=\"markdown\">Markdown</option>\n                <option value=\"php\">PHP</option>\n                <option value=\"python\">Python</option>\n                <option value=\"sql\">SQL</option>\n                <option value=\"yaml\">YAML</option>\n                <option value=\"base64\">Base64</option>\n                <option value=\"text\">Text</option>\n            </select>\n            <button type=\"button\" id=\"node-pkgfile-expand-editor\" class=\"red-ui-button red-ui-button-small\"><i class=\"fa fa-expand\"></i></button>\n        </div>\n    </div>\n\n    <div class=\"form-row node-text-editor-row\">\n        <div style=\"height: 250px; min-height:150px;\" class=\"node-text-editor\" id=\"node-input-pkgfile-editor\" ></div>\n    </div>\n    \n    <div class=\"form-row\">\n        <label for=\"node-input-syntax\"><i class=\"fa fa-code\"></i> Syntax</label>\n        <select id=\"node-input-syntax\" style=\"width:180px;\">\n            <option value=\"mustache\">Mustache</option>\n            <option value=\"plain\">Plain</option>\n        </select>\n    </div>\n\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('PkgFile',{\n        color:\"rgb(243, 181, 103)\",\n        category: 'nodedev',\n        defaults: {\n            name: {value:\"\"},\n            filename: { value: \"\"},\n            format: {value:\"handlebars\"},\n            syntax: {value:\"mustache\"},\n            template: {value:\"\"},\n            output: {value:\"str\"}\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"font-awesome/fa-file-o\",\n        label: function() {\n            return this.name || this._def.paletteLabel;\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\":\"\";\n        },\n        oneditprepare: function() {\n            const that = this;\n            const stateId = RED.editor.generateViewStateId(\"node\", this, \"\");\n            if (!this.syntax) {\n                this.syntax = 'mustache';\n                $(\"#node-input-syntax\").val(this.syntax);\n            }\n            this.editor = RED.editor.createEditor({\n                id: 'node-input-pkgfile-editor',\n                mode: 'ace/mode/html',\n                stateId: stateId,\n                value: $(\"#node-input-template\").val()\n            });\n\n            $(\"#node-input-format\").on(\"change\", function() {\n                var mod = \"ace/mode/\"+$(\"#node-input-format\").val();\n                that.editor.getSession().setMode({\n                    path: mod,\n                    v: Date.now()\n                });\n            });\n            RED.popover.tooltip($(\"#node-pkgfile-expand-editor\"), RED._(\"node-red:common.label.expand\"));\n            $(\"#node-pkgfile-expand-editor\").on(\"click\", function (e) {\n                e.preventDefault();\n                const value = that.editor.getValue();\n                that.editor.saveView();\n                RED.editor.editText({\n                    mode: $(\"#node-input-format\").val(),\n                    value: value,\n                    stateId: stateId,\n                    width: \"Infinity\",\n                    focus: true,\n                    complete: function (v, cursor) {\n                        that.editor.setValue(v, -1);\n                        setTimeout(function () {\n                            that.editor.restoreView();\n                            that.editor.focus();\n                        }, 250);\n                    }\n                })\n            })\n        },\n        oneditsave: function() {\n            $(\"#node-input-template\").val(this.editor.getValue());\n            this.editor.destroy();\n            delete this.editor;\n        },\n        oneditcancel: function() {\n            this.editor.destroy();\n            delete this.editor;\n        },\n        oneditresize: function(size) {\n            var rows = $(\"#dialog-form>div:not(.node-text-editor-row)\");\n            var height = $(\"#dialog-form\").height();\n            for (var i=0; i<rows.length; i++) {\n                height -= $(rows[i]).outerHeight(true);\n            }\n            var editorRow = $(\"#dialog-form>div.node-text-editor-row\");\n            height -= (parseInt(editorRow.css(\"marginTop\"))+parseInt(editorRow.css(\"marginBottom\")));\n            $(\"#dialog-form .node-text-editor\").css(\"height\",height+\"px\");\n            this.editor.resize();\n        }\n    });\n</script>","output":"str","x":716,"y":910,"wires":[["bd5543fda82119ae"]]},{"id":"bd5543fda82119ae","type":"template","z":"b92be5062203ff69","name":"23-pkg-file.js","field":"contents.pkg_file_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"/**\n * Copyright JS Foundation and other contributors, http://js.foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nmodule.exports = function (RED) {\n    \"use strict\";\n    var mustache = require(\"mustache\");\n\n    function extractTokens(tokens, set) {\n        set = set || new Set();\n        tokens.forEach(function (token) {\n            if (token[0] !== 'text') {\n                set.add(token[1]);\n                if (token.length > 4) {\n                    extractTokens(token[4], set);\n                }\n            }\n        });\n        return set;\n    }\n\n    function parseContext(key) {\n        var match = /^(flow|global)(\\[(\\w+)\\])?\\.(.+)/.exec(key);\n        if (match) {\n            var parts = {};\n            parts.type = match[1];\n            parts.store = (match[3] === '') ? \"default\" : match[3];\n            parts.field = match[4];\n            return parts;\n        }\n        return undefined;\n    }\n\n    function parseEnv(key) {\n        var match = /^env\\.(.+)/.exec(key);\n        if (match) {\n            return match[1];\n        }\n        return undefined;\n    }\n\n    /**\n     * Custom Mustache Context capable to collect message property and node\n     * flow and global context\n     */\n\n    function NodeContext(msg, nodeContext, parent, escapeStrings, cachedContextTokens) {\n        this.msgContext = new mustache.Context(msg, parent);\n        this.nodeContext = nodeContext;\n        this.escapeStrings = escapeStrings;\n        this.cachedContextTokens = cachedContextTokens;\n    }\n\n    NodeContext.prototype = new mustache.Context();\n\n    NodeContext.prototype.lookup = function (name) {\n        // try message first:\n        try {\n            var value = this.msgContext.lookup(name);\n            if (value !== undefined) {\n                if (this.escapeStrings && typeof value === \"string\") {\n                    value = value.replace(/\\\\/g, \"\\\\\\\\\");\n                    value = value.replace(/\\n/g, \"\\\\n\");\n                    value = value.replace(/\\t/g, \"\\\\t\");\n                    value = value.replace(/\\r/g, \"\\\\r\");\n                    value = value.replace(/\\f/g, \"\\\\f\");\n                    value = value.replace(/[\\b]/g, \"\\\\b\");\n                }\n                return value;\n            }\n\n            // try env\n            if (parseEnv(name)) {\n                return this.cachedContextTokens[name];\n            }\n\n            // try flow/global context:\n            var context = parseContext(name);\n            if (context) {\n                var type = context.type;\n                var store = context.store;\n                var field = context.field;\n                var target = this.nodeContext[type];\n                if (target) {\n                    return this.cachedContextTokens[name];\n                }\n            }\n            return '';\n        }\n        catch (err) {\n            throw err;\n        }\n    }\n\n    NodeContext.prototype.push = function push(view) {\n        return new NodeContext(view, this.nodeContext, this.msgContext, undefined, this.cachedContextTokens);\n    };\n\n    function PkgFileNode(n) {\n        RED.nodes.createNode(this, n);\n        this.name = n.name;\n        this.filename = n.filename;\n        this.template = n.template;\n        this.format = n.format;\n        this.syntax = n.syntax || \"mustache\";\n        this.outputFormat = \"str\";\n\n        var node = this;\n\n        function output(nde, msg, value, send, done) {\n            if (!Array.isArray(msg.contents)) {\n                RED.util.setMessageProperty(msg, \"contents\", []);\n            }\n\n            msg.contents.push({\n                type: nde.format,\n                name: nde.filename,\n                contents: value\n            })\n\n            send(msg);\n            done();\n        }\n\n\n        node.on(\"input\", function (msg, send, done) {\n\n            try {\n                /***\n                * Allow template contents to be defined externally\n                * through inbound msg.template IFF node.template empty\n                */\n                var template = node.template;\n                if (msg.hasOwnProperty(\"template\")) {\n                    if (template == \"\" || template === null) {\n                        template = msg.template;\n                    }\n                }\n\n                if (node.syntax === \"mustache\") {\n                    var is_json = (node.outputFormat === \"json\");\n                    var promises = [];\n                    var tokens = extractTokens(mustache.parse(template));\n                    var resolvedTokens = {};\n                    tokens.forEach(function (name) {\n                        var env_name = parseEnv(name);\n                        if (env_name) {\n                            var promise = new Promise((resolve, reject) => {\n                                var val = RED.util.evaluateNodeProperty(env_name, 'env', node)\n                                resolvedTokens[name] = val;\n                                resolve();\n                            });\n                            promises.push(promise);\n                            return;\n                        }\n\n                        var context = parseContext(name);\n                        if (context) {\n                            var type = context.type;\n                            var store = context.store;\n                            var field = context.field;\n                            var target = node.context()[type];\n                            if (target) {\n                                var promise = new Promise((resolve, reject) => {\n                                    target.get(field, store, (err, val) => {\n                                        if (err) {\n                                            reject(err);\n                                        } else {\n                                            resolvedTokens[name] = val;\n                                            resolve();\n                                        }\n                                    });\n                                });\n                                promises.push(promise);\n                                return;\n                            }\n                        }\n                    });\n\n                    Promise.all(promises).then(function () {\n                        var value = mustache.render(template, new NodeContext(msg, node.context(), null, is_json, resolvedTokens));\n                        output(node, msg, value, send, done);\n                    }).catch(function (err) {\n                        done(err.message);\n                    });\n                } else {\n                    output(node, msg, template, send, done);\n                }\n            }\n            catch (err) {\n                done(err.message);\n            }\n        });\n    }\n\n    RED.nodes.registerType(\"PkgFile\", PkgFileNode);\n}","output":"str","x":720,"y":958,"wires":[["5ba60d0406c96771"]]},{"id":"6882d7b938aff9ae","type":"switch","z":"b92be5062203ff69","name":"randompackagename","property":"randompackagename","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":517,"y":434,"wires":[["e37e48af49967b9a"],["2a6775a8c79c806f"]]}]