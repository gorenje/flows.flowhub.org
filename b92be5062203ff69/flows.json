[{"id":"b92be5062203ff69","type":"tab","label":"[NodeDev] TarBall node","disabled":false,"info":"::: aim\n\nDevelopment of basic node within Node-RED.\n\n:::\n\n\n::: requirements\n\n- [development node flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n","env":[]},{"id":"dfe1df55864d8e07","type":"group","z":"b92be5062203ff69","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["2b18be6bbfbd26a5"],"x":598,"y":252.99998664855957,"w":352,"h":82},{"id":"2a6775a8c79c806f","type":"template","z":"b92be5062203ff69","name":"LICENSE","field":"contents.license","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":749,"y":489,"wires":[["afcb5f0634d9c8ed"]]},{"id":"afcb5f0634d9c8ed","type":"template","z":"b92be5062203ff69","name":"README.md","field":"contents.readme_md","fieldType":"msg","format":"markdown","syntax":"mustache","template":"## TarBall for Node-RED\n\nWork in progress\n","output":"str","x":759,"y":530,"wires":[["510df0dc73cc31f0"]]},{"id":"510df0dc73cc31f0","type":"template","z":"b92be5062203ff69","name":"package.json","field":"contents.package_json","fieldType":"msg","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n    \"pako\": \"latest\",\n    \"memory-streams\": \"latest\",\n    \"tar-stream\": \"latest\"\n  },\n\n  \"keywords\": [\n    \"node-red\", \"tar\", \"ball\", \"tarball\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"Gerrit Riessen <stupidity@spreads-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=2.0.0\",\n    \"nodes\": {\n      \"npmtarball\":   \"nodes/90-npm-tarball.js\"\n    }\n  },\n\n  \"description\": \"Generate a tarball from a bunch of files.\",\n  \"repository\": {\n    \"type\": \"github\",\n    \"url\": \"git+https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":759,"y":569,"wires":[["8c064319f0461453"]]},{"id":"8c064319f0461453","type":"template","z":"b92be5062203ff69","name":"90-npm-tarball.html","field":"contents.npm_tarball_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('NpmTarBall', {\n        category: 'nodedev',\n        color: \"#DEBD5C\",\n        defaults: {\n            name: {\n                value: \"\"\n            }\n        },\n        inputs: 1,\n        outputs: 1,\n        icon: \"font-awesome/fa-trademark\",\n        label: function() {\n            return this.name || this._def.paletteLabel;\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\": \"\";\n        }\n    });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NpmTarBall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n        <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NpmTarBall\">\n    <p>\n        NpmTarballirise msg content.\n    </p>\n</script>","output":"str","x":789,"y":650.9999866485596,"wires":[["b5ad22fbced928c8"]]},{"id":"b5ad22fbced928c8","type":"template","z":"b92be5062203ff69","name":"90-npm-tarball.js","field":"contents.npm_tarball_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NpmTarBallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        const tarStream = require('tar-stream');\n        const memoryStreams = require('memory-streams');\n        const pakoGzip = require('pako')\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            const pack = tarStream.pack()\n\n            msg.contents.forEach((elem) => {\n                pack.entry({ name: \"package/\" + elem.name }, elem.contents)\n            })\n\n            pack.finalize()\n\n            var writer = new memoryStreams.WritableStream();\n\n            pack.pipe(writer);\n\n            writer.on('finish', function () {\n                msg.payload = Buffer.from(pakoGzip.gzip(writer.toBuffer()));\n                send(msg)\n                done()\n            });\n        });\n    };\n\n    RED.nodes.registerType(\"NpmTarBall\", NpmTarBallFunctionality);\n}","output":"str","x":779,"y":694.9999866485596,"wires":[["58dd46303e98cd62"]]},{"id":"5ba60d0406c96771","type":"function","z":"b92be5062203ff69","name":"package dir structure","func":"msg.contents = [\n    { name: 'LICENSE',                        contents: msg.contents.license },\n    { name: 'README.md',                      contents: msg.contents.readme_md },\n    { name: 'package.json',                   contents: msg.contents.package_json},\n    { name: 'nodes/90-npm-tarball.html',      contents: msg.contents.npm_tarball_html},\n    { name: 'nodes/90-npm-tarball.js',        contents: msg.contents.npm_tarball_js},\n    { name: 'nodes/42-node-red-install.html', contents: msg.contents.node_red_install_html},\n    { name: 'nodes/42-node-red-install.js',   contents: msg.contents.node_red_install_js},\n]\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1205.22216796875,"y":977.7777709960938,"wires":[["6713609873f293c7","3ecb6c0111438324"]]},{"id":"6713609873f293c7","type":"link out","z":"b92be5062203ff69","name":"link out 92","mode":"link","links":["963dfb765b0d9849"],"x":1654.22216796875,"y":977.7777709960938,"wires":[]},{"id":"2b18be6bbfbd26a5","type":"inject","z":"b92be5062203ff69","g":"dfe1df55864d8e07","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-nodedev","vt":"str"},{"p":"pversion","v":"0.0.1","vt":"str"},{"p":"noderedinstall","v":"true","vt":"bool"},{"p":"gitcommit","v":"false","vt":"bool"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-nodedev","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"commit_message","v":"nice commit message","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"npmotp","v":"514058","vt":"str"},{"p":"contents","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":784,"y":293.99998664855957,"wires":[["2a6775a8c79c806f"]]},{"id":"3ecb6c0111438324","type":"debug","z":"b92be5062203ff69","name":"debug 41","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1604,"y":816,"wires":[]},{"id":"58dd46303e98cd62","type":"template","z":"b92be5062203ff69","name":"42-node-red-install.html","field":"contents.node_red_install_html","fieldType":"msg","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n RED.comms.subscribe('introspect:node-red-install-perform', (event,data) => {\n   if ( data.msg == \"execfunc\" ) {\n\n     var doSend = (data, nodeid, _msg) => {\n       if ( typeof data == \"object\" ) {\n         data = {\n           ..._msg,\n           ...data\n         };\n       }\n\n       $.ajax({\n         url:         \"NodeRedInstall/\" + nodeid,\n         type:        \"POST\",\n         contentType: \"application/json; charset=utf-8\",\n         data: JSON.stringify(data),\n\n         success: function (resp) {\n         },\n\n         error: function (jqXHR, textStatus, errorThrown) {\n           RED.notify(\"NodeRedInstall Communcation Failure: \" +\n                      nodeid + \": \" + textStatus, {\n             type: \"error\",\n             id: nodeid,\n             timeout: 3000\n           });\n         }\n       });\n     };\n\n     var doError = (msg, nodeid, _msg) => {\n       RED.notify(\"NodeRedInstall Failed: \" + nodeid + \": \" + msg, {\n         type: \"error\",\n         id: nodeid,\n         timeout: 3000\n       });\n\n       console.log( \"NodeRedInstall: Error with node: \" + nodeid + \": \" + msg);\n     };\n\n     var nodeid = data.nodeid;\n     var _msg = data._msg;\n\n     var node = {\n       send: (dt) => {\n         doSend(dt, nodeid, _msg)\n       },\n       error: (mg) => {\n         doError(mg, nodeid, _msg)\n       },\n       id: data.nodeid\n     };\n\n     var payload = data.payload;\n     var topic = data.topic;\n\n\n      var f = new File([new Blob([new Uint8Array(payload.data)])], \"tarball.tgz\", { type: \"application/x-gzip\" });\n\n      var data = new FormData();\n      data.append(\"tarball\", f);\n      var filename = f.name;\n\n      $.ajax({\n          url: 'nodes',\n          data: data,\n          cache: false,\n          contentType: false,\n          processData: false,\n          method: 'POST',\n      }).always(function (data, textStatus, xhr) {\n      }).success(function() {\n          RED.notify(\"Installed new package\", { type: \"success\"})\n      }).fail(function (xhr, textStatus, err) {\n          var message = textStatus;\n          if (xhr.responseJSON) {\n              message = xhr.responseJSON.message;\n          }\n          var notification = RED.notify(RED._('palette.editor.errors.installFailed', { module: filename, message: message }), {\n              type: 'error',\n              modal: true,\n              fixed: true,\n              buttons: [\n                  {\n                      text: RED._(\"common.label.close\"),\n                      click: function () {\n                          notification.close();\n                      }\n                  }, {\n                      text: RED._(\"eventLog.view\"),\n                      click: function () {\n                          notification.close();\n                          RED.actions.invoke(\"core:show-event-log\");\n                      }\n                  }\n              ]\n          });\n      })\n\n   }\n });\n\n  RED.nodes.registerType('NodeRedInstall',{\n    color: '#e5e4ef',\n    icon: \"icons/subflow.svg\",\n    category: 'nodedev',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n    inputs:1,\n    outputs:1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditsave: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditresize: function(size) {\n    }\n  });\n</script>\n\n<script type=\"text/html\" data-template-name=\"NodeRedInstall\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\">\n          <i class=\"fa fa-tag\"></i>\n          <span data-i18n=\"common.label.name\">Name</span>\n      </label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"NodeRedInstall\">\n    <p>Install tarball into Node-RED as new node package.</p>\n</script>","output":"str","x":822.857177734375,"y":755.7142810821533,"wires":[["878966b23666930c"]]},{"id":"878966b23666930c","type":"template","z":"b92be5062203ff69","name":"42-node-red-install.js","field":"contents.node_red_install_js","fieldType":"msg","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n    function NodeRedInstallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            RED.comms.publish(\n                \"introspect:node-red-install-perform\",\n                RED.util.encodeObject({\n                    msg: \"execfunc\",\n                    payload: msg.payload,\n                    topic: msg.topic,\n                    nodeid: node.id,\n                    _msg: msg\n                })\n            );\n        });\n    }\n    RED.nodes.registerType(\"NodeRedInstall\", NodeRedInstallFunctionality);\n\n    RED.httpAdmin.post(\"/NodeRedInstall/:id\",\n        RED.auth.needsPermission(\"NodeRedInstall.write\"),\n        (req, res) => {\n            var node = RED.nodes.getNode(req.params.id);\n            if (node != null) {\n                try {\n                    if (req.body && node.type == \"NodeRedInstall\") {\n                        node.send(req.body);\n                        res.sendStatus(200);\n                    } else {\n                        res.sendStatus(404);\n                    }\n                } catch (err) {\n                    res.sendStatus(500);\n                    node.error(\"NodeRedInstall: Submission failed: \" +\n                        err.toString())\n                }\n            } else {\n                res.sendStatus(404);\n            }\n        });\n}\n","output":"str","x":812.857177734375,"y":799.7142810821533,"wires":[["5ba60d0406c96771","8be7809afc016347","665d26f0d30f4e6c"]]},{"id":"8be7809afc016347","type":"function","z":"b92be5062203ff69","d":true,"name":"package dir structure","func":"msg.contents = [\n    { name: 'LICENSE',                        contents: msg.contents.license },\n    { name: 'README.md',                      contents: msg.contents.readme_md },\n    { name: 'package.json',                   contents: msg.contents.package_json},\n    { name: 'nodes/90-npm-tarball.html',      contents: msg.contents.npm_tarball_html},\n    { name: 'nodes/90-npm-tarball.js',        contents: msg.contents.npm_tarball_js},\n\n]\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1205.7142486572266,"y":874.2857255935669,"wires":[["6713609873f293c7"]]},{"id":"665d26f0d30f4e6c","type":"function","z":"b92be5062203ff69","d":true,"name":"package dir structure","func":"msg.contents = [\n    { name: 'LICENSE',                        contents: msg.contents.license },\n    { name: 'README.md',                      contents: msg.contents.readme_md },\n    { name: 'package.json',                   contents: msg.contents.package_json},\n\n\n]\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1204.2857666015625,"y":782.857177734375,"wires":[["6713609873f293c7"]]}]