[{"id":"3de89bdf647951dc","type":"tab","label":"[NodeDev] Auto Layout/Alignment Node","disabled":false,"info":"::: aim\n\nCreate a node for auto alignment.\n\n:::\n\n::: requirements\n\n- [nodedev](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-nodedev) node package\n- [development flow](https://flowhub.org/f/d0506e991d512ace)\n\n:::\n\n### Artifacts\n\n- [Flow maintaining this codebase](https://flowhub.org/f/3de89bdf647951dc)\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-auto-alignment)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-auto-alignment)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-auto-alignment)\n\n### Related Flows\n\n- [Example usage flow](https://flowhub.org/f/b22f47c724215b2a)\n- [Experimental flow](https://flowhub.org/f/291e3f0b7f652839)\n","env":[]},{"id":"623f7735afbd524c","type":"group","z":"3de89bdf647951dc","name":"command central","style":{"fill":"#addb7b","label":true},"nodes":["651f7f0f177d02ce"],"x":50,"y":194.66668701171875,"w":352,"h":82},{"id":"ab690c1fbc4d06b5","type":"group","z":"3de89bdf647951dc","name":"randomise package name for faster local development","style":{"label":true},"nodes":["d4654680d2ed9be0","54fe9423cb27e737","1f2fdd637af8218d"],"x":720.3333740234375,"y":106.5,"w":349,"h":171.5},{"id":"36290711feef2bc1","type":"group","z":"3de89bdf647951dc","name":"Flow required for local development","style":{"label":true},"nodes":["93988f6556895170"],"x":50,"y":310.25001525878906,"w":472,"h":82},{"id":"43e38e7fdd264028","type":"group","z":"3de89bdf647951dc","name":"Flow for experimenting with auto layout","style":{"label":true},"nodes":["8a79fdd89a0de13f"],"x":50,"y":425.8333435058594,"w":412,"h":82},{"id":"c12455e9c54f0209","type":"group","z":"3de89bdf647951dc","name":"Templates","style":{"label":true},"nodes":["4b50b8c4f9034b10"],"x":50,"y":657,"w":212,"h":82},{"id":"9e3a1f37bb5f7378","type":"group","z":"3de89bdf647951dc","name":"Usage Example","style":{"label":true},"nodes":["468b2bbe4eb262ab"],"x":50,"y":541.4166717529297,"w":392,"h":82},{"id":"f234c4b72bc95235","type":"PkgFile","z":"3de89bdf647951dc","name":"LICENSE","filename":"LICENSE","format":"markdown","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1284.3333740234375,"y":246,"wires":[["4ba61e8a58e45d70"]]},{"id":"c501b5c60c6908b7","type":"PkgFile","z":"3de89bdf647951dc","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"keywords\": [\n    \"node-red\", \"auto-alignment\", \"alignment\", \"auto-layout\", \"layout\"\n  ],\n\n  \"homepage\": \"https://github.com/{{githubowner}}/{{githubrepo}}/\",\n  \"license\": \"SEE LICENSE IN https://github.com/{{githubowner}}/{{githubrepo}}/blob/main/LICENSE\",\n  \"author\": \"Gerrit Riessen <nodered@spreads-the.love> (https://spread-the.love)\",\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=2.0.0\",\n    \"nodes\": {\n      \"autoalign\": \"nodes/autoalign.js\"\n    }\n  },\n\n  \"description\": \"Auto-layout/alignment of a Node-RED flow.\",\n  \n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/{{githubowner}}/{{githubrepo}}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{githubowner}}/{{githubrepo}}/issues\"\n  }\n}\n","output":"str","x":1302.3333740234375,"y":348,"wires":[["cfb5d9cde373f9cc"]]},{"id":"4ba61e8a58e45d70","type":"PkgFile","z":"3de89bdf647951dc","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# Auto Layout of Node-RED Flows\n\nAuto Layout Node-RED node flows.\n\n### Warning\n\nThis node uses third-party Javascript libraries to do node alignment. The following libs will be loaded into your browser upon use:\n\n- [elk.bundled.js](https://cdn.openmindmap.org/thirdparty/elk.bundled.js) \n- [dagre.min.js](https://cdn.openmindmap.org/thirdparty/dagre.min.js) \n\nboth hosted at [cdn.openmindmap.org](https://github.com/gorenje/cdn.openmindmap.org).\n\n### Usage\n\nSelect a single node in a flow that should be aligned/laid out. Then hit the button no this node:\n\n![img](https://cdn.openmindmap.org/content/1696154885193_Screen_Shot_2023-10-01_at_12.04.56.png)\n\nStep 1 select a single node for a flow, step 2 click the button on the AutoAlign node with the corresponding algorithm. After that you should see this:\n\n![img](https://cdn.openmindmap.org/content/1696154889365_Screen_Shot_2023-10-01_at_12.05.10.png)\n\nSelect the algorithm in the property panel:\n\n![img](https://cdn.openmindmap.org/content/1696155294954_Screen_Shot_2023-10-01_at_12.14.15.png)\n\n[Pull Request #2267](https://github.com/gorenje/cdn.openmindmap.org) is a Node-RED own auto layout algorithm which is provided as comparison. It uses neither of the libraries needed for the other algorithms.\n\nThe [example flow](https://flowhub.org/f/b22f47c724215b2a) provides one node per algorithm so that each can be tested in turn.\n\n### Libraries\n\nMore details on the libraries used:\n\n- [dagre](https://github.com/dagrejs/dagre)\n- [ELKjs](https://github.com/kieler/elkjs)\n\n### Testing other algorithms\n\nIf you want to test algorithms, there is an [experimental flow](https://flowhub.org/f/291e3f0b7f652839) that can help and a [discussion](https://discourse.nodered.org/t/node-red-auto-layouting-using-elkjs-dagre/81052) around auto-layout in Node-RED. \n\n### Artifacts\n\n- [Flow maintaining this codebase](https://flowhub.org/f/3de89bdf647951dc)\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-auto-alignment)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-auto-alignment)\n- [Node-RED node package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-auto-alignment)\n\n","output":"str","x":1298.3333740234375,"y":295,"wires":[["c501b5c60c6908b7"]]},{"id":"c9d84cf02e271144","type":"link out","z":"3de89bdf647951dc","name":"link out 118","mode":"link","links":["963dfb765b0d9849"],"x":2748.33349609375,"y":633.3333740234375,"wires":[]},{"id":"651f7f0f177d02ce","type":"inject","z":"3de89bdf647951dc","g":"623f7735afbd524c","name":"set package details and actions here","props":[{"p":"pname","v":"@gregoriusrippenstein/node-red-contrib-auto-alignment","vt":"str"},{"p":"pversion","v":"0.0.3","vt":"str"},{"p":"noderedinstall","v":"false","vt":"bool"},{"p":"gitcommit","v":"true","vt":"bool"},{"p":"npmpublish","v":"false","vt":"bool"},{"p":"npmunpublish","v":"false","vt":"bool"},{"p":"randompackagename","v":"true","vt":"bool"},{"p":"commit_message","v":"expand the selection requirements","vt":"str"},{"p":"npmotp","v":"111999","vt":"str"},{"p":"githubowner","v":"gorenje","vt":"str"},{"p":"githubrepo","v":"node-red-contrib-auto-alignment","vt":"str"},{"p":"githubbranch","v":"main","vt":"str"},{"p":"githubauthor","v":"Gerrit Riessen","vt":"str"},{"p":"githubauthoremail","v":"gerrit@openmindmap.org","vt":"str"},{"p":"algs","v":"{}","vt":"json"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":236,"y":235.66668701171875,"wires":[["54fe9423cb27e737"]]},{"id":"d4654680d2ed9be0","type":"change","z":"3de89bdf647951dc","g":"ab690c1fbc4d06b5","name":"","rules":[{"t":"set","p":"pname","pt":"msg","to":"$$.pname & $substring(\"\"&$random(),2)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":866.3333740234375,"y":147.5,"wires":[["f234c4b72bc95235"]]},{"id":"54fe9423cb27e737","type":"switch","z":"3de89bdf647951dc","g":"ab690c1fbc4d06b5","name":"randompackagename","property":"randompackagename","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":846.3333740234375,"y":237,"wires":[["1f2fdd637af8218d"],["f234c4b72bc95235"]]},{"id":"1f2fdd637af8218d","type":"switch","z":"3de89bdf647951dc","g":"ab690c1fbc4d06b5","name":"noderedinstall","property":"noderedinstall","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"false","repair":false,"outputs":2,"x":866.3333740234375,"y":192.25,"wires":[["d4654680d2ed9be0"],["f234c4b72bc95235"]]},{"id":"93988f6556895170","type":"FlowHubPull","z":"3de89bdf647951dc","g":"36290711feef2bc1","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":286,"y":351.25001525878906,"wires":[[]]},{"id":"8a79fdd89a0de13f","type":"FlowHubPull","z":"3de89bdf647951dc","g":"43e38e7fdd264028","name":"","notab":false,"flowid":"291e3f0b7f652839","flowname":"[Experimental] Auto-layout using Elkjs & dagre","flowrevision":"","x":256,"y":466.8333435058594,"wires":[[]]},{"id":"4b50b8c4f9034b10","type":"NodeFactory","z":"3de89bdf647951dc","g":"c12455e9c54f0209","name":"AutoAlign node","nodename":"AutoAlign","color":"#DDD7A0","hasbutton":true,"hasinput":false,"outputcount":"0","category":"introspection","summary":"Auto align Node-RED flows with a click of a button.","description":"Automagical alignment of Node-RED flows in the editor.","icon":"font-awesome/fa-outdent","x":156,"y":698,"wires":[[]]},{"id":"427f3381fc2bf435","type":"PkgFile","z":"3de89bdf647951dc","name":"AutoAlign.js","filename":"nodes/autoalign.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function AutoAlignFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function() {\n      node.status({});\n    });\n\n    /* Message handler */\n    node.on(\"input\", function(msg, send, done) {\n        send(msg);\n        done();\n    });\n  }\n  RED.nodes.registerType(\"AutoAlign\", AutoAlignFunctionality);\n}\n","output":"str","x":2493,"y":844,"wires":[["ffd918285ac7ca61"]]},{"id":"ffd918285ac7ca61","type":"PkgFile","z":"3de89bdf647951dc","name":"AutoAlign.html","filename":"nodes/autoalign.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n\n  /* \n      Source:\n      https://stackoverflow.com/questions/14644558/call-javascript-function-after-script-is-loaded\n  */\n  function loadScript(url, callback) {\n      var script = document.createElement(\"script\")\n      script.type = \"text/javascript\";\n\n      if (script.readyState) {  // only required for IE <9\n          script.onreadystatechange = function () {\n              if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                  script.onreadystatechange = null;\n                  callback();\n              }\n          };\n      } else {  //Others\n          script.onload = function () {\n              callback();\n          };\n      }\n\n      script.src = url;\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n  }\n\n  function loadDagre(cb) {\n    if (typeof dagre == \"undefined\") {\n      loadScript(\"https://cdn.openmindmap.org/thirdparty/dagre.min.js\", cb)\n    } else {\n      cb()\n    }\n  }\n\n  function loadElk(cb) {\n    if (typeof ELK == \"undefined\") {\n      loadScript(\"https://cdn.openmindmap.org/thirdparty/elk.bundled.js\", cb )\n    } else {\n      cb()\n    }\n  } \n\n  function findSelectedNodes(thisNode) {\n    /*\n     * Take the selection and create a nodeset from it.\n     */\n    var selection = RED.view.selection();\n    var fixedNodeId = undefined;\n    var ns = undefined;\n\n    if (!selection.nodes || selection.nodes.length == 0) {\n        RED.notify(\"Select exactly one node.\");\n        return;\n    }\n\n    if ( selection.nodes.length == 1 ) {\n      if (selection.nodes[0].id == thisNode.id || selection.nodes[0].type == thisNode.type) {\n          RED.notify(\"Please do not select the align node.\");\n          return;\n      }\n\n      if ( selection.nodes[0].type == \"group\") {\n        ns = RED.group.getNodes(selection.nodes[0])\n        if ( ns.length == 0 ) {\n          RED.notify(\"Empty group selected, very funny.\");\n          return;\n        }\n        fixedNodeId = ns[0].id;\n      } else {\n        ns = RED.nodes.getAllFlowNodes(selection.nodes[0])\n        fixedNodeId = selection.nodes[0].id;\n      }\n    }\n\n    if ( selection.nodes.length > 1 ) {\n      ns = []\n      for ( var idx = 0 ; idx < selection.nodes.length ; idx++ ) {\n        if ( selection.nodes[idx].type == \"group\") {\n          ns = ns.concat(RED.group.getNodes(selection.nodes[idx]))\n        } else {\n          ns.push(selection.nodes[idx])\n          fixedNodeId ||= selection.nodes[idx].id;\n        }\n      }\n\n      fixedNodeId ||= ns[0].id;\n    }\n\n    if ( !ns ) {\n      RED.notify(\"No nodes selected.\");\n      return;\n    }\n\n    /* \n     * From here it's all nodeset based.\n     */\n\n    // Convert nodes to flows.json format since all the wires, i.e. links, are \n    // contained in one simple json format.\n    var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n        return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n    });\n\n    var alledges = [];\n    var allNodeIds = allnodes.map( d => d.id);\n\n    allnodes.forEach((n) => {\n        for (var widx = 0; widx < n.wires.length; widx++) {\n            for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n              if ( allNodeIds.indexOf(n.wires[widx][xidx])> -1){\n                alledges.push({\n                  id: n.id + n.wires[widx][xidx],\n                  sources: [n.id],\n                  targets: [n.wires[widx][xidx]]\n                });\n              }\n            }\n        }\n    })\n\n    allnodes = allnodes.map((n) => {\n        return {\n            id: n.id,\n            width: document.getElementById(n.id).getBBox().width + 3,\n            height: document.getElementById(n.id).getBBox().height + 3,\n        }\n    });\n\n    return {\n      allnodes: allnodes,\n      alledges: alledges,\n      fixedNodeId: fixedNodeId\n    };\n  }\n\n  function moveNodes(payload) {\n    var children = payload.nodes;\n    var fixedNodeId = payload.fixedNodeId;\n\n    var changedNodes = [];\n\n    // Before moving anything we get the offset (x,y) - this is the amount that our\n    // fixed Node moved - our fixed node does not move, this means everything is offset\n    // by the distance it moved.\n    var offsetX = 0;\n    var offsetY = 0;\n    children.forEach((c) => {\n        if (c.id == fixedNodeId) {\n            var nd = RED.nodes.node(c.id);\n            offsetX = c.x - nd.x;\n            offsetY = c.y - nd.y;\n        }\n    });\n\n    children.forEach((c) => {\n        var nd = RED.nodes.node(c.id);\n\n        changedNodes.push({\n            n: nd,\n            ox: nd.x,\n            oy: nd.y,\n            moved: nd.moved\n        });\n\n        nd.x = c.x - offsetX;\n        nd.y = c.y - offsetY;\n        nd.dirty = true;\n    });\n\n    RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n    RED.nodes.dirty(true);\n    RED.view.redraw(true);\n  }\n\n  var allAlgs = [];\n\n{{{ algs.dagreLR }}}\n{{{ algs.dagreLongPath }}}\n{{{ args.elkMrTree }}}\n{{{ algs.elkjsLayeredUp }}}\n{{{ algs.elkjsLayeredDown }}}\n{{{ algs.elkjsBox }}}\n{{{ algs.pr2267 }}}\n\n  RED.nodes.registerType('AutoAlign',{\n    color: '#DDD7A0',\n    icon: \"font-awesome/fa-outdent\",\n    category: 'introspection',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n      algname: {\n        value: \"\"\n      }\n    },\n\n    inputs: 0,\n    outputs: 0,\n\n    label: function() {\n      return (this.name || this.algname || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    oneditprepare: function() {\n      var sltObj = $('#input-node-algname');\n      sltObj.html(\"\");\n      for ( var idx = 0; idx < allAlgs.length; idx++ ) {\n        sltObj.append($(\"<option></option>\").val( allAlgs[idx].name).html(allAlgs[idx].name))\n      }\n      sltObj.val(this.algname || allAlgs[0].name );\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n      this.algname = $('#input-node-algname').val();\n    },\n\n    button: {\n      enabled: function() {\n        return !this.changed\n      },\n\n      onclick: function () {\n        if (this.changed) {\n          return RED.notify(RED._(\"notification.warning\", {\n            message: RED._(\"notification.warnings.undeployedChanges\")\n          }), \"warning\");\n        }\n\n        var that = this;\n        var reqAlgName = that.algname || $('#input-node-algname').val() || allAlgs[0].name;\n        var alg = allAlgs.filter( function(o){ return o.name == reqAlgName })[0];\n\n        var handleFunctCall = (data) => {\n          switch (data.type) {\n            case \"movenodes\":\n              moveNodes(data)\n              break;\n            case \"error\":\n              RED.notify(data.payload, {\n                  type: \"error\",\n                  id: that.id,\n                  timeout: 4000\n              });\n              break;\n            case \"noop\":\n              break;\n            default:\n              RED.notify(\"Unknown action: \" + data.type, {\n                  type: \"error\",\n                  id: that.id,\n                  timeout: 3000\n              });\n              break\n          }\n        };\n\n        var selectedNodes = findSelectedNodes(that);\n\n        if ( selectedNodes ) {\n          if ( alg.jslib ) {\n            alg.jslib( () => {\n              alg.funct(selectedNodes, (data) => {\n                handleFunctCall(data)\n              })\n            })\n          } else {\n            alg.funct(selectedNodes, (data) => {\n              handleFunctCall(data)\n            })\n          }\n        }\n      }\n    },\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"AutoAlign\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-algname\">\n          <span>Algorithm </span>\n      </label>\n      <select id=\"input-node-algname\"></select>\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"AutoAlign\">\n  <p>Auto align Node-RED flows with a click of a button.</p>\n  Automagical alignment of Node-RED flows in the editor. Select a node from a flow and click the button.\n</script>\n","output":"str","x":2500,"y":893,"wires":[["c9d84cf02e271144"]]},{"id":"cfb5d9cde373f9cc","type":"template","z":"3de89bdf647951dc","name":"pr2267","field":"algs.pr2267","fieldType":"msg","format":"javascript","syntax":"mustache","template":"/*\nTaken from https://github.com/node-red/node-red/pull/2267/files\n*/\n\nfunction layoutFlow(_payload, callback) {\n\n    var selection = RED.view.selection();\n    \n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n    \n    var ns = undefined;\n    if (selection.nodes[0].type == \"group\") {\n        ns = RED.group.getNodes(selection.nodes[0])\n    } else {\n        ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n    }\n\n    // Find Input node\n\n    var nodes = {};\n    var minRank = 0;\n    var stack = [];\n    var candidateInputs = {};\n    var candidateOutputs = {};\n    ns.forEach(function (n) {\n        candidateInputs[n.id] = n;\n        candidateOutputs[n.id] = n;\n        nodes[n.id] = {\n            n: n,\n            i: [],\n            o: [],\n            d: -1, // depth from start\n            r: -1, // rank order at that depth\n            downstream: 0\n        }\n    });\n    RED.nodes.eachLink(function (link) {\n        if (nodes[link.source.id] || nodes[link.target.id]) {\n            nodes[link.source.id].o.push(link.target.id);\n            nodes[link.target.id].i.push(link.source.id);\n            delete candidateInputs[link.target.id]\n            delete candidateOutputs[link.source.id]\n        }\n    })\n\n    var inputs = Object.keys(candidateInputs);\n    var outputs = Object.keys(candidateOutputs);\n\n    if (inputs.length > 1) {\n        RED.notify(\"Multiple start points - bailing\")\n        return;\n    }\n\n    if (outputs.length === 0) {\n        RED.notify(\"No outputs - is this a big loop? Bailing\");\n        return;\n    }\n\n    function applyDepth(id, d) {\n        if (nodes[id].d < d) {\n            nodes[id].d = d;\n            nodes[id].o.forEach(function (nid) {\n                applyDepth(nid, d + 1);\n            })\n        }\n    }\n    applyDepth(inputs[0], 0)\n\n    function calculateDownstream(id, downstream) {\n        nodes[id].downstream += downstream;\n        nodes[id].i.forEach(function (nid) {\n            calculateDownstream(nid, nodes[id].downstream + 1);\n        })\n    }\n    outputs.forEach(function (id) {\n        calculateDownstream(id, 0)\n    })\n\n    var ranks = {};\n    function rankNodes(node) {\n        if (node.r === -1) {\n            ranks[node.d] = ranks[node.d] || [];\n            node.r = ranks[node.d].length;\n            ranks[node.d].push(node);\n            node.o.sort(function (a, b) {\n                return nodes[b].downstream - nodes[a].downstream\n            })\n            node.o.forEach(function (nid) {\n                rankNodes(nodes[nid])\n            })\n        }\n    }\n    rankNodes(nodes[inputs[0]]);\n    function shuffleRanks(node) {\n        var pushed = false;\n        if (node.o.length > 1) {\n            var outputs = node.o.slice(0);\n            outputs.sort(function (a, b) {\n                if (nodes[a].d === nodes[b].d) {\n                    return nodes[a].r - nodes[b].r;\n                } else {\n                    return nodes[b].d - nodes[a].d;\n                }\n            })\n            // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n            var rank = nodes[outputs[0]].r;\n            var depth = nodes[outputs[0]].d;\n            for (var i = 1; i < outputs.length; i++) {\n                // console.log(outputs[i]);\n                var n = nodes[outputs[i]];\n                if (n.d !== depth && n.r === rank) {\n                    // need to move n down one.\n                    var r = n.r;\n                    ns.forEach(function (_n) {\n                        var nn = nodes[_n.id];\n                        if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                            pushed = true;\n                            nn.r++;\n                        }\n                    })\n                }\n                depth = n.d;\n                rank = n.r;\n            }\n        }\n        node.o.forEach(function (n) {\n            pushed = pushed || shuffleRanks(nodes[n])\n        })\n        return pushed;\n    }\n    var shuffle = function () {\n        if (shuffleRanks(nodes[inputs[0]])) {\n            shuffle();\n        }\n    }\n    shuffle();\n\n\n    var x = nodes[inputs[0]].n.x;\n    var y = nodes[inputs[0]].n.y;\n    var changedNodes = [];\n    ns.forEach(function (n) {\n        var d = nodes[n.id].d;\n        var r = nodes[n.id].r;\n\n        changedNodes.push({\n            n: n,\n            ox: n.x,\n            oy: n.y,\n            moved: n.moved\n        });\n\n        n.x = x + d * 200;\n        n.y = y + r * 50;\n        n.dirty = true;\n        // n.dirtyStatus = true;\n        // n.status = {\n        //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n        // }\n    });\n\n    if (changedNodes.length > 0) {\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n\n    callback({ type: \"noop\" })\n}\n\nallAlgs.push({\n    name: \"Pull Request #2267\",\n    funct: layoutFlow,\n    jslib: undefined,\n})\n","output":"str","x":1501.5,"y":770,"wires":[["0a5ed4904371df1c"]]},{"id":"74f19065e62b560b","type":"template","z":"3de89bdf647951dc","name":"dagreLR","field":"algs.dagreLR","fieldType":"msg","format":"javascript","syntax":"mustache","template":"/* Code take from https://pastebin.com/TJRFD3mg\n   which came from https://discourse.nodered.org/t/read-flows-json-and-position-the-nodes-in-most-efficient-readable-way/78158/12\n*/\nfunction dagreLR(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    var g = new dagre.graphlib.Graph();\n    \n    g.setGraph({});\n    g.setDefaultEdgeLabel(function () { return {}; });\n\n    for (var idx = 0; idx < allnodes.length; idx++) {\n        var n = allnodes[idx];\n        g.setNode(n.id, {\n            ...n,\n        })\n    }\n\n    for (var idx = 0; idx < alledges.length; idx++) {\n        var e = alledges[idx];\n        g.setEdge(e.sources[0], e.targets[0])\n    }\n\n    g.graph().rankdir = \"LR\"\n    g.graph().marginx = 20\n    g.graph().marginy = 20\n\n    dagre.layout(g)\n\n    callback({\n        type: \"movenodes\",\n        fixedNodeId: fixedNodeId,\n        nodes: g.nodes().map(function (v) {\n             return {\n                  ...g.node(v)\n                }\n        })            \n    })\n}\n\nallAlgs.push({\n    name: \"Dagre LR\",\n    funct: dagreLR,\n    jslib: loadDagre,\n})\n","output":"str","x":1733.5,"y":899.4000244140625,"wires":[["6594b806866bb662"]]},{"id":"2f46de2ec5296b39","type":"template","z":"3de89bdf647951dc","name":"elkjsLayeredUp","field":"algs.elkjsLayeredUp","fieldType":"msg","format":"javascript","syntax":"mustache","template":"function elkjsLayeredUp(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'org.eclipse.elk.layered',\n            \"elk.direction\": \"UP\",\n            \"cycleBreaking.strategy\": \"INTERACTIVE\",\n            \"layering.strategy\": \"INTERACTIVE\",\n            \"crossingMinimization.semiInteractive\": true,\n            \"separateConnectedComponents\": true,\n            \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n            \"spacing.nodeNode\": 70,\n            \"spacing.nodeNodeBetweenLayers\": 25,\n            \"spacing.edgeNode\": 25,\n            \"spacing.edgeNodeBetweenLayers\": 20,\n            \"spacing.edgeEdge\": 20,\n            \"spacing.edgeEdgeBetweenLayers\": 15,\n\n\n            \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n            \"elk.layered.spacing.edgeNodeBetweenLayers\": 40,\n            \"elk.layered.nodePlacement.bk.fixedAlignment\": \"BALANCED\",\n            \"layering.layerConstraint\": \"FIRST\",\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            callback({\n                type: \"movenodes\",\n                fixedNodeId: fixedNodeId,\n                nodes: g.children\n            })\n        })\n        .catch((g) => { callback({ type: \"error\", payload: g }) });\n}\n\nallAlgs.push({\n    name: \"ELKjs Layered Upwards\",\n    funct: elkjsLayeredUp,\n    jslib: loadElk,\n})\n","output":"str","x":1930.5,"y":770,"wires":[["24ed0df5fa7091d2"]]},{"id":"24ed0df5fa7091d2","type":"template","z":"3de89bdf647951dc","name":"elkjsLayeredDown","field":"algs.elkjsLayeredDown","fieldType":"msg","format":"javascript","syntax":"mustache","template":"function elkjsLayeredDown(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'org.eclipse.elk.layered',\n            \"elk.direction\": \"DOWN\",\n            \"cycleBreaking.strategy\": \"INTERACTIVE\",\n            \"layering.strategy\": \"INTERACTIVE\",\n            \"crossingMinimization.semiInteractive\": true,\n            \"separateConnectedComponents\": true,\n            \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n            \"spacing.nodeNode\": 70,\n            \"spacing.nodeNodeBetweenLayers\": 25,\n            \"spacing.edgeNode\": 25,\n            \"spacing.edgeNodeBetweenLayers\": 20,\n            \"spacing.edgeEdge\": 20,\n            \"spacing.edgeEdgeBetweenLayers\": 15,\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            callback({\n                    type: \"movenodes\",\n                    fixedNodeId: fixedNodeId,\n                    nodes: g.children\n            })\n        })\n        .catch((g) => { callback({ type: \"error\", payload: g }) });\n}\n\nallAlgs.push({\n    name: \"ELKjs Layered Downwards\",\n    funct: elkjsLayeredDown,\n    jslib: loadElk,\n})\n","output":"str","x":2065.5,"y":840.3999938964844,"wires":[["bba1328607a99107"]]},{"id":"0a5ed4904371df1c","type":"template","z":"3de89bdf647951dc","name":"dagreLongPath","field":"algs.dagreLongPath","fieldType":"msg","format":"javascript","syntax":"mustache","template":"/* Code take from https://pastebin.com/TJRFD3mg\n   which came from https://discourse.nodered.org/t/read-flows-json-and-position-the-nodes-in-most-efficient-readable-way/78158/12\n*/\nfunction dagreLongPath(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    var g = new dagre.graphlib.Graph();\n    g.setGraph({});\n    g.setDefaultEdgeLabel(function () { return {}; });\n\n    for (var idx = 0; idx < allnodes.length; idx++) {\n        var n = allnodes[idx];\n        g.setNode(n.id, {\n            ...n,\n        })\n    }\n\n    for (var idx = 0; idx < alledges.length; idx++) {\n        var e = alledges[idx];\n        g.setEdge(e.sources[0], e.targets[0])\n    }\n\n    g.graph().rankdir = \"LR\"\n    g.graph().marginx = 2\n    g.graph().marginy = 2\n    g.graph().ranker = \"longest-path\"\n    g.graph().nodesep = 2\n    g.graph().ranksep = 2\n\n    dagre.layout(g)\n\n    callback({\n        type: \"movenodes\",\n        fixedNodeId: fixedNodeId,\n        nodes: g.nodes().map(function (v) {\n            return {\n                ...g.node(v)\n            }\n        })\n    })\n}\n\nallAlgs.push({\n    name: \"Dagre Longest Path\",\n    funct: dagreLongPath,\n    jslib: loadDagre,\n})","output":"str","x":1620.5,"y":840.3999938964844,"wires":[["74f19065e62b560b"]]},{"id":"6594b806866bb662","type":"template","z":"3de89bdf647951dc","name":"elkMrTree","field":"args.elkMrTree","fieldType":"msg","format":"javascript","syntax":"mustache","template":"function elkMrTree(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'mrtree',\n            'childAreaHeight': 4500,\n            'childAreaWidth': 4500,\n            \"org.eclipse.elk.direction\": \"RIGHT\",\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            callback({\n                type: \"movenodes\",\n                fixedNodeId: fixedNodeId,\n                nodes: g.children\n            })\n        })\n        .catch((ex) => {\n            callback({\n                type: \"error\",\n                payload: ex\n            })\n        });\n}\n\nallAlgs.push({\n    name: \"ELKjs Mr. Tree\",\n    funct: elkMrTree,\n    jslib: loadElk,\n})\n","output":"str","x":1836.5,"y":840.3999938964844,"wires":[["2f46de2ec5296b39"]]},{"id":"bba1328607a99107","type":"template","z":"3de89bdf647951dc","name":"elkjsBox","field":"algs.elkjsBox","fieldType":"msg","format":"javascript","syntax":"mustache","template":"function elkjsBox(payload, callback) {\n    var allnodes = payload.allnodes;\n    var alledges = payload.alledges;\n    var fixedNodeId = payload.fixedNodeId;\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'org.eclipse.elk.box',\n            'childAreaHeight': 3000,\n            'childAreaWidth': 3000,\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            callback({\n                type: \"movenodes\",\n                fixedNodeId: fixedNodeId,\n                nodes: g.children\n            })\n        })\n        .catch((g) => { callback({ type: \"error\", payload: g }) });\n\n}\n\nallAlgs.push({\n    name: \"ELKjs Box algorithm\",\n    funct: elkjsBox,\n    jslib: loadElk,\n})","output":"str","x":2193,"y":899.4000244140625,"wires":[["49068c5dd69d655e"]]},{"id":"468b2bbe4eb262ab","type":"FlowHubPull","z":"3de89bdf647951dc","g":"9e3a1f37bb5f7378","name":"","notab":false,"flowid":"b22f47c724215b2a","flowname":"[NodeDev] Example of auto alignment node","flowrevision":"","x":246,"y":582.4166717529297,"wires":[[]]},{"id":"49068c5dd69d655e","type":"PkgFile","z":"3de89bdf647951dc","name":"usage example","filename":"examples/flows.json","format":"json","syntax":"mustache","template":"[\n    {\n        \"id\": \"2e42d0c736930c5b\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"Dagre LR\",\n        \"x\": 276,\n        \"y\": 296,\n        \"wires\": []\n    },\n    {\n        \"id\": \"087f2ae86c3b7a16\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"Dagre Longest Path\",\n        \"x\": 306,\n        \"y\": 344.5,\n        \"wires\": []\n    },\n    {\n        \"id\": \"748eff9e44a65b45\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"ELKjs Mr. Tree\",\n        \"x\": 286,\n        \"y\": 393,\n        \"wires\": []\n    },\n    {\n        \"id\": \"ba51e1b8380acf95\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"ELKjs Layered Upwards\",\n        \"x\": 316,\n        \"y\": 441.5,\n        \"wires\": []\n    },\n    {\n        \"id\": \"d5e1d4d42711047c\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"ELKjs Layered Downwards\",\n        \"x\": 326,\n        \"y\": 490,\n        \"wires\": []\n    },\n    {\n        \"id\": \"3ed68605ccbd2818\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"ELKjs Box algorithm\",\n        \"x\": 306,\n        \"y\": 538.5,\n        \"wires\": []\n    },\n    {\n        \"id\": \"8ae5790663c95248\",\n        \"type\": \"AutoAlign\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"\",\n        \"algname\": \"Pull Request #2267\",\n        \"x\": 306,\n        \"y\": 587,\n        \"wires\": []\n    },\n    {\n        \"id\": \"0c8646167bee3330\",\n        \"type\": \"group\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"Straight down the line\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"f97bd60404eabab4\",\n            \"69ca33e8074f600e\",\n            \"5f39f70315979199\",\n            \"4e6cf20218d2752f\",\n            \"f51b3b557cf32cda\",\n            \"3a49d2cc4589f06b\",\n            \"7e6b0d6ec70dfb69\",\n            \"a3199b53fa75bb94\",\n            \"54f8b5a83cde5b2c\"\n        ],\n        \"x\": 877,\n        \"y\": 238,\n        \"w\": 599.75,\n        \"h\": 263\n    },\n    {\n        \"id\": \"f97bd60404eabab4\",\n        \"type\": \"inject\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"set RSS url\",\n        \"props\": [\n            {\n                \"p\": \"url\",\n                \"v\": \"https://flows.flowhub.org/feed.xml\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"x\": 983,\n        \"y\": 338,\n        \"wires\": [\n            [\n                \"69ca33e8074f600e\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"69ca33e8074f600e\",\n        \"type\": \"http request\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"\",\n        \"method\": \"GET\",\n        \"ret\": \"txt\",\n        \"paytoqs\": false,\n        \"url\": \"\",\n        \"persist\": false,\n        \"insecureHTTPParser\": false,\n        \"authType\": \"\",\n        \"senderr\": false,\n        \"headers\": [],\n        \"x\": 1325,\n        \"y\": 363,\n        \"wires\": [\n            [\n                \"5f39f70315979199\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"5f39f70315979199\",\n        \"type\": \"xml\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"parse feed.xml\",\n        \"property\": \"payload\",\n        \"attr\": \"\",\n        \"chr\": \"\",\n        \"x\": 1282,\n        \"y\": 423,\n        \"wires\": [\n            [\n                \"f51b3b557cf32cda\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4e6cf20218d2752f\",\n        \"type\": \"split\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"\",\n        \"splt\": \"\\\\n\",\n        \"spltType\": \"str\",\n        \"arraySplt\": 1,\n        \"arraySpltType\": \"len\",\n        \"stream\": false,\n        \"addname\": \"\",\n        \"x\": 1223,\n        \"y\": 279,\n        \"wires\": [\n            [\n                \"3a49d2cc4589f06b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"f51b3b557cf32cda\",\n        \"type\": \"change\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"set payload and define fake tab Z id\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"payload.feed.entry\",\n                \"tot\": \"msg\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1184,\n        \"y\": 460,\n        \"wires\": [\n            [\n                \"4e6cf20218d2752f\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"3a49d2cc4589f06b\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"convert xml object to flow object\",\n        \"func\": \"msg.payload = {\\n    \\\"id\\\": msg.payload.id[0].match(/.{16}$/)[0],\\n    \\\"type\\\": \\\"comment\\\",\\n    \\\"name\\\": msg.payload.title[0][\\\"_\\\"],\\n    \\\"info\\\": msg.payload.id[0],\\n    \\\"x\\\": 801 * Math.random(),\\n    \\\"y\\\": 699 * Math.random(),\\n    \\\"wires\\\": [\\n    ]\\n}\\n\\nreturn msg;\\n\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1291,\n        \"y\": 401,\n        \"wires\": [\n            [\n                \"7e6b0d6ec70dfb69\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"7e6b0d6ec70dfb69\",\n        \"type\": \"join\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"\",\n        \"mode\": \"auto\",\n        \"build\": \"object\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"key\": \"topic\",\n        \"joiner\": \"\\\\n\",\n        \"joinerType\": \"str\",\n        \"accumulate\": true,\n        \"timeout\": \"\",\n        \"count\": \"\",\n        \"reduceRight\": false,\n        \"reduceExp\": \"\",\n        \"reduceInit\": \"\",\n        \"reduceInitType\": \"\",\n        \"reduceFixup\": \"\",\n        \"x\": 1280,\n        \"y\": 429,\n        \"wires\": [\n            [\n                \"a3199b53fa75bb94\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a3199b53fa75bb94\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"prepend the subflow to the nodes array\",\n        \"func\": \"msg.payload = {\\n    flowContent: msg.payload,\\n    removeduplicates: true,\\n    autoimport: false\\n}\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1287,\n        \"y\": 379,\n        \"wires\": [\n            [\n                \"54f8b5a83cde5b2c\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"54f8b5a83cde5b2c\",\n        \"type\": \"ClientCode\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"0c8646167bee3330\",\n        \"name\": \"Open import dialog\",\n        \"clientcode\": \"function doIt() {\\n  var content = payload.flowContent;\\n\\n  if (payload.removeduplicates) {\\n    content = content.filter((elem) => {\\n      return RED.nodes.node(elem.id) == undefined\\n    });\\n  }\\n\\n  if (content.length == 0) {\\n    RED.notify(\\\"No new content\\\", {\\n      type: \\\"ok\\\",\\n      id: \\\"TriggerImport\\\",\\n      timeout: 2000\\n    });\\n    return;\\n  }\\n  RED.clipboard.import();\\n\\n  setTimeout(() => {\\n    $('#red-ui-clipboard-dialog-import-text').val(\\n      JSON.stringify(content)\\n    ).trigger(\\\"paste\\\");\\n\\n    if (payload.autoimport) {\\n      setTimeout(() => {\\n        $('#red-ui-clipboard-dialog-ok').trigger('click');\\n      }, 435);\\n    }\\n  }, 300);\\n};\\n\\ndoIt();\\n\",\n        \"format\": \"javascript\",\n        \"x\": 1360.75,\n        \"y\": 392.20849609375,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"26b4953b4190c897\",\n        \"type\": \"group\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"forky straight line\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"4e3b4233ee17a6d8\",\n            \"ea99f83b84f997c5\",\n            \"fefb17793a918b94\",\n            \"35f0115eef846468\",\n            \"4ed352d45040489c\",\n            \"98c9058cb15f0b4d\",\n            \"a36ef8f61f973c7a\",\n            \"48c848470e9ab2ae\"\n        ],\n        \"x\": 874,\n        \"y\": 582.4285182952881,\n        \"w\": 424.8571529388428,\n        \"h\": 174.8572120666504\n    },\n    {\n        \"id\": \"4e3b4233ee17a6d8\",\n        \"type\": \"inject\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"don't press me\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            },\n            {\n                \"p\": \"topic\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": false,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 1000,\n        \"y\": 692,\n        \"wires\": [\n            [\n                \"ea99f83b84f997c5\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ea99f83b84f997c5\",\n        \"type\": \"switch\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1112.857126235962,\n        \"y\": 653.4285888671875,\n        \"wires\": [\n            [\n                \"fefb17793a918b94\",\n                \"35f0115eef846468\",\n                \"98c9058cb15f0b4d\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fefb17793a918b94\",\n        \"type\": \"change\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1185.7143077850342,\n        \"y\": 714.857195854187,\n        \"wires\": [\n            [\n                \"4ed352d45040489c\",\n                \"a36ef8f61f973c7a\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"35f0115eef846468\",\n        \"type\": \"debug\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"debug 41\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1147.1428356170654,\n        \"y\": 623.4285182952881,\n        \"wires\": []\n    },\n    {\n        \"id\": \"4ed352d45040489c\",\n        \"type\": \"switch\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"eq\",\n                \"v\": \"\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 1195.7142581939697,\n        \"y\": 667.7143034934998,\n        \"wires\": [\n            [\n                \"48c848470e9ab2ae\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"98c9058cb15f0b4d\",\n        \"type\": \"link out\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"link out 119\",\n        \"mode\": \"link\",\n        \"links\": [],\n        \"x\": 1239.999984741211,\n        \"y\": 666.2856950759888,\n        \"wires\": []\n    },\n    {\n        \"id\": \"a36ef8f61f973c7a\",\n        \"type\": \"debug\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"debug 42\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1192.8571529388428,\n        \"y\": 716.2857303619385,\n        \"wires\": []\n    },\n    {\n        \"id\": \"48c848470e9ab2ae\",\n        \"type\": \"template\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"26b4953b4190c897\",\n        \"name\": \"\",\n        \"field\": \"payload\",\n        \"fieldType\": \"msg\",\n        \"format\": \"handlebars\",\n        \"syntax\": \"mustache\",\n        \"template\": \"This is the payload: {{payload}} !\",\n        \"output\": \"str\",\n        \"x\": 1168.5714168548584,\n        \"y\": 640.5714635848999,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"a384f19c472f9e94\",\n        \"type\": \"group\",\n        \"z\": \"b22f47c724215b2a\",\n        \"name\": \"Loop\",\n        \"style\": {\n            \"label\": true\n        },\n        \"nodes\": [\n            \"a60fb929a9eb268c\",\n            \"11293e4022cd903d\",\n            \"b8c1627dfd8a5e89\",\n            \"8a78cc0a39fce021\",\n            \"6187451cb60a706d\"\n        ],\n        \"x\": 871,\n        \"y\": 839,\n        \"w\": 259,\n        \"h\": 198\n    },\n    {\n        \"id\": \"a60fb929a9eb268c\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"a384f19c472f9e94\",\n        \"name\": \"function 20\",\n        \"func\": \"\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1030,\n        \"y\": 955,\n        \"wires\": [\n            [\n                \"11293e4022cd903d\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"11293e4022cd903d\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"a384f19c472f9e94\",\n        \"name\": \"function 21\",\n        \"func\": \"\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1002,\n        \"y\": 965,\n        \"wires\": [\n            [\n                \"a60fb929a9eb268c\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b8c1627dfd8a5e89\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"a384f19c472f9e94\",\n        \"name\": \"function 22\",\n        \"func\": \"\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 967,\n        \"y\": 939,\n        \"wires\": [\n            [\n                \"6187451cb60a706d\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"8a78cc0a39fce021\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"a384f19c472f9e94\",\n        \"name\": \"function 23\",\n        \"func\": \"\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1034,\n        \"y\": 996,\n        \"wires\": [\n            [\n                \"b8c1627dfd8a5e89\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6187451cb60a706d\",\n        \"type\": \"function\",\n        \"z\": \"b22f47c724215b2a\",\n        \"g\": \"a384f19c472f9e94\",\n        \"name\": \"THE LOOP!\",\n        \"func\": \"\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 1006,\n        \"y\": 880,\n        \"wires\": [\n            [\n                \"11293e4022cd903d\",\n                \"8a78cc0a39fce021\"\n            ]\n        ]\n    }\n]","output":"str","x":2495,"y":796,"wires":[["427f3381fc2bf435"]]}]