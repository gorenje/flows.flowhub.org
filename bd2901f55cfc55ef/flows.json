[{"id":"bd2901f55cfc55ef","type":"tab","label":"[NodeDev] NodeCompare","disabled":false,"info":"::: aim\n\nCreate a node that visually compares the server flow with the editor flow.\n\n:::\n\n","env":[]},{"id":"c462f8aed0fad6e1","type":"NodeDevOps","z":"bd2901f55cfc55ef","name":"","pname":"@gregoriusrippenstein/node-red-contrib-nodecompare","pversion":"0.0.1","noderedinstall":true,"randompackagename":true,"gitcommit":false,"gitcheckforchange":false,"githubowner":"","githubrepo":"","githubbranch":"main","githubauthor":"","githubauthoremail":"","githubmessage":"","npmpublish":false,"npmunpublish":false,"npmotp":"","x":561.5,"y":560,"wires":[["11df648c323fad7f"]]},{"id":"7e645fab96ebceb1","type":"NodeFactory","z":"bd2901f55cfc55ef","name":"","nodename":"FlowCompare","color":"#FDF0C2","hasbutton":false,"hasinput":false,"outputcount":1,"category":"introspection","summary":"Visually compare local flow with flow deployed on the server.","description":"Viusal comparison of flows being edited and flow that has been deployed.","icon":"font-awesome/fa-map","frt2bakcomm":true,"bak2frtcomm":true,"createmanifest":true,"x":248.5,"y":676,"wires":[[]]},{"id":"f85686511082a34a","type":"PkgFile","z":"bd2901f55cfc55ef","name":"FlowCompare.js","filename":"nodes/flowcompare.js","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n  function FlowCompareFunctionality(config) {\n    RED.nodes.createNode(this, config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function () {\n      node.status({});\n    });\n\n    /* msg handler, in this case pass the message on unchanged */\n    node.on(\"input\", function (msg, send, done) {\n      send(msg);\n      done();\n    });\n  }\n\n  RED.nodes.registerType(\"FlowCompare\", FlowCompareFunctionality);\n\n  function compareFlows(msg) {\n    var oldFlowRevision = {};\n    var newFlowRevision = {};\n\n    for (var idx = 0; idx < msg.payload.length; idx++) {\n      oldFlowRevision[msg.payload[idx].id] = msg.payload[idx]\n    }\n\n    for (var idx = 0; idx < msg.new_flowdata.length; idx++) {\n      newFlowRevision[msg.new_flowdata[idx].id] = msg.new_flowdata[idx]\n    }\n\n    var changes = []\n\n    /* nodes that have been deleted */\n    for (var idx = 0; idx < msg.payload.length; idx++) {\n      var oldObj = msg.payload[idx];\n\n      if (!newFlowRevision[oldObj.id]) {\n        changes.push({\n          type: \"deleted\",\n          id: oldObj.id,\n          oldObj: oldObj,\n          newObj: undefined\n        })\n      }\n    }\n\n    for (var idx = 0; idx < msg.new_flowdata.length; idx++) {\n      var newObj = msg.new_flowdata[idx];\n      var oldObj = oldFlowRevision[newObj.id];\n\n      if (!oldObj) {\n        changes.push({\n          type: \"added\",\n          id: newObj.id,\n          oldObj: undefined,\n          newObj: newObj\n        })\n      } else {\n        if (JSON.stringify(oldObj) != JSON.stringify(newObj)) {\n          changes.push({\n            type: \"changed\",\n            id: newObj.id,\n            oldObj: oldObj,\n            newObj: newObj\n          })\n        }\n      }\n    }\n\n    return changes;\n  }\n\n  RED.httpAdmin.post(\"/FlowCompare/:id\",\n    RED.auth.needsPermission(\"FlowCompare.write\"),\n    (req, res) => {\n      var node = RED.nodes.getNode(req.params.id);\n      if (node != null) {\n        try {\n          if (req.body && node.type == \"FlowCompare\") {\n            /*\n            console.log( \"sending flow data from backebn\")\n            console.log( RED )\n            console.log( RED.nodes )\n            console.log( RED.utils )\n            */\n            var nodes = [];\n            RED.nodes.eachNode(nde => {\n              if (nde.z == req.body.flowid || nde.id == req.body.flowid) nodes.push(nde)\n            })\n\n            console.log( nodes )\n            res.status(200).send({\n              \"status\": \"ok\",\n              \"nodes\": nodes,\n              \"changes\": compareFlows({payload: nodes, new_flowdata: req.body.flowdata})\n            })\n          } else {\n            res.sendStatus(404);\n          }\n        } catch (err) {\n          console.error(err);\n          res.status(500).send(err.toString());\n          node.error(\"FlowCompare: Submission failed: \" + err.toString())\n        }\n      } else {\n        res.sendStatus(404);\n      }\n    });\n}\n","output":"str","x":1025,"y":465,"wires":[["1d2f7f4a10c885c6"]]},{"id":"1d2f7f4a10c885c6","type":"PkgFile","z":"bd2901f55cfc55ef","name":"FlowCompare.html","filename":"nodes/flowcompare.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n  \n    function escapeHtml(string) {\n      return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n        return entityMap[s];\n      });\n    }\n\n    function loadScript(url, callback) {\n          var script = document.createElement(\"script\")\n          script.type = \"text/javascript\";\n\n          if (script.readyState) {  // only required for IE <9\n              script.onreadystatechange = function () {\n                  if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                      script.onreadystatechange = null;\n                      if (callback) { callback(); }\n                  }\n              };\n          } else {  //Others\n              script.onload = function () {\n                  if (callback) { callback(); }\n              };\n          }\n\n          script.src = url;\n          document.getElementsByTagName(\"head\")[0].appendChild(script);\n      };\n\n    var entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    };\n\n    var descMap = {\n      'z': \"Flow Tab Id\",\n      'g': \"Group Id\",\n      'd': \"Disabled\",\n    };\n\n    function attrDesc(nme) {\n      return descMap[nme] ? \" <i style='font-size: 80%;'>(\" + descMap[nme] + \")</i>\" : \"\";\n    }\n\n    function createDiff(ndeV1, ndeV2) {\n      var diffDetails = [];\n      var changedAttrs = [];\n\n      Object.keys(ndeV2).forEach(function (nme) {\n        if ( Object.keys(ndeV1).indexOf(nme) < 0 ) {\n          var txt = typeof ndeV2[nme] == \"object\" ? JSON.stringify(ndeV2[nme]) : ndeV2[nme];\n          diffDetails.push(\"<tr class='dv-removed'><th>\" + nme + attrDesc(nme) + \"</th><td><i>MISSING</i></td><td><code>\" + escapeHtml(txt) + \"</code></td></tr>\")\n          changedAttrs.push(nme)\n        }\n      });\n\n      Object.keys(ndeV1).forEach(function (nme) {\n        if (Object.keys(ndeV2).indexOf(nme) < 0) {\n          var txt = typeof ndeV1[nme] == \"object\" ? JSON.stringify(ndeV1[nme]) : ndeV1[nme];\n          diffDetails.push(\"<tr class='dv-added'><th>\" + nme + attrDesc(nme) + \"</th><td><code>\" + escapeHtml(txt) +\"</code></td><td><i>ADDED</i></td></tr>\")\n          changedAttrs.push(nme)\n        }\n      });\n\n      Object.keys(ndeV1).forEach(function (nme) {\n        if (Object.keys(ndeV2).indexOf(nme) > -1) {\n          if ( JSON.stringify(ndeV1[nme]) !== JSON.stringify(ndeV2[nme]) ) {\n            let span = null;\n            let diff = undefined;\n            changedAttrs.push(nme)\n\n            try {\n              diff = Diff.diffLines(ndeV2[nme], ndeV1[nme])\n            } catch (e) {\n              diff = Diff.diffLines(JSON.stringify(ndeV2[nme],undefined,1), JSON.stringify(ndeV1[nme],undefined,1))\n            }\n            const fragment = document.createDocumentFragment();\n\n            diff.forEach((part) => {\n              // green for additions, red for deletions\n              const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n              span = document.createElement('pre');\n              span.setAttribute('class','dv-pre-elem');\n              span.style.color = color;\n              span.appendChild(document.createTextNode(part.value));\n              span.appendChild(document.createElement('br'));\n              fragment.appendChild(span);\n            });\n\n            var row = document.createElement('tr');\n            row.setAttribute('class',\"dv-differ\")\n            var cell = document.createElement('th')\n            cell.appendChild(document.createTextNode(nme))\n            if (descMap[nme]) {\n              var itl = document.createElement('i');\n              itl.style[\"font-size\"] = \"80%\"\n              itl.appendChild(document.createTextNode(\"(\" + descMap[nme]+\")\"))\n              cell.appendChild(itl)\n            }\n            row.append(cell);\n\n            cell = document.createElement('td')\n            cell.setAttribute('colspan', '2')\n            cell.append( fragment)\n\n            row.append(cell)\n            diffDetails.push(row.outerHTML)\n          } else {\n            diffDetails.push(\"<tr><th>\" + nme + \"</th><td><code>\" + escapeHtml(ndeV1[nme]) + \"</code></td><td><code>\" + escapeHtml(ndeV2[nme]) + \"</code></td></tr>\")\n          }\n        }\n      });\n      \n      /* \n       * strange happenings, the server says that these two nodes differ but \n       * there are zero changed attributes ... hm  ... so do a diff over the\n       * entire nodes.\n       */\n      if ( changedAttrs.length == 0 ) {\n          let span = null;\n          let nme = \"OBJ\"\n          // let diff = Diff.diffChars(JSON.stringify(ndeV2,undefined,1), JSON.stringify(ndeV1,undefined,1))\n          let diff = Diff.diffJson(ndeV2, ndeV1)\n\n          const fragment = document.createDocumentFragment();\n\n          diff.forEach((part) => {\n            // green for additions, red for deletions\n            const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n            span = document.createElement('pre');\n            span.setAttribute('class','dv-pre-elem');\n            span.style.color = color;\n            span.appendChild(document.createTextNode(part.value));\n            span.appendChild(document.createElement('br'));\n            fragment.appendChild(span);\n          });\n\n          var row = document.createElement('tr');\n          row.setAttribute('class',\"dv-differ\")\n          var cell = document.createElement('th')\n          cell.appendChild(document.createTextNode(nme))\n          if (descMap[nme]) {\n            var itl = document.createElement('i');\n            itl.style[\"font-size\"] = \"80%\"\n            itl.appendChild(document.createTextNode(\"(\" + descMap[nme]+\")\"))\n            cell.appendChild(itl)\n          }\n          row.append(cell);\n\n          cell = document.createElement('td')\n          cell.setAttribute('colspan', '2')\n          cell.append( fragment)\n\n          row.append(cell)\n\n          return {\n            html: row.outerHTML,\n            icon: \"fa-question\"\n          }\n      }\n\n      return { \n        html: diffDetails.join(\"\"),\n        icon: changedAttrs.filter( d => d != 'x' && d != 'w' && d != 'y' && d != 'h').length == 0 ? \"fa-eye\" : \"fa-pencil\"\n      }\n    }\n\n\n    function getFlowDataFromCurrentWorkspace() {\n      /******\n       ** Code taken from Node-RED code base:\n       **\n       ** https://github.com/node-red/node-red/blob/e8ddee24a9944e57d186f02b081295c56a45b67c/packages/node_modules/%40node-red/editor-client/src/js/ui/clipboard.js#L710-L723\n       **\n       **/\n      var activeWorkspace = RED.workspaces.active();\n      var nodes = RED.nodes.groups(activeWorkspace);\n\n      nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n      nodes = nodes.concat(RED.nodes.filterNodes({z:activeWorkspace}));\n\n      RED.nodes.eachConfig(function(n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n          // Grab any config nodes scoped to this flow that don't\n          // require any flow-nodes to use them\n          nodes.push(n);\n        }\n      });\n\n      var parentNode = RED.nodes.workspace(\n        activeWorkspace\n      ) || RED.nodes.subflow(activeWorkspace);\n\n      nodes.unshift(parentNode);\n\n      return RED.nodes.createExportableNodeSet(nodes);\n    }\n\n    function iframeHasBeenLoaded(elem) {\n      var nodes = getFlowDataFromCurrentWorkspace();\n\n      setTimeout( () => {\n        elem.contentWindow.postMessage({\n          nodes:  nodes, \n          msg:    \"renderlocalflow\",\n          flowid: nodes[0].id\n        }, \"*\")\n      }, 345);\n    }\n    window.iframeHasBeenLoaded = iframeHasBeenLoaded;\n    \n    function doSubmission(node, flowdata) {\n\n      var activeWorkspace = RED.workspaces.active();\n      \n      RED.notify(\"Flow Comparison Triggered\", {\n          type: \"warning\",\n          id: \"FlowCompare\",\n          timeout: 2000\n      });\n\n      $.ajax({\n        url:         \"FlowCompare/\" + node.id,\n        type:        \"POST\",\n        contentType: \"application/json; charset=utf-8\",\n\n        data: JSON.stringify({\n          flowid:         activeWorkspace,\n          flowdata:       flowdata||{},\n          flowlabel:      RED.nodes.workspace(activeWorkspace).label,\n        }),\n\n        success: function (resp) {\n          var items = [];\n          var nodeItemMap = {};\n\n\n          console.log( resp.nodes )\n          console.log( flowdata )\n\n\n          \n          if ( resp.status == \"failed\") {\n            $('#node-input-flowcompare-target-container-div').html(\"This does not seem to work: \" + activeWorkspace) \n            return;\n          }\n\n          resp.changes.forEach( function (nde) {\n            var nId = nde.id;\n\n            if ( nde.type == \"deleted\") {\n              nodeItemMap[nId] = {\n                label:    nde.oldObj.name || nde.oldObj.type,\n                icon:     \"fa fa-times\",\n                class:    \"\",\n                diffcontent: createDiff({}, nde.oldObj).html,\n                sublabel: nde.oldObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            if ( nde.type == \"added\") {\n              nodeItemMap[nId] = {\n                objid:    nId,\n                label:    nde.newObj.name || nde.newObj.type,\n                icon:     \"fa fa-check\",\n                class:    \"\",\n                diffcontent: createDiff(nde.newObj, {}).html,\n                sublabel: nde.newObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            if ( nde.oldObj.type == \"tab\" || nde.oldObj.type == \"group\" || nde.oldObj.type == \"junction\" ) {\n              var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n              nodeItemMap[nId] = {\n                objid:    nId,\n                label:    nde.oldObj.name || nde.oldObj.type,\n                icon:     \"fa \" + diffContent.icon,\n                class:    \"\",\n                diffcontent: diffContent.html,\n                sublabel: nde.type + \" - \" + nde.oldObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            /* \n             * Pass this point only nodes, no groups, tabs or junctions\n             */\n            var n = RED.nodes.node(nId);\n            if ( !n ) {\n              console.log( \"Node not found\", nde)\n            }\n            \n            var nodeDef = RED.nodes.getType(n.type);\n            var label;\n\n            if (nodeDef) {\n              var l = nodeDef.label;\n              label = (typeof l === \"function\" ? l.call(n) : l)||\"\";\n            }\n\n            if (!nodeDef || !label) {\n              label = n.type;\n            }\n\n            var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n            nodeItemMap[n.id] = {\n              node:     n,\n              objid:    nId,\n              label:    label,\n              icon:     \"fa \" + diffContent.icon,\n              class:    \"\",\n              diffcontent: diffContent.html,\n              sublabel: nde.oldObj.type,\n              selected: false,\n              checkbox: false,\n              children: undefined\n            };\n\n            items.push(nodeItemMap[n.id]);\n          });\n\n          if ( resp.ifurl ) {\n            $('#node-input-flowcompare-svgcontainer').html(\n                '<iframe width=\"100%\" height=\"100%\" src=\"' + resp.ifurl  + '\" onload=\"window.iframeHasBeenLoaded(this)\" style=\"border: none; min-height: 300px;\"></iframe>'\n              )\n          }\n          \n          if ( items.length == 0 ) {\n            $('#node-input-flowcompare-target-container-div').html(\"No changes\")\n          } else {\n            node.dirList.treeList('empty');\n            node.dirList.treeList('data',items.sort( (a,b) => a.icon > b.icon ));\n          }\n        },\n\n        error: function (jqXHR, textStatus, errorThrown) {\n          if (jqXHR.status == 404) {\n            RED.notify(\"Node has not yet been deployed, please deploy.\", \"error\");\n          } else if (jqXHR.status == 405) {\n            RED.notify(\"Not Allowed.\", \"error\");\n          } else if (jqXHR.status == 500) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"inject.errors.failed\")\n            }), \"error\");\n          } else if (jqXHR.status == 0) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.no-response\")\n            }), \"error\");\n          } else {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.unexpected\", {\n                status: jqXHR.status, message: textStatus }) }), \"error\");\n          }\n        }\n      });\n    }\n  \n  RED.nodes.registerType('FlowCompare',{\n    color: '#FDF0C2',\n    icon: \"font-awesome/fa-map\",\n    category: 'introspection',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    inputs: 0,\n\n    outputs: 1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n      loadScript(\"https://cdn.openmindmap.org/thirdparty/diff.min.js\")\n      loadScript(\"https://cdn.openmindmap.org/embed/flowviewer.js\")\n    },\n\n    oneditprepare: function() {\n      var that = this;\n      \n      $('#node-input-compare-flow-but').on('click', (e) => {\n          e.preventDefault();\n          doSubmission( that, getFlowDataFromCurrentWorkspace() )\n      })\n\n      this._resize = function() {\n          var rows = $(\"#dialog-form>div:not(.node-input-target-list-row)\");\n          var height = $(\"#dialog-form\").height();\n          for (var i=0;i<rows.length;i++) {\n            height -= $(rows[i]).outerHeight(true);\n          }\n          var editorRow = $(\"#dialog-form>div.node-input-target-list-row\");\n          editorRow.css(\"height\",height+\"px\");\n        };\n\n        that.dirList = $(\"#node-input-flowcompare-target-container-div\").css({\n          width: \"100%\",\n          height: \"200px\"\n        }).treeList(\n          {\n            multi:false\n          }\n        ).on(\"treelistitemmouseover\", function(e, item) {\n          if ( item.objid) {\n            RED.view.reveal(item.objid,true)\n            RED.view.redraw()\n          }\n        }).on(\"treelistitemmouseout\", function(e, item) {\n        }).on('treelistselect', function(event, item) {\n          if ( item.diffcontent ) {\n            $('#node-input-flowcompare-diffcontainer').html(item.diffcontent)\n          } else {\n            $('#node-input-flowcompare-diffcontainer').html(\"\")\n          }\n        });\n\n        var search = $(\"#node-input-flowcompare-target-filter\").searchBox({\n          style: \"compact\",\n          delay: 300,\n          change: function() {\n            var val = $(this).val().trim().toLowerCase();\n            if (val === \"\") {\n              that.dirList.treeList(\"filter\", null);\n              search.searchBox(\"count\",\"\");\n            } else {\n              var count = that.dirList.treeList(\"filter\", function(item) {\n                return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1\n              });\n              search.searchBox(\"count\",count+\" / \"+items.length);\n            }\n          }\n        });\n\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    onpaletteremove: function() {\n    },\n\n  });\n})();\n</script>\n\n<style>\n  .diff-viewer {\n    overflow: scroll;\n    background-color: rgb(244, 244, 244);\n    border: 1px solid rgb(196, 196, 196);\n    height: 80vh;\n    padding: 20px;\n    max-width: 90vw;\n    border-radius: 5px;\n  }\n\n  .dv-differ {\n    background-color: rgba(244, 170, 23, 0.476) !important;\n  }\n\n  .dv-removed {\n    background-color: rgb(203, 203, 38) !important;\n  }\n\n  .dv-added {\n    background-color: rgb(86, 222, 120) !important;\n  }\n\n  .dv-pre-elem {\n    page-break-inside: avoid;\n    font-family: monospace;\n    max-width: 100%;\n    overflow: auto;\n    display: block;\n    word-wrap: break-word;\n    margin: 0px !important;\n  }\n</style>\n\n<script type=\"text/html\" data-template-name=\"FlowCompare\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>\n    </div>\n\n  \n  <div class=\"form-row\">\n    <button id=\"node-input-compare-flow-but\"\n                class=\"red-ui-button\">Compare Local to Server Flow</button>\n  </div>\n  \n  <div class=\"form-row\">\n    <a id=\"flowcompare-view-flow-link\" style=\"color: blue; display: none;\" target=\"_blank\" href=\"\">View Flow\n      <i class=\"fa fa-external-link\"></i></a>\n  </div>\n  \n  <div class=\"form-row node-input-target-row node-input-target-list-row\" style=\"position: relative; min-height: 100px\">\n    <div style=\"position: absolute; top: -30px; right: 0;\">\n      <input type=\"text\" id=\"node-input-flowcompare-target-filter\">\n    </div>\n  \n    <div id=\"node-input-flowcompare-target-container-div\" style=\"min-height: 100px\"></div>\n  </div>\n  \n  <div class=\"form-row\" style=\"position: relative; min-height: 300px\">\n    <div id=\"node-input-flowcompare-svgcontainer\"></div>\n  </div>\n  \n  <div class=\"form-row\" style=\"position: relative; min-height: 100px\">\n    <div id=\"node-input-flowcompare-diffcontainer\" class=\"diff-viewer\"></div>\n  </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"FlowCompare\">\n  <p>Visually compare local flow with flow deployed on the server.</p>\n  Viusal comparison of flows being edited and flow that has been deployed.\n</script>\n","output":"str","x":1027,"y":522,"wires":[["f5e06b7b8845273b"]]},{"id":"11df648c323fad7f","type":"PkgFile","z":"bd2901f55cfc55ef","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1025,"y":315,"wires":[["5e07b487440ed202"]]},{"id":"5e07b487440ed202","type":"PkgFile","z":"bd2901f55cfc55ef","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# FlowCompare\n\nFlowCompare node is a node for visually comparing the local flow with the flow that is deployed on the server.\n\n","output":"str","x":1025,"y":365,"wires":[["ca4f782ee0146ce6"]]},{"id":"ca4f782ee0146ce6","type":"PkgFile","z":"bd2901f55cfc55ef","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"keywords\": [\n    \"node-red\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}#readme\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"Gerrit Riessen <gerrit@openmindmap.org>\",\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n       \"flowcompare\": \"nodes/flowcompare.js\"\n    }\n  },\n\n  \"description\": \"Description of what these nodes do.\",\n  \"repository\": {\n    \"type\": \"github\",\n    \"url\": \"git+https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":1025,"y":415,"wires":[["f85686511082a34a"]]},{"id":"32aba161ccb9b03c","type":"FlowHubPull","z":"bd2901f55cfc55ef","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":400.5,"y":316,"wires":[[]]},{"id":"f5e06b7b8845273b","type":"link out","z":"bd2901f55cfc55ef","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":1459.5,"y":311,"wires":[]},{"id":"e84a7575ab0a6bee","type":"PkgFile","z":"bd2901f55cfc55ef","name":"92-flowhub-diff.html","filename":"nodes/92-flowhub-diff.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n  (function(){\n\n    function escapeHtml(string) {\n      return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n        return entityMap[s];\n      });\n    }\n\n    function loadScript(url, callback) {\n          var script = document.createElement(\"script\")\n          script.type = \"text/javascript\";\n\n          if (script.readyState) {  // only required for IE <9\n              script.onreadystatechange = function () {\n                  if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                      script.onreadystatechange = null;\n                      if (callback) { callback(); }\n                  }\n              };\n          } else {  //Others\n              script.onload = function () {\n                  if (callback) { callback(); }\n              };\n          }\n\n          script.src = url;\n          document.getElementsByTagName(\"head\")[0].appendChild(script);\n      };\n\n    var entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    };\n\n    var descMap = {\n      'z': \"Flow Tab Id\",\n      'g': \"Group Id\",\n      'd': \"Disabled\",\n    };\n\n    function attrDesc(nme) {\n      return descMap[nme] ? \" <i style='font-size: 80%;'>(\" + descMap[nme] + \")</i>\" : \"\";\n    }\n\n    function createDiff(ndeV1, ndeV2) {\n      var diffDetails = [];\n      var changedAttrs = [];\n\n      Object.keys(ndeV2).forEach(function (nme) {\n        if ( Object.keys(ndeV1).indexOf(nme) < 0 ) {\n          var txt = typeof ndeV2[nme] == \"object\" ? JSON.stringify(ndeV2[nme]) : ndeV2[nme];\n          diffDetails.push(\"<tr class='dv-removed'><th>\" + nme + attrDesc(nme) + \"</th><td><i>MISSING</i></td><td><code>\" + escapeHtml(txt) + \"</code></td></tr>\")\n          changedAttrs.push(nme)\n        }\n      });\n\n      Object.keys(ndeV1).forEach(function (nme) {\n        if (Object.keys(ndeV2).indexOf(nme) < 0) {\n          var txt = typeof ndeV1[nme] == \"object\" ? JSON.stringify(ndeV1[nme]) : ndeV1[nme];\n          diffDetails.push(\"<tr class='dv-added'><th>\" + nme + attrDesc(nme) + \"</th><td><code>\" + escapeHtml(txt) +\"</code></td><td><i>ADDED</i></td></tr>\")\n          changedAttrs.push(nme)\n        }\n      });\n\n      Object.keys(ndeV1).forEach(function (nme) {\n        if (Object.keys(ndeV2).indexOf(nme) > -1) {\n          if ( JSON.stringify(ndeV1[nme]) !== JSON.stringify(ndeV2[nme]) ) {\n            let span = null;\n            let diff = undefined;\n            changedAttrs.push(nme)\n\n            try {\n              diff = Diff.diffLines(ndeV2[nme], ndeV1[nme])\n            } catch (e) {\n              diff = Diff.diffLines(JSON.stringify(ndeV2[nme],undefined,1), JSON.stringify(ndeV1[nme],undefined,1))\n            }\n            const fragment = document.createDocumentFragment();\n\n            diff.forEach((part) => {\n              // green for additions, red for deletions\n              const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n              span = document.createElement('pre');\n              span.setAttribute('class','dv-pre-elem');\n              span.style.color = color;\n              span.appendChild(document.createTextNode(part.value));\n              span.appendChild(document.createElement('br'));\n              fragment.appendChild(span);\n            });\n\n            var row = document.createElement('tr');\n            row.setAttribute('class',\"dv-differ\")\n            var cell = document.createElement('th')\n            cell.appendChild(document.createTextNode(nme))\n            if (descMap[nme]) {\n              var itl = document.createElement('i');\n              itl.style[\"font-size\"] = \"80%\"\n              itl.appendChild(document.createTextNode(\"(\" + descMap[nme]+\")\"))\n              cell.appendChild(itl)\n            }\n            row.append(cell);\n\n            cell = document.createElement('td')\n            cell.setAttribute('colspan', '2')\n            cell.append( fragment)\n\n            row.append(cell)\n            diffDetails.push(row.outerHTML)\n          } else {\n            diffDetails.push(\"<tr><th>\" + nme + \"</th><td><code>\" + escapeHtml(ndeV1[nme]) + \"</code></td><td><code>\" + escapeHtml(ndeV2[nme]) + \"</code></td></tr>\")\n          }\n        }\n      });\n      \n      /* \n       * strange happenings, the server says that these two nodes differ but \n       * there are zero changed attributes ... hm  ... so do a diff over the\n       * entire nodes.\n       */\n      if ( changedAttrs.length == 0 ) {\n          let span = null;\n          let nme = \"OBJ\"\n          // let diff = Diff.diffChars(JSON.stringify(ndeV2,undefined,1), JSON.stringify(ndeV1,undefined,1))\n          let diff = Diff.diffJson(ndeV2, ndeV1)\n\n          const fragment = document.createDocumentFragment();\n\n          diff.forEach((part) => {\n            // green for additions, red for deletions\n            const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n            span = document.createElement('pre');\n            span.setAttribute('class','dv-pre-elem');\n            span.style.color = color;\n            span.appendChild(document.createTextNode(part.value));\n            span.appendChild(document.createElement('br'));\n            fragment.appendChild(span);\n          });\n\n          var row = document.createElement('tr');\n          row.setAttribute('class',\"dv-differ\")\n          var cell = document.createElement('th')\n          cell.appendChild(document.createTextNode(nme))\n          if (descMap[nme]) {\n            var itl = document.createElement('i');\n            itl.style[\"font-size\"] = \"80%\"\n            itl.appendChild(document.createTextNode(\"(\" + descMap[nme]+\")\"))\n            cell.appendChild(itl)\n          }\n          row.append(cell);\n\n          cell = document.createElement('td')\n          cell.setAttribute('colspan', '2')\n          cell.append( fragment)\n\n          row.append(cell)\n\n          return {\n            html: row.outerHTML,\n            icon: \"fa-question\"\n          }\n      }\n\n      return { \n        html: diffDetails.join(\"\"),\n        icon: changedAttrs.filter( d => d != 'x' && d != 'w' && d != 'y' && d != 'h').length == 0 ? \"fa-eye\" : \"fa-pencil\"\n      }\n    }\n\n\n    function getFlowDataFromCurrentWorkspace() {\n      /******\n       ** Code taken from Node-RED code base:\n       **\n       ** https://github.com/node-red/node-red/blob/e8ddee24a9944e57d186f02b081295c56a45b67c/packages/node_modules/%40node-red/editor-client/src/js/ui/clipboard.js#L710-L723\n       **\n       **/\n      var activeWorkspace = RED.workspaces.active();\n      var nodes = RED.nodes.groups(activeWorkspace);\n\n      nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n      nodes = nodes.concat(RED.nodes.filterNodes({z:activeWorkspace}));\n\n      RED.nodes.eachConfig(function(n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n          // Grab any config nodes scoped to this flow that don't\n          // require any flow-nodes to use them\n          nodes.push(n);\n        }\n      });\n\n      var parentNode = RED.nodes.workspace(\n        activeWorkspace\n      ) || RED.nodes.subflow(activeWorkspace);\n\n      nodes.unshift(parentNode);\n\n      return RED.nodes.createExportableNodeSet(nodes);\n    }\n\n    function iframeHasBeenLoaded(elem) {\n      var nodes = getFlowDataFromCurrentWorkspace();\n\n      setTimeout( () => {\n        elem.contentWindow.postMessage({\n          nodes:  nodes, \n          msg:    \"renderlocalflow\",\n          flowid: nodes[0].id\n        }, \"*\")\n      }, 345);\n    }\n    window.iframeHasBeenLoaded = iframeHasBeenLoaded;\n    \n    function doSubmission(node, flowdata) {\n\n      var activeWorkspace = RED.workspaces.active();\n      \n      RED.notify(\"Flow Comparison Triggered\", {\n          type: \"warning\",\n          id: \"FlowHubDiff\",\n          timeout: 2000\n      });\n\n      $.ajax({\n        url:         \"FlowHubDiff/\" + node.id,\n        type:        \"POST\",\n        contentType: \"application/json; charset=utf-8\",\n\n        data: JSON.stringify({\n          flowid:         activeWorkspace,\n          flowhub:        \"submission from \" + node.id,\n          flowdata:       flowdata||{},\n          flowlabel:      RED.nodes.workspace(activeWorkspace).label,\n          incflowhubpull: $(\"#node-input-incflowhubpull\").is(\":checked\")\n        }),\n\n        success: function (resp) {\n          var items = [];\n          var nodeItemMap = {};\n\n          if ( resp.status == \"failed\") {\n            $('#node-input-flowhubdiff-target-container-div').html(\"This does not seem to be a FlowHub flow id: \" + activeWorkspace) \n            return;\n          }\n\n          resp.changes.forEach( function (nde) {\n            var nId = nde.id;\n\n            if ( nde.type == \"deleted\") {\n              nodeItemMap[nId] = {\n                label:    nde.oldObj.name || nde.oldObj.type,\n                icon:     \"fa fa-times\",\n                class:    \"\",\n                diffcontent: createDiff({}, nde.oldObj).html,\n                sublabel: nde.oldObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            if ( nde.type == \"added\") {\n              nodeItemMap[nId] = {\n                objid:    nId,\n                label:    nde.newObj.name || nde.newObj.type,\n                icon:     \"fa fa-check\",\n                class:    \"\",\n                diffcontent: createDiff(nde.newObj, {}).html,\n                sublabel: nde.newObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            if ( nde.oldObj.type == \"tab\" || nde.oldObj.type == \"group\" || nde.oldObj.type == \"junction\" ) {\n              var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n              nodeItemMap[nId] = {\n                objid:    nId,\n                label:    nde.oldObj.name || nde.oldObj.type,\n                icon:     \"fa \" + diffContent.icon,\n                class:    \"\",\n                diffcontent: diffContent.html,\n                sublabel: nde.type + \" - \" + nde.oldObj.type,\n                selected: false,\n                checkbox: false,\n                children: undefined\n              };\n\n              items.push(nodeItemMap[nId]);\n              return;\n            }\n\n            /* \n             * Pass this point only nodes, no groups, tabs or junctions\n             */\n            var n = RED.nodes.node(nId);\n            if ( !n ) {\n              console.log( \"Node not found\", nde)\n            }\n            \n            var nodeDef = RED.nodes.getType(n.type);\n            var label;\n\n            if (nodeDef) {\n              var l = nodeDef.label;\n              label = (typeof l === \"function\" ? l.call(n) : l)||\"\";\n            }\n\n            if (!nodeDef || !label) {\n              label = n.type;\n            }\n\n            var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n            nodeItemMap[n.id] = {\n              node:     n,\n              objid:    nId,\n              label:    label,\n              icon:     \"fa \" + diffContent.icon,\n              class:    \"\",\n              diffcontent: diffContent.html,\n              sublabel: nde.oldObj.type,\n              selected: false,\n              checkbox: false,\n              children: undefined\n            };\n\n            items.push(nodeItemMap[n.id]);\n          });\n\n          if ( resp.ifurl ) {\n            $('#node-input-flowhubdiff-svgcontainer').html(\n                '<iframe width=\"100%\" height=\"100%\" src=\"' + resp.ifurl  + '\" onload=\"window.iframeHasBeenLoaded(this)\" style=\"border: none; min-height: 300px;\"></iframe>'\n              )\n          }\n          \n          if ( items.length == 0 ) {\n            $('#node-input-flowhubdiff-target-container-div').html(\"No changes\")\n          } else {\n            node.dirList.treeList('empty');\n            node.dirList.treeList('data',items.sort( (a,b) => a.icon > b.icon ));\n          }\n        },\n\n        error: function (jqXHR, textStatus, errorThrown) {\n          if (jqXHR.status == 404) {\n            RED.notify(\"Node has not yet been deployed, please deploy.\", \"error\");\n          } else if (jqXHR.status == 405) {\n            RED.notify(\"Not Allowed.\", \"error\");\n          } else if (jqXHR.status == 500) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"inject.errors.failed\")\n            }), \"error\");\n          } else if (jqXHR.status == 0) {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.no-response\")\n            }), \"error\");\n          } else {\n            RED.notify(node._(\"common.notification.error\", {\n              message: node._(\"common.notification.errors.unexpected\", {\n                status: jqXHR.status, message: textStatus }) }), \"error\");\n          }\n        }\n      });\n    }\n\n    RED.nodes.registerType('FlowHubDiff',{\n      color: '#44eeff',\n      icon: \"flowhubdiff.svg\",\n      category: 'flowhub',\n      defaults: {\n        name: { value: \"\" },\n        incflowhubpull: { value: false },\n      },\n\n      inputs: 0,\n      outputs: 0,\n\n      label: function() {\n        return (this.name || this._def.paletteLabel);\n      },\n\n      onpaletteadd: () => {\n        loadScript(\"https://cdn.openmindmap.org/thirdparty/diff.min.js\")        \n      },\n\n      oneditprepare: function() {\n        var that = this;\n\n        $('#node-input-push-flow-but').on('click', (e) => {\n          e.preventDefault();\n          doSubmission( that, getFlowDataFromCurrentWorkspace() )\n        })\n\n        this._resize = function() {\n          var rows = $(\"#dialog-form>div:not(.node-input-target-list-row)\");\n          var height = $(\"#dialog-form\").height();\n          for (var i=0;i<rows.length;i++) {\n            height -= $(rows[i]).outerHeight(true);\n          }\n          var editorRow = $(\"#dialog-form>div.node-input-target-list-row\");\n          editorRow.css(\"height\",height+\"px\");\n        };\n\n        that.dirList = $(\"#node-input-flowhubdiff-target-container-div\").css({\n          width: \"100%\",\n          height: \"200px\"\n        }).treeList(\n          {\n            multi:false\n          }\n        ).on(\"treelistitemmouseover\", function(e, item) {\n          if ( item.objid) {\n            RED.view.reveal(item.objid,true)\n            RED.view.redraw()\n          }\n        }).on(\"treelistitemmouseout\", function(e, item) {\n        }).on('treelistselect', function(event, item) {\n          if ( item.diffcontent ) {\n            $('#node-input-flowhubdiff-diffcontainer').html(item.diffcontent)\n          } else {\n            $('#node-input-flowhubdiff-diffcontainer').html(\"\")\n          }\n        });\n\n        var search = $(\"#node-input-flowhubdiff-target-filter\").searchBox({\n          style: \"compact\",\n          delay: 300,\n          change: function() {\n            var val = $(this).val().trim().toLowerCase();\n            if (val === \"\") {\n              that.dirList.treeList(\"filter\", null);\n              search.searchBox(\"count\",\"\");\n            } else {\n              var count = that.dirList.treeList(\"filter\", function(item) {\n                return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1\n              });\n              search.searchBox(\"count\",count+\" / \"+items.length);\n            }\n          }\n        });\n      },\n\n      oneditcancel: function() {\n      },\n\n      oneditsave: function() {\n      },\n\n      labelStyle: function() {\n        return this.name?\"node_label_italic\":\"\";\n      },\n    });\n  })();\n</script>\n\n<style>\n.diff-viewer{\n  overflow:scroll;\n  background-color:rgb(244, 244, 244);\n  border: 1px solid rgb(196,196,196);\n  height:80vh;\n  padding: 20px;\n  max-width: 90vw;\n  border-radius: 5px;\n}\n\n.dv-differ {\n  background-color: rgba(244, 170, 23, 0.476) !important;\n}\n\n.dv-removed {\n  background-color: rgb(203, 203, 38) !important;\n}\n\n.dv-added {\n  background-color: rgb(86, 222, 120) !important;\n}\n\n.dv-pre-elem {\n    page-break-inside: avoid;\n    font-family: monospace;\n    max-width: 100%;\n    overflow: auto;\n    display: block;\n    word-wrap: break-word;\n    margin: 0px !important;\n}\n</style>\n\n<script type=\"text/html\" data-template-name=\"FlowHubDiff\">\n  <div class=\"form-row\">\n    <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"common.label.name\">Name</span></label>\n    <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n  </div>\n\n\n  <div class=\"form-row\">\n    <label for=\"node-input-incflowhubpull\" style=\"min-width: 200px;\">\n              <span>Include FlowHubPull nodes?</span>\n    </label>\n    <input type=\"checkbox\" id=\"node-input-incflowhubpull\" style=\"display:inline-block; width:15px; vertical-align:baseline;\">\n  </div>\n\n  <div class=\"form-row\">\n      <button id=\"node-input-push-flow-but\"\n              class=\"red-ui-button\">Compare Local to Remote Flow</button>\n  </div>\n\n  <div class=\"form-row\">\n      <a id=\"flowhubdiff-view-flow-link\" style=\"color: blue; display: none;\" target=\"_blank\" href=\"\">View Flow <i class=\"fa fa-external-link\"></i></a>\n  </div>\n\n  <div class=\"form-row node-input-target-row node-input-target-list-row\" style=\"position: relative; min-height: 100px\">\n    <div style=\"position: absolute; top: -30px; right: 0;\">\n      <input type=\"text\" id=\"node-input-flowhubdiff-target-filter\">\n    </div>\n  \n    <div id=\"node-input-flowhubdiff-target-container-div\" style=\"min-height: 100px\"></div>\n  </div>\n\n  <div class=\"form-row\" style=\"position: relative; min-height: 300px\">\n    <div id=\"node-input-flowhubdiff-svgcontainer\"></div>\n  </div>\n  \n    <div class=\"form-row\" style=\"position: relative; min-height: 100px\">\n      <div id=\"node-input-flowhubdiff-diffcontainer\" class=\"diff-viewer\"></div>\n    </div>\n</script>\n\n<script type=\"text/html\" data-help-name=\"FlowHubDiff\">\n<p>Compare the local version of a flow with the latest version at FlowHub.org</p>\nThis node can be used to compare flows that have been modified locally with those stored on FlowHub. Difference are highlighted in the property panel. Nodes marked with <i class=\"fa fa-eye\"></i> are changes that are only visual, changes marked with a <i class=\"fa fa-pencil\"></i> have textual changes.\n</script>\n","output":"str","x":1269,"y":688,"wires":[[]]}]