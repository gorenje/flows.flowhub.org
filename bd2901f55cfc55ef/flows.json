[{"id":"bd2901f55cfc55ef","type":"tab","label":"[NodeDev] FlowCompare","disabled":false,"info":"::: aim\n\nCreate a node that visually compares the server flow with the editor flow.\n\n:::\n\n### Description\n\nThis is the source ~~code~~ flow for the [flow compare node](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flowcompare) package. This flow maintains the NPMjs and GitHub repos.\n\nWhen placed in the workspace and having been deployed, open the property panel shows the following:\n\n![img](https://cdn.openmindmap.org/content/1696944958539_flowcompare.gif)\n\nClicking the button give generates the comparison details.\n\n### Update comparison on flow tab change\n\nTo update the flow comparison on tab change, install this [frontend flow](https://flowhub.org/f/7750f7bbea836e0e).\n\n### Artifacts\n\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow-compare)\n- [Flow maintaning code](https://flowhub.org/f/bd2901f55cfc55ef)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flowcompare)\n- [Node-RED package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flowcompare)\n\n","env":[]},{"id":"18b11be93735f129","type":"group","z":"bd2901f55cfc55ef","name":"Step 1: Import flow for local development","style":{"label":true},"nodes":["32aba161ccb9b03c"],"x":69.5,"y":289,"w":472,"h":82},{"id":"c61fba5baa3cf3a6","type":"group","z":"bd2901f55cfc55ef","name":"Step 2: Instal locally for testing","style":{"label":true},"nodes":["c462f8aed0fad6e1"],"x":831.5,"y":180,"w":212,"h":82},{"id":"c8da4e474e49c407","type":"group","z":"bd2901f55cfc55ef","name":"Node Factory for creating template node","style":{"label":true},"nodes":["7e645fab96ebceb1"],"x":70.5,"y":394,"w":292,"h":82},{"id":"c462f8aed0fad6e1","type":"NodeDevOps","z":"bd2901f55cfc55ef","g":"c61fba5baa3cf3a6","name":"","pname":"@gregoriusrippenstein/node-red-contrib-flowcompare","pversion":"0.1.0","pauthorname":"Gerrit Riessen","pauthoremail":"gerrit@openmindmap.com","pdescription":"Compare editor flow with the flow deployed to the server.","noderedinstall":true,"randompackagename":false,"ignore_package_check":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-flow-compare","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"version bump to 0.1.0","npmpublish":false,"npmunpublish":false,"npmotp":"111999","x":947.5,"y":221,"wires":[["11df648c323fad7f"]]},{"id":"7e645fab96ebceb1","type":"NodeFactory","z":"bd2901f55cfc55ef","g":"c8da4e474e49c407","name":"Create: FlowCompare Node","nodename":"FlowCompare","color":"#FDF0C2","hasbutton":false,"hasinput":false,"outputcount":1,"category":"introspection","summary":"Visually compare local flow with flow deployed on the server.","description":"Viusal comparison of flows being edited and flow that has been deployed.","icon":"font-awesome/fa-map","frt2bakcomm":true,"bak2frtcomm":false,"createmanifest":true,"isplugin":true,"x":216.5,"y":435,"wires":[[]]},{"id":"f85686511082a34a","type":"PkgFile","z":"bd2901f55cfc55ef","name":"FlowCompareCfg.js","filename":"nodes/flowcompare.js","format":"javascript","syntax":"mustache","template":"module.exports = function (RED) {\n  function FlowCompareFunctionality(config) {\n    RED.nodes.createNode(this, config);\n\n    var node = this;\n    var cfg = config;\n\n    node.on('close', function () {\n      node.status({});\n    });\n\n    /* msg handler, in this case pass the message on unchanged */\n    node.on(\"input\", function (msg, send, done) {\n      send(msg);\n      done();\n    });\n  }\n\n  RED.nodes.registerType(\"FlowCompareCfg\", FlowCompareFunctionality);\n\n  function compareFlows(msg) {\n    var oldFlowRevision = {};\n    var newFlowRevision = {};\n\n    for (var idx = 0; idx < msg.payload.length; idx++) {\n      oldFlowRevision[msg.payload[idx].id] = msg.payload[idx]\n    }\n\n    for (var idx = 0; idx < msg.new_flowdata.length; idx++) {\n      newFlowRevision[msg.new_flowdata[idx].id] = msg.new_flowdata[idx]\n    }\n\n    var changes = []\n\n    /* nodes that have been deleted */\n    for (var idx = 0; idx < msg.payload.length; idx++) {\n      var oldObj = msg.payload[idx];\n\n      if (!newFlowRevision[oldObj.id]) {\n        changes.push({\n          type: \"deleted\",\n          id: oldObj.id,\n          oldObj: oldObj,\n          newObj: undefined\n        })\n      }\n    }\n\n    for (var idx = 0; idx < msg.new_flowdata.length; idx++) {\n      var newObj = msg.new_flowdata[idx];\n      var oldObj = oldFlowRevision[newObj.id];\n\n      if (!oldObj) {\n        changes.push({\n          type: \"added\",\n          id: newObj.id,\n          oldObj: undefined,\n          newObj: newObj\n        })\n      } else {\n        if (JSON.stringify(oldObj) != JSON.stringify(newObj)) {\n          changes.push({\n            type: \"changed\",\n            id: newObj.id,\n            oldObj: oldObj,\n            newObj: newObj\n          })\n        }\n      }\n    }\n\n    return changes;\n  }\n\n  RED.httpAdmin.post(\"/FlowCompareCfg\",\n    RED.auth.needsPermission(\"FlowCompareCfg.write\"),\n    (req, res) => {\n        try {\n          if (req.body ) {\n            var nodes = [];\n            RED.nodes.eachNode(nde => {\n              if (nde.z == req.body.flowid || nde.id == req.body.flowid) nodes.push(nde)\n            })\n\n            res.status(200).send({\n              \"status\":  \"ok\",\n              \"flowid\":  req.body.flowid,\n              \"nodes\":   nodes,\n              \"changes\": compareFlows({payload: nodes, new_flowdata: req.body.flowdata})\n            })\n          } else {\n            res.sendStatus(404);\n          }\n        } catch (err) {\n          console.error(err);\n          res.status(500).send(err.toString());\n        }\n    });\n}\n","output":"str","x":895,"y":544,"wires":[["b7cb6cf9427a1068"]]},{"id":"11df648c323fad7f","type":"PkgFile","z":"bd2901f55cfc55ef","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":1461,"y":345,"wires":[["5e07b487440ed202"]]},{"id":"5e07b487440ed202","type":"PkgFile","z":"bd2901f55cfc55ef","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# FlowCompare\n\nFlowCompare node is a node for visually comparing the editor flows with flows deployed to the server.\n\nFlows are deployed from the editor to the server, hence they can differ. This node highlights changes that have occurred in the editor.\n\n## Why?\n\nI wanted to have a *visual* comparison between versions of flows. Also I wanted changes to be classified as being either visual or textual: visual changes movements of nodes, textual are content changes. Node-RED does have a diff tool however, for me, this shows too much (all nodes are shown even those that haven't changed) and changes that are visual are shown textually. \n\n## Description\n\nOnce installed, node can be accessed via the menu:\n\n![img](https://cdn.openmindmap.org/content/1697530336854_Screen_Shot_2023-10-17_at_10.12.07.png)\n\nThe panel is split into a list of changes, an image visually showing changes and a detailed change panel at the bottom:\n\n![img](https://cdn.openmindmap.org/content/1696944958539_flowcompare.gif)\n\nClicking the compare button generates the comparison details.\n\n## Iconography\n\nThe top box contains all changes that have happened:\n\n![img](https://cdn.openmindmap.org/content/1696947093993_Screen_Shot_2023-10-10_at_16.01.50.png)\n\n- `pencil` are nodes that have content changes in addition - potentially - to visual changes\n- `eye` are nodes that have *only* visual changes\n- `ticks` are nodes that have been added\n- `cross` are nodes that have been deleted.\n\n## Colourisation\n\nIn the image, nodes are colorised:\n\n- grey/black are deleted nodes\n- green are added nodes\n- green with blue border are moved nodes, nodes that have only changed visually\n- purple nodes have textual, i.e., content changes\n- nodes are highlighted with red-border when change is selected in the change box\n\n![img](https://cdn.openmindmap.org/content/1696946893210_Screen_Shot_2023-10-10_at_16.02.13.png)\n\nThe slider to the left is the server version, to the right its the local version of the flow.\n\nIn the textual diff box:\n\n![img](https://cdn.openmindmap.org/content/1696946912538_Screen_Shot_2023-10-10_at_16.02.04.png)\n\nRed are deletions and green are additions, i.e., changes.\n\n## Not Perfect\n\n1) Image Zoom\n\nZoom of comparison image is not perfect since pinch does not work, only the scroll works for zoom. Since scroll is also used to scroll up and down, scroll left and right to zoom image in and out.\n\n2) Extra JS scripts\n\nThis node will load two JS libraries (when added [to the palette](https://github.com/gorenje/node-red-contrib-flow-compare/blob/4981b85bf29cf5726609d39a0f6e21e8456d72f5/nodes/flowcompare.html#L478-L479)):\n\n- https://cdn.openmindmap.org/thirdparty/diff.min.js\n- https://cdn.openmindmap.org/embed/flowviewer.js\n\n### Artifacts\n\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-flow-compare)\n- [Flow maintaning code](https://flowhub.org/f/bd2901f55cfc55ef)\n- [NPMjs node package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-flowcompare)\n- [Node-RED package](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-flowcompare)\n\n- [Frontend Flow](https://flowhub.org/f/7750f7bbea836e0e) to trigger a comparison update on flow tab change.\n\n\n","output":"str","x":865,"y":406,"wires":[["ca4f782ee0146ce6"]]},{"id":"ca4f782ee0146ce6","type":"PkgFile","z":"bd2901f55cfc55ef","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{ pversion }}\",\n  \"dependencies\": {\n  },\n\n  \"description\": \"{{{ pdescription }}}\",\n  \"keywords\": [\n    \"node-red\", \"comparison\", \"flow-comparison\"\n  ],\n\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}#readme\",\n  \"license\": \"Don't do evil.\",\n  \"author\": \"{{{ pauthorname }}} <{{{ pauthoremail }}}>\",\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"plugins\": {\n      \"sidebar-plugin\": \"plugins/flowcompare.html\"\n    },\n    \"nodes\": {\n       \"flowcompare\": \"nodes/flowcompare.js\"\n    }\n  },\n\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":865,"y":475,"wires":[["f85686511082a34a"]]},{"id":"32aba161ccb9b03c","type":"FlowHubPull","z":"bd2901f55cfc55ef","g":"18b11be93735f129","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":305.5,"y":330,"wires":[[]]},{"id":"f5e06b7b8845273b","type":"link out","z":"bd2901f55cfc55ef","name":"link out 117","mode":"link","links":["963dfb765b0d9849"],"x":1594.5,"y":369,"wires":[]},{"id":"fc0da81c6d52df9e","type":"template","z":"bd2901f55cfc55ef","name":"Frontend JS for FlowCompare.html","field":"flowCompareHtmlFrontendJs","fieldType":"msg","format":"javascript","syntax":"plain","template":"function escapeHtml(string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n    return entityMap[s];\n  });\n}\n\nfunction loadScript(url, callback) {\n  var script = document.createElement(\"script\")\n  script.type = \"text/javascript\";\n\n  if (script.readyState) {  // only required for IE <9\n    script.onreadystatechange = function () {\n      if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n        script.onreadystatechange = null;\n        if (callback) { callback(); }\n      }\n    };\n  } else {  //Others\n    script.onload = function () {\n      if (callback) { callback(); }\n    };\n  }\n\n  script.src = url;\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n};\n\nfunction addPanZoom() {\n  var svg = $(\".flowviewer svg\");\n\n  svg.attr('width', '');\n  svg.attr('height', '');\n  svg.css('width', $('.flowviewer').width() + \"px\");\n  svg.css('height', \"300px\");\n\n  var bbx = $(\".flowviewer svg .containerGroup\")[0].getBBox();\n  svg.attr('viewBox', [bbx.x, bbx.y, bbx.width, bbx.height].join(\" \"))\n\n  /* this is d3 for version 3 of d3 - this is not the same as other d3 versions */\n  var svg = d3.select(\".flowviewer svg\");\n  svg.html('<g>' + svg.html() + '</g>');\n  \n  var inner = svg.select('g');\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([0.3, 100])\n    .on('zoom', function (event) {\n      inner.attr({\n        transform: \"translate(\" + (zoom.translate()) + \") scale(\" + (zoom.scale()) + \")\"\n      });\n    });\n\n  svg.call(zoom);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nvar descMap = {\n  'z': \"Flow Tab Id\",\n  'g': \"Group Id\",\n  'd': \"Disabled\",\n  'w': \"Width\",\n  \"h\": \"Height\",\n};\n\nfunction attrDesc(nme) {\n  return descMap[nme] ? \" <i style='font-size: 80%;'>(\" + descMap[nme] + \")</i>\" : \"\";\n}\n\nfunction createDiff(ndeV1, ndeV2) {\n  var diffDetails = [];\n  var changedAttrs = [];\n\n  Object.keys(ndeV2).forEach(function (nme) {\n    if (Object.keys(ndeV1).indexOf(nme) < 0) {\n      var txt = typeof ndeV2[nme] == \"object\" ? JSON.stringify(ndeV2[nme]) : ndeV2[nme];\n      diffDetails.push(\"<tr class='dv-removed'><th>\" + nme + attrDesc(nme) + \"</th><td><i>MISSING</i></td><td><code>\" + escapeHtml(txt) + \"</code></td></tr>\")\n      changedAttrs.push(nme)\n    }\n  });\n\n  Object.keys(ndeV1).forEach(function (nme) {\n    if (Object.keys(ndeV2).indexOf(nme) < 0) {\n      var txt = typeof ndeV1[nme] == \"object\" ? JSON.stringify(ndeV1[nme]) : ndeV1[nme];\n      diffDetails.push(\"<tr class='dv-added'><th>\" + nme + attrDesc(nme) + \"</th><td><code>\" + escapeHtml(txt) + \"</code></td><td><i>ADDED</i></td></tr>\")\n      changedAttrs.push(nme)\n    }\n  });\n\n  Object.keys(ndeV1).forEach(function (nme) {\n    if (Object.keys(ndeV2).indexOf(nme) > -1) {\n      if (JSON.stringify(ndeV1[nme]) !== JSON.stringify(ndeV2[nme])) {\n        let span = null;\n        let diff = undefined;\n        changedAttrs.push(nme)\n\n        try {\n          diff = Diff.diffLines(ndeV2[nme], ndeV1[nme])\n        } catch (e) {\n          diff = Diff.diffLines(JSON.stringify(ndeV2[nme], undefined, 1), JSON.stringify(ndeV1[nme], undefined, 1))\n        }\n        const fragment = document.createDocumentFragment();\n\n        diff.forEach((part) => {\n          // green for additions, red for deletions\n          const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n          span = document.createElement('pre');\n          span.setAttribute('class', 'dv-pre-elem');\n          span.style.color = color;\n          span.appendChild(document.createTextNode(part.value));\n          span.appendChild(document.createElement('br'));\n          fragment.appendChild(span);\n        });\n\n        var row = document.createElement('tr');\n        row.setAttribute('class', \"dv-differ\")\n        var cell = document.createElement('th')\n        cell.appendChild(document.createTextNode(nme))\n        if (descMap[nme]) {\n          var itl = document.createElement('i');\n          itl.style[\"font-size\"] = \"80%\"\n          itl.appendChild(document.createTextNode(\"(\" + descMap[nme] + \")\"))\n          cell.appendChild(itl)\n        }\n        row.append(cell);\n\n        cell = document.createElement('td')\n        cell.setAttribute('colspan', '2')\n        cell.append(fragment)\n\n        row.append(cell)\n        diffDetails.push(row.outerHTML)\n      } else {\n        diffDetails.push(\"<tr><th>\" + nme + \"</th><td><code>\" + escapeHtml(ndeV1[nme]) + \"</code></td><td><code>\" + escapeHtml(ndeV2[nme]) + \"</code></td></tr>\")\n      }\n    }\n  });\n\n  /* \n   * strange happenings, the server says that these two nodes differ but \n   * there are zero changed attributes ... hm  ... so do a diff over the\n   * entire nodes.\n   */\n  if (changedAttrs.length == 0) {\n    let span = null;\n    let nme = \"OBJ\"\n    // let diff = Diff.diffChars(JSON.stringify(ndeV2,undefined,1), JSON.stringify(ndeV1,undefined,1))\n    let diff = Diff.diffJson(ndeV2, ndeV1)\n\n    const fragment = document.createDocumentFragment();\n\n    diff.forEach((part) => {\n      // green for additions, red for deletions\n      const color = part.added ? 'green' : part.removed ? 'red' : '#040506';\n\n      span = document.createElement('pre');\n      span.setAttribute('class', 'dv-pre-elem');\n      span.style.color = color;\n      span.appendChild(document.createTextNode(part.value));\n      span.appendChild(document.createElement('br'));\n      fragment.appendChild(span);\n    });\n\n    var row = document.createElement('tr');\n    row.setAttribute('class', \"dv-differ\")\n    var cell = document.createElement('th')\n    cell.appendChild(document.createTextNode(nme))\n    if (descMap[nme]) {\n      var itl = document.createElement('i');\n      itl.style[\"font-size\"] = \"80%\"\n      itl.appendChild(document.createTextNode(\"(\" + descMap[nme] + \")\"))\n      cell.appendChild(itl)\n    }\n    row.append(cell);\n\n    cell = document.createElement('td')\n    cell.setAttribute('colspan', '2')\n    cell.append(fragment)\n\n    row.append(cell)\n\n    return {\n      html: row.outerHTML,\n      icon: \"fa-question\"\n    }\n  }\n\n  var visualOnlyAttributes = ['x', 'y', 'w', 'h', 'g', 'wires'];\n  \n  return {\n    html: diffDetails.join(\"\"),\n    icon: changedAttrs.filter(d => { return visualOnlyAttributes.indexOf(d) < 0 }).length == 0 ? \"fa-eye\" : \"fa-pencil\"\n  }\n}\n\nfunction getFlowDataFromCurrentWorkspace() {\n  /******\n   ** Code taken from Node-RED code base:\n   **\n   ** https://github.com/node-red/node-red/blob/e8ddee24a9944e57d186f02b081295c56a45b67c/packages/node_modules/%40node-red/editor-client/src/js/ui/clipboard.js#L710-L723\n   **\n   **/\n  var activeWorkspace = RED.workspaces.active();\n  var nodes = RED.nodes.groups(activeWorkspace);\n\n  nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n  nodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\n  RED.nodes.eachConfig(function (n) {\n    if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n      // Grab any config nodes scoped to this flow that don't\n      // require any flow-nodes to use them\n      nodes.push(n);\n    }\n  });\n\n  var parentNode = RED.nodes.workspace(\n    activeWorkspace\n  ) || RED.nodes.subflow(activeWorkspace);\n\n  nodes.unshift(parentNode);\n\n  return RED.nodes.createExportableNodeSet(nodes);\n}\n\nfunction iframeHasBeenLoaded(elem) {\n  var nodes = getFlowDataFromCurrentWorkspace();\n\n  setTimeout(() => {\n    elem.contentWindow.postMessage({\n      nodes: nodes,\n      msg: \"renderlocalflow\",\n      flowid: nodes[0].id\n    }, \"*\")\n  }, 345);\n}\nwindow.iframeHasBeenLoaded = iframeHasBeenLoaded;\n\nfunction doSubmission(flowdata) {\n\n  var activeWorkspace = RED.workspaces.active();\n\n  // avoid having subflows within flows being sent to the server.\n  var filterFlowdata = flowdata.filter( (nde) => {\n    return (nde.z == activeWorkspace || nde.id == activeWorkspace)\n  })\n\n  $($($('#svgelem .container-diff02')[0]).find('.containerGroup')[0]).find('g').html(\"\");\n  $($($('#svgelem .container-diff01')[0]).find('.containerGroup')[0]).find('g').html(\"\");\n\n  $.ajax({\n    url: \"FlowCompareCfg\",\n    type: \"POST\",\n    contentType: \"application/json; charset=utf-8\",\n\n    data: JSON.stringify({\n      flowid: activeWorkspace,\n      flowdata: filterFlowdata || {},\n      flowlabel: (RED.nodes.workspace(activeWorkspace) || { label: \"subflow\"}).label,\n    }),\n\n    success: function (resp) {\n      var items = [];\n      var nodeItemMap = {};\n\n      if (resp.status == \"failed\") {\n        RED.notify(\"Error happened, please check console\", {\n          type: \"error\",\n          timeout: 2000\n        });\n        \n        console.error( \"Error in flow compare: \", resp )\n        return;\n      }\n\n      renderFlow(resp.flowid, resp.nodes, $($('#svgelem .container-diff02')[0]), {\n        \"arrows\": false,\n        \"gridlines\": false,\n        \"zoom\": false,\n        \"images\": true,\n        \"linklines\": true,\n        \"dllink\": false,\n        \"labels\": true,\n      });\n\n      renderFlow(resp.flowid, flowdata, $($('#svgelem .container-diff01')[0]), {\n        \"arrows\": false,\n        \"gridlines\": false,\n        \"zoom\": false,\n        \"images\": true,\n        \"linklines\": true,\n        \"dllink\": false,\n        \"labels\": true,\n      });\n\n      var svg = $(\".flowviewer svg\");\n\n      svg.attr('width', '');\n      svg.attr('height', '');\n      svg.css('width', $('.flowviewer').width() + \"px\");\n      svg.css('height', \"300px\");\n\n      var bbx = $(\".flowviewer svg .containerGroup\")[0].getBBox();\n      svg.attr('viewBox', [bbx.x, bbx.y, bbx.width, bbx.height].join(\" \"))\n\n      // addPanZoom();\n\n      var slider = document.getElementById(\"node-input-compare-slider\");\n      slider.oninput = function () {\n        $('.container-diff01').css('opacity', this.value / 100);\n        $('.container-diff02').css('opacity', (100 - this.value) / 100)\n      }\n\n      resp.changes.forEach(function (nde) {\n        var nId = nde.id;\n\n        if (nde.type == \"deleted\") {\n          nodeItemMap[nId] = {\n            label: nde.oldObj.name || nde.oldObj.type,\n            icon: \"fa fa-times\",\n            class: \"\",\n            diffcontent: createDiff({}, nde.oldObj).html,\n            sublabel: nde.oldObj.type,\n            selected: false,\n            checkbox: false,\n            children: undefined\n          };\n\n          $('.node-' + nId).addClass('deleted');\n          $('.group-' + nId).addClass('deleted');\n\n          items.push(nodeItemMap[nId]);\n          return;\n        }\n\n        if (nde.type == \"added\") {\n          nodeItemMap[nId] = {\n            objid: nId,\n            label: nde.newObj.name || nde.newObj.type,\n            icon: \"fa fa-check\",\n            class: \"\",\n            diffcontent: createDiff(nde.newObj, {}).html,\n            sublabel: nde.newObj.type,\n            selected: false,\n            checkbox: false,\n            children: undefined\n          };\n\n          $('.node-' + nId).addClass('added');\n          $('.group-' + nId).addClass('added');\n\n          items.push(nodeItemMap[nId]);\n          return;\n        }\n\n        if (nde.oldObj.type == \"tab\" || nde.oldObj.type == \"group\" || nde.oldObj.type == \"junction\") {\n          var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n          nodeItemMap[nId] = {\n            objid: nId,\n            label: nde.oldObj.name || nde.oldObj.type,\n            icon: \"fa \" + diffContent.icon,\n            class: \"\",\n            diffcontent: diffContent.html,\n            sublabel: nde.type + \" - \" + nde.oldObj.type,\n            selected: false,\n            checkbox: false,\n            children: undefined\n          };\n\n          if (diffContent.icon == \"fa-eye\") {\n            $('.node-' + nId).addClass('moved');\n            $('.group-' + nId).addClass('moved');\n          }\n          if (diffContent.icon == \"fa-pencil\") {\n            $('.node-' + nId).addClass('changed');\n            $('.group-' + nId).addClass('changed');\n          }\n          items.push(nodeItemMap[nId]);\n          return;\n        }\n\n        /* \n         * Pass this point only nodes, no groups, tabs or junctions\n         */\n        var n = RED.nodes.node(nId);\n        if (!n) {\n          console.log(\"Node not found\", nde)\n        }\n\n        var nodeDef = RED.nodes.getType(n.type);\n        var label;\n\n        if (nodeDef) {\n          var l = nodeDef.label;\n          label = (typeof l === \"function\" ? l.call(n) : l) || \"\";\n        }\n\n        if (!nodeDef || !label) {\n          label = n.type;\n        }\n\n        var diffContent = createDiff(nde.newObj, nde.oldObj);\n\n        nodeItemMap[n.id] = {\n          node: n,\n          objid: nId,\n          label: label,\n          icon: \"fa \" + diffContent.icon,\n          class: \"\",\n          diffcontent: diffContent.html,\n          sublabel: nde.oldObj.type,\n          selected: false,\n          checkbox: false,\n          children: undefined\n        };\n\n        if (diffContent.icon == \"fa-eye\") {\n          $('.node-' + nId).addClass('moved');\n          $('.group-' + nId).addClass('moved');\n        }\n\n        if (diffContent.icon == \"fa-pencil\") {\n          $('.node-' + nId).addClass('changed');\n          $('.group-' + nId).addClass('changed');\n        }\n\n        items.push(nodeItemMap[n.id]);\n      });\n\n      if (items.length == 0) {\n        RED.notify(\"No Flow Changes\", {\n          type: \"warning\",\n          timeout: 2000\n        });\n        \n        try {\n          $(\"#node-input-flowcompare-target-container-div\").treeList('empty')\n          $('#node-input-flowcompare-diffcontainer').html(\"\")\n        } catch ( ex ) { }\n      } else {\n        try {\n          $(\"#node-input-flowcompare-target-container-div\").treeList('empty')\n        } catch ( ex ) {\n          $(\"#node-input-flowcompare-target-container-div\").css({\n            width: \"100%\",\n            height: \"200px\"\n          }).treeList({\n              multi: false\n          }).on(\"treelistitemmouseover\", function (e, item) {\n            $('.node-'+item.objid).addClass('highlight')\n            $('.group-' + item.objid).addClass('highlight')\n          }).on(\"treelistitemmouseout\", function (e, item) {\n            $('.node-' + item.objid).removeClass('highlight')\n            $('.group-' + item.objid).removeClass('highlight')\n          }).on('treelistselect', function (event, item) {\n            if (item.diffcontent) {\n              $('#node-input-flowcompare-diffcontainer').html(item.diffcontent)\n              if (item.objid) {\n                RED.view.reveal(item.objid, true)\n                RED.view.redraw()\n              }\n            } else {\n              $('#node-input-flowcompare-diffcontainer').html(\"\")\n            }\n          });\n        }\n\n        $(\"#node-input-flowcompare-target-container-div\").treeList('data', items.sort((a, b) => a.icon > b.icon));\n      }\n    },\n\n    error: function (jqXHR, textStatus, errorThrown) {\n      if (jqXHR.status == 404) {\n        RED.notify(\"Node has not yet been deployed, please deploy.\", \"error\");\n      } else if (jqXHR.status == 405) {\n        RED.notify(\"Not Allowed.\", \"error\");\n      } else if (jqXHR.status == 500) {\n        RED.notify(node._(\"common.notification.error\", {\n          message: node._(\"inject.errors.failed\")\n        }), \"error\");\n      } else if (jqXHR.status == 0) {\n        RED.notify(node._(\"common.notification.error\", {\n          message: node._(\"common.notification.errors.no-response\")\n        }), \"error\");\n      } else {\n        RED.notify(node._(\"common.notification.error\", {\n          message: node._(\"common.notification.errors.unexpected\", {\n            status: jqXHR.status, message: textStatus\n          })\n        }), \"error\");\n      }\n    }\n  });\n}\n\nfunction flowCompareEventListener(data) {\n  if ( $('#node-input-flowcompare-autoupdate-button').is(\":checked\") && (data.old != data.workspace) ) {\n    doSubmission(getFlowDataFromCurrentWorkspace())\n  }\n}\n","output":"str","x":1172,"y":860,"wires":[["c2f96e700f6e65ec"]]},{"id":"85d2a9034369e7aa","type":"template","z":"bd2901f55cfc55ef","name":"cssStyling","field":"cssStyling","fieldType":"msg","format":"css","syntax":"plain","template":".flow-description-text {\n  font-family: monospace;\n  font-size: 30px;\n  dominant-baseline: middle;\n}\n.flowviewer {\n  border: 1px rgb(196, 196, 196) solid;\n  border-radius: 5px;\n}\n\n.deleted {\n  fill: rgb(120, 68, 68);\n  fill-opacity: 0.2;\n  stroke: black;\n  stroke-width: 2px;\n}\n.added {\n  fill: rgb(64, 166, 98);\n  fill-opacity: 0.4;\n  stroke: rgb(10, 255, 23);\n  stroke-width: 4px;\n}\n.changed {\n  fill: rgb(126, 97, 208);\n  fill-opacity: 0.6;\n  stroke: rgb(229, 0, 156);\n  stroke-width: 3px;\n}\n.moved {\n  fill: rgb(210, 251, 89);\n  fill-opacity: 0.3;\n  stroke: rgb(0, 50, 249);\n  stroke-width: 3px;\n}\n\n.highlight {\n  stroke: rgb(255, 89, 89) !important;\n  stroke-width: 10px !important;\n}\n\n.diff-viewer {\n  overflow: scroll;\n  background-color: rgb(244, 244, 244);\n  border: 1px solid rgb(196, 196, 196);\n  height: 80vh;\n  padding: 20px;\n  max-width: 90vw;\n  border-radius: 5px;\n}\n\n.dv-differ {\n  background-color: rgba(244, 170, 23, 0.476) !important;\n}\n\n.dv-removed {\n  background-color: rgb(203, 203, 38) !important;\n}\n\n.dv-added {\n  background-color: rgb(86, 222, 120) !important;\n}\n\n.dv-pre-elem {\n  page-break-inside: avoid;\n  font-family: monospace;\n  max-width: 100%;\n  overflow: auto;\n  display: block;\n  word-wrap: break-word;\n  margin: 0px !important;\n}\n\n\n#diff-viewer{\n  overflow:scroll;\n  background-color:rgb(244, 244, 244);\n  border: 2px solid #000;\n  height:80vh;\n  display:none;\n  position:fixed;\n  top:10vh;\n  left:5vw;\n  z-index: 1000;\n  padding: 20px;\n  max-width: 90vw;\n}\n\n.dv-differ {\n  background-color: rgba(244, 170, 23, 0.476) !important;\n}\n\n.dv-removed {\n  background-color: rgb(203, 203, 38) !important;\n}\n\n.dv-added {\n  background-color: rgb(86, 222, 120) !important;\n}\n\n.dv-pre-elem {\n    page-break-inside: avoid;\n    font-family: monospace;\n    max-width: 100%;\n    overflow: auto;\n    display: block;\n    word-wrap: break-word;\n    margin: 0px !important;\n}\n","output":"str","x":1086,"y":802,"wires":[["fc0da81c6d52df9e"]]},{"id":"a58c8dc20b4b0580","type":"PkgFile","z":"bd2901f55cfc55ef","name":"Sidebar: FlowCompare.html","filename":"plugins/flowcompare.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function() {\n   var globalYourConfigNode = null;\n\n   {{{ flowCompareHtmlFrontendJs }}}\n\n   function ensureYourConfigNodeExists() {\n      // This function makes sure there is 1 instance of your config node is available, and that the globalYourConfigNode variable refers to it.\n      // Explained in the next step of this tutorial... --> https://discourse.nodered.org/t/tutorial-create-a-sidebar-plugin-and-persist-the-data-in-a-config-node/82020\n\n      // If we had found it previously, check if it has been deleted by the user behind our back\n      if (globalYourConfigNode !== null) {\n         var configNode = RED.nodes.node(globalYourConfigNode.id);\n         if (configNode === null) { globalYourConfigNode = null; }\n      }\n\n      // If not found previously, let's go find it\n      if (globalYourConfigNode === null) {\n         var configNodes = [];\n         RED.nodes.eachConfig(function(configNode) {\n             if (configNode.type === 'FlowCompareCfg') { \n                 configNodes.push(configNode); \n             }\n         });\n\n         // Make sure we only have 1 config node\n         while (configNodes.length > 1) {\n             var configNode = configNodes.pop();\n             RED.nodes.remove(configNode.id);\n             RED.nodes.dirty(true);\n         }\n\n         // When we found a config node, let's use that one\n         if (configNodes.length === 1) { globalYourConfigNode = configNodes[0]; }\n      }\n\n      // When it doesn't exist yet, create it if required\n      if (globalYourConfigNode === null) {\n         // Remark: since this config node is dynamically created (and only used in this sidebar which isn't another node), the config\n         // node is in fact \"unused\".  But since we don't want it to appear \"unused\" in the \"config nodes\" panel, we need to set hasUsers\n         // to false (see https://github.com/node-red/node-red/blob/master/CHANGELOG.md#0161-maintenance-release).\n         // The hasUsers needs also to be specified in the RED.nodes.registerType statement!\n         globalYourConfigNode = {\n             id: RED.nodes.id(), // on the server side, this is called RED.util.generateId()\n             _def: RED.nodes.getType(\"FlowCompareCfg\"),\n             type: \"FlowCompareCfg\",\n             hasUsers: false, \n             users: [],\n             name: \"FlowCompare\",\n             label: function() { return this.name || \"FlowCompare\"},\n             /* values and data defined by this config node */\n             data: \"some default value\", // Default data\n         }\n\n         // Add the new config node to the collection of Node-RED nodes\n         RED.nodes.add(globalYourConfigNode);\n\n         // Make sure the \"Deploy\" button becomes active\n         RED.nodes.dirty(true);\n      }      \n   }\n\n   // Add your plugin as a new tabsheet in the right sidebar AFTER the flow editor is completely started\n   var initialiseConfigNodeOnce = () => {\n      RED.events.off('runtime-state', initialiseConfigNodeOnce);\n\n      // The html content of the sidebar has been specified below as a data-template, from where it can be loaded:\n      var content = $($('script[type=\"text/x-red\"][data-template-name=\"FlowCompare\"]').i18n().html());\n    \n      // Add a \"Your sidebar\" tabsheet to the right sidebar panel, in which this sidebar panel can be displayed\n      // --> more details: https://nodered.org/docs/api/ui/sidebar/\n      RED.sidebar.addTab({\n         id: \"FlowCompare\",\n         label: \"Flow Compare\", // short name for the tab\n         name: \"Flow Compare\", // long name for the menu\n         content: content,\n         closeable: true,\n         // disableOnEdit: true,\n         enableOnEdit: true,\n         iconClass: \"fa fa-map\" // your fontawesome icon\n      });\n\n      // required external libraries\n      loadScript(\"https://cdn.openmindmap.org/thirdparty/diff.min.js\", () => {\n           loadScript(\"https://cdn.openmindmap.org/embed/flowviewer.js\")\n      })\n      \n      addPanZoom();\n      ensureYourConfigNodeExists();\n\n      RED.events.on('workspace:change', flowCompareEventListener);\n\n      RED.actions.remove(\"flowcompare:compare-flow-to-remote\")\n      RED.actions.add(\"flowcompare:compare-flow-to-remote\",function() {\n        doSubmission(getFlowDataFromCurrentWorkspace())\n      });\n\n      $('#node-input-flowcompare-button').on('click', (e) => {\n         if ( e ) { e.preventDefault(); }\n         doSubmission(getFlowDataFromCurrentWorkspace())\n      });\n   };\n   RED.events.on('runtime-state', initialiseConfigNodeOnce);\n})();\n</script>\n\n<style>\n{{{ cssStyling }}}\n</style>\n\n<!-- The html for the right sidebar plugin screen -->\n<script type=\"text/x-red\" data-template-name=\"FlowCompare\">\n  <div class=\"form-row\" style=\"margin-left: 15px; margin-top: 30px;\">\n    <button id=\"node-input-flowcompare-button\"\n                class=\"red-ui-button\">Compare</button>\n    <input type=\"checkbox\" id=\"node-input-flowcompare-autoupdate-button\"\n               style=\"display:inline-block; width:15px; vertical-align:baseline; margin-left: 20px;\">\n    <label for=\"node-input-flowcompare-autoupdate-button\">Auto Compare</label>\n  </div>\n    \n  <div class=\"form-row node-input-target-row node-input-target-list-row\" style=\"position: relative; min-height: 100px\">  \n    <div id=\"node-input-flowcompare-target-container-div\" style=\"min-height: 100px\"></div>\n  </div>\n  \n  <div class=\"form-row\" style=\"position: relative; min-height: 300px;\">\n    <div id=\"node-input-flowcompare-svgcontainer\" class=\"flowviewer\">\n      <svg id=\"svgelem\" pointer-events=\"all\" style=\"cursor: crosshair; min-height: 300px;\"\n        version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n        <!-- Use group elems to ensure that layering of shapes is correct, i.e. nodes always over wires -->\n        <g class='container-gridlines'>\n          <g class='flowGridlines'></g>\n        </g>\n\n        <g class='container-diff01' style=\"opacity: 0;\">\n          <g class=\"containerGroup\">\n            <g class=\"flowDescription\"></g>\n            <g class='flowGroups'></g>\n            <g class='flowWires'></g>\n            <g class='flowNodes'></g>\n          </g>\n        </g>\n        <g class='container-diff02'  style=\"opacity: 1;\">\n          <g class=\"containerGroup\">\n            <g class=\"flowDescription\"></g>\n            <g class='flowGroups'></g>\n            <g class='flowWires'></g>\n            <g class='flowNodes'></g>\n          </g>\n        </g>\n      </svg>\n    </div>\n    <input style=\"width: 100%; min-width: 300px;\" id=\"node-input-compare-slider\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" value=\"0\"></input>\n  </div>\n  \n  <div class=\"form-row\" style=\"position: relative; min-height: 100px\">\n    <div id=\"node-input-flowcompare-diffcontainer\" class=\"diff-viewer\"></div>\n  </div>\n\n</script>","output":"str","x":1428,"y":638,"wires":[["f5e06b7b8845273b"]]},{"id":"b7cb6cf9427a1068","type":"PkgFile","z":"bd2901f55cfc55ef","name":"FlowCompareCfg.html","filename":"nodes/flowcompare.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function ($) {\n   RED.nodes.registerType('FlowCompareCfg', {\n      category: 'config',\n      hasUsers: false,\n      defaults: {\n         name: { value: \"\" },\n         data: { value: \"\" }\n      },\n      paletteLabel: 'FlowCompareCfg',\n      label: function () {\n         return this.name;\n      }\n  });\n})(jQuery);\n</script>\n\n<!-- The html for the config node info panel (in right sidebar) -->\n<script type=\"text/x-red\" data-template-name=\"FlowCompareCfg\">\n   <p>Visually compare local flow with flow deployed on the server.</p>\n   Viusal comparison of flows being edited and flow that has been deployed.\n</script>\n","output":"str","x":895,"y":613,"wires":[["85d2a9034369e7aa"]]},{"id":"c2f96e700f6e65ec","type":"UglifyJS","z":"bd2901f55cfc55ef","name":"","config":"{\"parse\":{},\"compress\":{},\"mangle\":{\"reserved\":[\"$\",\"export\",\"require\"]},\"output\":null,\"sourceMap\":null,\"nameCache\":null,\"toplevel\":false,\"warnings\":false}","configType":"json","property":"flowCompareHtmlFrontendJs","propertyType":"msg","x":1493,"y":833,"wires":[["a58c8dc20b4b0580"]]},{"id":"414774e0d6e6cb29","type":"FlowHubPull","z":"bd2901f55cfc55ef","name":"","notab":false,"flowid":"7750f7bbea836e0e","flowname":"[NodeDev] Flow compare trigger update on tab change","flowrevision":"","x":282,"y":550,"wires":[[]]}]