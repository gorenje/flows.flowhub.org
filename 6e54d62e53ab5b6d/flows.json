[{"id":"6e54d62e53ab5b6d","type":"tab","label":"[Node-RED2UML] Convert Node-RED flow to Mermaid","disabled":false,"info":"::: aim\n\nTo convert an Node-RED flow to a Mermaid flow diagram.\n\n:::\n\n::: requirements\n\nThis flow requires the ClientCode node from the [introspection](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection) node package.\n\n:::\n\n::: explanation\n\nThis flow will take the *frontend* version of the flow and convert it to a [Mermaid](https://mermaid.js.org/syntax/flowchart.html) flow diagram.\n\nThe flow diagram will be dumped to the debug panel.\n\nTo test the resulst, use the [Mermaid live editor](https://mermaid.live/edit)\n\n:::\n\n::: discussion \n\nThis flow is far from perfect and probably has many bugs, I have not done extensive testing. \n\n\nAny bugs, suggestions or feedback, please use the feedback link below and send me an email.\n\n:::\n\n### Example\n\n```mermaid\n%% change this to LR Node-RED like UML\ngraph TB\n5888a25fe394e1ae[Obtain Frontend Flow] --> 5f4cb3222cd07e7d[create mermaid from nodes]\n5e44fd936947eec3[generate mermaid code] --> 5888a25fe394e1ae[Obtain Frontend Flow]\n5f4cb3222cd07e7d[create mermaid from nodes] --> 2896702daf4d90c1(mermaid flow diagram)\n5f4cb3222cd07e7d[create mermaid from nodes] --> 4e979b7280cb9986[copy to clipboard]\n559f50ab6c63e19a[catch] --> 96d9a3eb9ce50f98(error)\n```\n\n","env":[]},{"id":"5888a25fe394e1ae","type":"ClientCode","z":"6e54d62e53ab5b6d","name":"Obtain Frontend Flow","clientcode":"var activeWorkspace = RED.workspaces.active();\nvar nodes = RED.nodes.groups(activeWorkspace);\n\nnodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\nnodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\nRED.nodes.eachConfig(function (n) {\n    if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n        // Grab any config nodes scoped to this flow that don't\n        // require any flow-nodes to use them\n        nodes.push(n);\n    }\n});\n\nvar parentNode = RED.nodes.workspace(\n    activeWorkspace\n) || RED.nodes.subflow(activeWorkspace);\n\nnodes.unshift(parentNode);\n\nnode.send({ payload: RED.nodes.createExportableNodeSet(nodes) })\n","format":"javascript","x":683,"y":640,"wires":[["5f4cb3222cd07e7d"]]},{"id":"2896702daf4d90c1","type":"debug","z":"6e54d62e53ab5b6d","name":"mermaid flow diagram","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1361,"y":672,"wires":[]},{"id":"5e44fd936947eec3","type":"inject","z":"6e54d62e53ab5b6d","name":"generate mermaid code","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":398,"y":474,"wires":[["5888a25fe394e1ae"]]},{"id":"5f4cb3222cd07e7d","type":"function","z":"6e54d62e53ab5b6d","name":"create mermaid from nodes","func":"/*\n  It is assumed that the nodes that come in here have the same \n  content as those contained in a flows.json file. Nodes have many \n  representations but their representation in flows.json is most\n  detailed. \n  \n  This the same format as doing an export and viewing the JSON.\n*/\n\nvar nodes = msg.payload.filter((n) => {\n    return n.type != \"tab\" && n.type != \"group\"\n})\n\nvar id2node = {};\nfor (var idx = 0; idx < nodes.length; idx++) {\n    var nd = nodes[idx];\n    id2node[nd.id] = nd;\n}\n\nvar escapeForMermaid = (str) => {\n    return str.replace(\n        \"&\", \"&amp;\"\n    ).replace(\n        \"#\", \"#35;\"\n    ).replace(\n        \"[\", \"#91;\"\n    ).replace(\n        \"]\", \"#93;\"\n    ).replace(\n        \"(\", \"#40;\"\n    ).replace(\n        \")\", \"#41;\"\n    ).replace(\n        \"|\", \"#124;\"\n    ).replace(\n        \">\", \"&gt;\"\n    ).replace(\n        \"<\", \"&lt;\"\n    ).replace(\n        \"{\", \"#123;\"\n    ).replace(\n        \"}\", \"#125;\"\n    ).replace(\n        \"/\", \"#47;\"\n    )\n};\n\nvar node2label = (nd, nme = undefined) => {\n    var labl = nd.name || nd.type;\n\n    if (nme) {\n        nme = \"|\" + escapeForMermaid(nme) + \"| \"\n    } else { nme = \"\" }\n\n    labl = escapeForMermaid(labl);\n\n    switch (nd.type) {\n        case \"switch\":\n        case \"join\":\n        case \"split\":\n            return nme + nd.id + \"{\" + labl + \"}\"\n        case \"link in\":\n        case \"link out\":\n        case \"link call\":\n            labl = escapeForMermaid(nd.name || (nd.links && nd.links.length > 0 && id2node[nd.links[0]] && id2node[nd.links[0]].name) || nd.type)\n            if ( nd.mode && nd.mode == \"return\") {\n                return nme + nd.id + \"[\\\\Link Return/]\"    \n            }\n            return nme + nd.id + \"{{\" + labl + \"}}\"\n        case \"junction\":\n            return nme + nd.id + \"((\" + labl + \"))\"\n        case \"debug\":\n            return nme + nd.id + \"(\" + labl + \")\"\n        default:\n            return nme + nd.id + \"[\" + labl + \"]\"\n    }\n}\n\n\n/* \n  we include the mermaid array on the msg object because if an exception\n  happens, we can check how far this code got. That is by comparing the\n  contents of this array with the payload, we know which node caused\n  the exception.\n*/\nmsg.mermaid = [\n    \"%% change this to LR Node-RED like UML\",\n    \"graph TB\"\n];\n\nfor (var idx = 0; idx < nodes.length; idx++) {\n    var nde = nodes[idx];\n    if (nde.links && nde.links.length > 0 && nde.type == \"link out\") {\n        for (var ldx = 0; ldx < nde.links.length;ldx++) {\n            /* only add a dashed link line iff the node is included in this graph */\n            if (id2node[nde.links[ldx]]) {\n                msg.mermaid.push(\n                    node2label(nde) + \" -.-> \" + nde.links[ldx]\n                )\n            }\n        }\n    }\n    if (nde.wires && nde.wires.length > 0) {\n        if (nde.type == \"switch\") {\n            for (var odx = 0; odx < nde.wires.length; odx++) {\n                for (var wdx = 0; wdx < nde.wires[odx].length; wdx++) {\n                    msg.mermaid.push(\n                        node2label(nde) + \" --> \" + node2label(id2node[nde.wires[odx][wdx]], nde.rules[odx] && (nde.rules[odx].v || nde.rules[odx].t))\n                    )\n                }\n            }\n        } else {\n            for (var wdx = 0; wdx < nde.wires[0].length; wdx++) {\n                msg.mermaid.push(\n                    node2label(nde) + \" --> \" + node2label(id2node[nde.wires[0][wdx]])\n                )\n            }\n        }\n    }\n}\n\nmsg.payload = msg.mermaid.join(\"\\n\");\ndelete msg.mermaid;\n\nreturn msg;\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":988,"y":740,"wires":[["2896702daf4d90c1","4e979b7280cb9986"]]},{"id":"559f50ab6c63e19a","type":"catch","z":"6e54d62e53ab5b6d","name":"","scope":["5f4cb3222cd07e7d"],"uncaught":false,"x":1081,"y":766.5,"wires":[["96d9a3eb9ce50f98"]]},{"id":"96d9a3eb9ce50f98","type":"debug","z":"6e54d62e53ab5b6d","name":"error","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1311,"y":766.5,"wires":[]},{"id":"4e979b7280cb9986","type":"ClientCode","z":"6e54d62e53ab5b6d","name":"copy to clipboard","clientcode":"(function(pload) {\n    function fallbackCopyTextToClipboard(text, cb) {\n        var textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n\n        // Avoid scrolling to bottom\n        textArea.style.top = \"0\";\n        textArea.style.left = \"0\";\n        textArea.style.position = \"fixed\";\n\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n\n        try {\n            var successful = document.execCommand('copy');\n            var msg = successful ? 'successful' : 'unsuccessful';\n\n            if (successful && cb && typeof cb == \"function\") { cb(); }\n\n            console.log('Fallback: Copying text command was ' + msg);\n        } catch (err) {\n            console.error('Fallback: Oops, unable to copy', err);\n        }\n\n        document.body.removeChild(textArea);\n    }\n\n    function copyTextToClipboard(text, cb) {\n        if (!navigator.clipboard) {\n            fallbackCopyTextToClipboard(text,cb);\n            return;\n        }\n\n        navigator.clipboard.writeText(text).then(\n            function () {\n                if (cb && typeof cb == \"function\") { cb(); }\n                console.log('Async: Copying to clipboard was successful!');\n            }, function (err) {\n                console.error('Async: Could not copy text: ', err);\n            }\n        );\n    }\n\n    function copyToClipboard(msg) {\n        copyTextToClipboard(msg.payload, () => {\n            alert('Copied Mermaid chart to clipboard')\n        });\n    }\n\n    copyToClipboard({\n        payload: pload\n    });\n})(payload);\n\nnode.send({ payload: payload })","format":"javascript","x":1353,"y":595,"wires":[[]]}]