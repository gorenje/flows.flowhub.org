[{"id":"291e3f0b7f652839","type":"tab","label":"[Experimental] Auto-layout using Elkjs","disabled":false,"info":"::: aim\n\nAim is to do autolayout in Node-RED. In this case, using [elkjs](https://github.com/kieler/elkjs)\n\n:::\n\n::: warning\n\nThis does script injecting including a [javascript](https://cdn.openmindmap.org/thirdparty/elk.bundled.js) from cdn.openmindmap.org -- if this is not your thing, don't press the button.\n\n:::\n\n::: explanation\n\nAlways remember: undo works - ctrl/cmd-Z is your friend!\n\nPress the <a class=\"ahl-node-only\" data-ids=\"2f815def5c9ceee8\">button</a> and all the nodes will be layed out.\n\nThe <a class=\"ahl-node-only\" data-ids=\"38e96bc44d6425fe\">client code</a> contains the Javascript that controls Elkjs. Checkout the <a href=\"https://github.com/kieler/elkjs#api\">options over at GitHub</a>, the current settings are just a first attempt.\n\n:::\n\n","env":[]},{"id":"b893f761b1e9d2fa","type":"group","z":"291e3f0b7f652839","name":"hello world","style":{"label":true},"nodes":["b20202d99ff60102","e52bec0be1957d67"],"x":241.2500000000001,"y":400,"w":629.9999999999999,"h":151},{"id":"5c859d35b70f22fe","type":"group","z":"291e3f0b7f652839","name":"create dynamic flow using RSS as input","style":{"label":true},"nodes":["05534e3b006dad20","3e4f153eee015ca8","80878b57a4a7b987","d9dbc40774430342","d09f478e227e15cb","df39eeb7ede52617","f904e5d7dfd0929c","c6d8a513b8218670","0c8bccda071ba88a"],"x":241.2500000000001,"y":822,"w":1607.75,"h":522},{"id":"5b2c15b61dcd00a1","type":"group","z":"291e3f0b7f652839","name":"align all connected nodes","style":{"label":true},"nodes":["160d7c098981c0c6","57a8cee596385673","37225474f1d800aa"],"x":1139,"y":400,"w":710,"h":328},{"id":"c071cf4210a0e6df","type":"group","z":"291e3f0b7f652839","name":"move node","style":{"label":true},"nodes":["f5e2ec93b88298f7","d9a3702c111e5274"],"x":241.2500000000001,"y":625,"w":494,"h":147},{"id":"62d421739048bfae","type":"group","z":"291e3f0b7f652839","name":"display user agent","style":{"label":true},"nodes":["447b473ddf86cd26","7b05817aa3838cb7","99b7070606c1e5eb","959b9cc09505a2e5"],"x":241.2500000000001,"y":1437,"w":809.9999999999999,"h":157},{"id":"9384807150d936e2","type":"group","z":"291e3f0b7f652839","name":"connect nodes","style":{"label":true},"nodes":["32a819bd14ace2c2","db507100db8737cf","451bdabe32384e02","3cde731ff17752d6"],"x":1139,"y":1383,"w":710,"h":211},{"id":"76aaece96349d384","type":"group","z":"291e3f0b7f652839","name":"auto layout","style":{"label":true},"nodes":["c320cb70c5bfbe4a","06c41b325b876952","53a1dc6ca99eba58","bfe94f70f628c689","f40c37c12f099df4","2fafc08fdbb02db8","f780d1657f149243","6bd42b145ad99bb1","b946dcd1a11d761a","33807c37c1f6faea"],"x":237.2856788635255,"y":1671.4286661148071,"w":660.857234954834,"h":335.14304399490356},{"id":"38e96bc44d6425fe","type":"ClientCode","z":"291e3f0b7f652839","name":"using elkjs","clientcode":"$('head').append( '<script async=\"async\" type=\"text/javascript\" src=\"https://cdn.openmindmap.org/thirdparty/elk.bundled.js\"></script>');\n\nsetTimeout( () => {\n\n    var activeWorkspace = RED.workspaces.active();\n    var nodes = RED.nodes.groups(activeWorkspace);\n\n    nodes = nodes.concat(RED.nodes.junctions(activeWorkspace));\n    nodes = nodes.concat(RED.nodes.filterNodes({ z: activeWorkspace }));\n\n    RED.nodes.eachConfig(function (n) {\n        if (n.z === RED.workspaces.active() && n._def.hasUsers === false) {\n            // Grab any config nodes scoped to this flow that don't\n            // require any flow-nodes to use them\n            nodes.push(n);\n        }\n    });\n\n    var parentNode = RED.nodes.workspace(\n        activeWorkspace\n    ) || RED.nodes.subflow(activeWorkspace);\n\n    nodes.unshift(parentNode);\n\n    var allnodes = RED.nodes.createExportableNodeSet(nodes).filter( (n) => {\n        return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n    });\n\n    var alledges = [];\n    allnodes.forEach((n) => {\n        for ( var widx = 0; widx < n.wires.length; widx++ ) {\n            for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                alledges.push({\n                    id: n.id + n.wires[widx][xidx],\n                    sources: [n.id],\n                    targets: [n.wires[widx][xidx]]\n                });\n            }\n        }\n    })\n\n    allnodes = allnodes.map( (n) => {\n        return {\n            id: n.id,\n            width: document.getElementById(n.id).getBBox().width + 3,\n            height: document.getElementById(n.id).getBBox().height + 3,\n        }\n    });\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: { \n            'algorithm': 'layered' ,\n            'childAreaHeight': 5000,\n            'childAreaWidth': 5000,\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => { \n            var changedNodes = [];\n            \n            g.children.forEach( (c) => {\n                var nd = RED.nodes.node(c.id);\n\n                changedNodes.push({\n                    n: nd,\n                    ox: nd.x,\n                    oy: nd.y,\n                    moved: nd.moved\n                });\n\n                nd.x = c.x;\n                nd.y = c.y;\n                nd.dirty = true;\n            });\n            \n            RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n            RED.nodes.dirty(true);\n            RED.view.redraw(true);\n            \n            node.send({ type: \"ok\", payload: g})\n        })\n        .catch((g) => { node.send({ type: \"error\", payload: g }) });\n\n}, 1500)","format":"javascript","x":417,"y":230,"wires":[["fdd29440a0cd8efa"]]},{"id":"2f815def5c9ceee8","type":"inject","z":"291e3f0b7f652839","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":259,"y":144,"wires":[["38e96bc44d6425fe"]]},{"id":"fdd29440a0cd8efa","type":"debug","z":"291e3f0b7f652839","name":"debug 26","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":577,"y":305,"wires":[]},{"id":"b20202d99ff60102","type":"inject","z":"291e3f0b7f652839","g":"b893f761b1e9d2fa","name":"Hello World example","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"hello world","payloadType":"str","x":377.2500000000001,"y":441,"wires":[["e52bec0be1957d67"]]},{"id":"e52bec0be1957d67","type":"ClientCode","z":"291e3f0b7f652839","g":"b893f761b1e9d2fa","name":"open alert window","clientcode":"alert(payload);\n","format":"javascript","x":755.25,"y":510,"wires":[[]]},{"id":"05534e3b006dad20","type":"inject","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"set RSS url","props":[{"p":"url","v":"https://flows.flowhub.org/feed.xml","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":347.2500000000001,"y":863,"wires":[["3e4f153eee015ca8"]]},{"id":"3e4f153eee015ca8","type":"http request","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","persist":false,"insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":502.2500000000001,"y":946,"wires":[["80878b57a4a7b987"]]},{"id":"80878b57a4a7b987","type":"xml","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"parse feed.xml","property":"payload","attr":"","chr":"","x":670.2500000000001,"y":1021,"wires":[["d09f478e227e15cb"]]},{"id":"d9dbc40774430342","type":"split","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1179.25,"y":1130,"wires":[["df39eeb7ede52617"]]},{"id":"d09f478e227e15cb","type":"change","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"set payload and define fake tab Z id","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.feed.entry","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":937.25,"y":1081,"wires":[["d9dbc40774430342"]]},{"id":"df39eeb7ede52617","type":"function","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"convert xml object to flow object","func":"msg.payload = {\n    \"id\": msg.payload.id[0].match(/.{16}$/)[0],\n    \"type\": \"comment\",\n    \"name\": msg.payload.title[0][\"_\"],\n    \"info\": msg.payload.id[0],\n    \"x\": 801 * Math.random(),\n    \"y\": 699 * Math.random(),\n    \"wires\": [\n    ]\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1206.25,"y":1217,"wires":[["f904e5d7dfd0929c"]]},{"id":"f904e5d7dfd0929c","type":"join","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1203.25,"y":1303,"wires":[["c6d8a513b8218670"]]},{"id":"c6d8a513b8218670","type":"function","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"prepend the subflow to the nodes array","func":"msg.payload = {\n    flowContent: msg.payload,\n    removeduplicates: true,\n    autoimport: false\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1470.25,"y":1303,"wires":[["0c8bccda071ba88a"]]},{"id":"0c8bccda071ba88a","type":"ClientCode","z":"291e3f0b7f652839","g":"5c859d35b70f22fe","name":"Open import dialog","clientcode":"function doIt() {\n  var content = payload.flowContent;\n\n  if (payload.removeduplicates) {\n    content = content.filter((elem) => {\n      return RED.nodes.node(elem.id) == undefined\n    });\n  }\n\n  if (content.length == 0) {\n    RED.notify(\"No new content\", {\n      type: \"ok\",\n      id: \"TriggerImport\",\n      timeout: 2000\n    });\n    return;\n  }\n  RED.clipboard.import();\n\n  setTimeout(() => {\n    $('#red-ui-clipboard-dialog-import-text').val(\n      JSON.stringify(content)\n    ).trigger(\"paste\");\n\n    if (payload.autoimport) {\n      setTimeout(() => {\n        $('#red-ui-clipboard-dialog-ok').trigger('click');\n      }, 435);\n    }\n  }, 300);\n};\n\ndoIt();\n","format":"javascript","x":1733,"y":1172.20849609375,"wires":[[]]},{"id":"160d7c098981c0c6","type":"inject","z":"291e3f0b7f652839","g":"5b2c15b61dcd00a1","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1245,"y":441,"wires":[["57a8cee596385673"]]},{"id":"57a8cee596385673","type":"ClientCode","z":"291e3f0b7f652839","g":"5b2c15b61dcd00a1","name":"Align Nodes","clientcode":"var thisNode = RED.nodes.node(nodeid);\n\nconsole.log( thisNode)\nvar connectedNodes = [thisNode];\n\nRED.nodes.eachNode( (nde) => {\n    RED.nodes.getNodeLinks(nde).forEach(function (l) {\n        if ( l.target.id == nodeid) {\n            connectedNodes.push(nde)\n        }\n    });\n})\n\nRED.nodes.getNodeLinks(thisNode).forEach(function (l) {\n    connectedNodes.push(l.target)\n});\n\nRED.view.select({ nodes: connectedNodes })\nsetTimeout(() => {\n    RED.actions.invoke(\"core:align-selection-to-middle\")\n    node.send({\n        payload: \"done\"\n    })\n}, 1000);\n\n","format":"javascript","x":1477,"y":557,"wires":[["37225474f1d800aa"]]},{"id":"37225474f1d800aa","type":"debug","z":"291e3f0b7f652839","g":"5b2c15b61dcd00a1","name":"debug 8","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1743,"y":687,"wires":[]},{"id":"f5e2ec93b88298f7","type":"inject","z":"291e3f0b7f652839","g":"c071cf4210a0e6df","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":347.2500000000001,"y":666,"wires":[["d9a3702c111e5274"]]},{"id":"d9a3702c111e5274","type":"ClientCode","z":"291e3f0b7f652839","g":"c071cf4210a0e6df","name":"Move node up","clientcode":"var nde = RED.nodes.node(nodeid);\n\nnde.y -= 20;\n\nnde.dirty = true;\n\nRED.view.redraw(true)\n\nnode.send({\n    payload: \"done\"\n})","format":"javascript","x":629.2500000000001,"y":731,"wires":[[]]},{"id":"447b473ddf86cd26","type":"ClientCode","z":"291e3f0b7f652839","g":"62d421739048bfae","name":"get userAgent","clientcode":"node.send({\n    payload: navigator.userAgent \n});\n","format":"javascript","x":604.2500000000001,"y":1553,"wires":[["99b7070606c1e5eb","959b9cc09505a2e5"]]},{"id":"7b05817aa3838cb7","type":"inject","z":"291e3f0b7f652839","g":"62d421739048bfae","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":347.2500000000001,"y":1552,"wires":[["447b473ddf86cd26"]]},{"id":"99b7070606c1e5eb","type":"ClientCode","z":"291e3f0b7f652839","g":"62d421739048bfae","name":"Open notify popup","clientcode":"RED.notify(\"Your navigator: \" + payload, {\n    id: nodeid,\n    type: \"ok\",\n    timeout: 2000\n})","format":"javascript","x":935.25,"y":1550,"wires":[[]]},{"id":"959b9cc09505a2e5","type":"debug","z":"291e3f0b7f652839","g":"62d421739048bfae","name":"debug 18","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":869.25,"y":1478,"wires":[]},{"id":"32a819bd14ace2c2","type":"inject","z":"291e3f0b7f652839","g":"9384807150d936e2","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1245,"y":1424,"wires":[["db507100db8737cf"]]},{"id":"db507100db8737cf","type":"ClientCode","z":"291e3f0b7f652839","g":"9384807150d936e2","name":"connect nodes","clientcode":"\nvar dgbNode = RED.nodes.node(\"85926682e41d7e3e\");\nvar injNode = RED.nodes.node(\"d396d46edc750dd7\");\nvar thisNode = RED.nodes.node(nodeid);\n\nRED.nodes.addLink({ source: thisNode, sourcePort: 0, target: dgbNode });\nRED.nodes.addLink({ target: thisNode, sourcePort: 0, source: injNode });\n\nRED.view.select([dgbNode, thisNode, injNode]);\n","format":"javascript","x":1554,"y":1425,"wires":[[]]},{"id":"451bdabe32384e02","type":"debug","z":"291e3f0b7f652839","g":"9384807150d936e2","name":"debug 19","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1743,"y":1553,"wires":[]},{"id":"3cde731ff17752d6","type":"inject","z":"291e3f0b7f652839","g":"9384807150d936e2","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1280,"y":1548,"wires":[[]]},{"id":"c320cb70c5bfbe4a","type":"inject","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"1. select me!","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":370.999948501587,"y":1781.000147819519,"wires":[["bfe94f70f628c689"]]},{"id":"06c41b325b876952","type":"ClientCode","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"layout selection - https://github.com/node-red/node-red/pull/2267/files","clientcode":"function layoutFlow() {\n\n    var selection = RED.view.selection();\n    console.log(selection)\n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n    var ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n\n    // Find Input node\n\n    var nodes = {};\n    var minRank = 0;\n    var stack = [];\n    var candidateInputs = {};\n    var candidateOutputs = {};\n    ns.forEach(function (n) {\n        candidateInputs[n.id] = n;\n        candidateOutputs[n.id] = n;\n        nodes[n.id] = {\n            n: n,\n            i: [],\n            o: [],\n            d: -1, // depth from start\n            r: -1, // rank order at that depth\n            downstream: 0\n        }\n    });\n    RED.nodes.eachLink(function (link) {\n        if (nodes[link.source.id] || nodes[link.target.id]) {\n            nodes[link.source.id].o.push(link.target.id);\n            nodes[link.target.id].i.push(link.source.id);\n            delete candidateInputs[link.target.id]\n            delete candidateOutputs[link.source.id]\n        }\n    })\n\n    var inputs = Object.keys(candidateInputs);\n    var outputs = Object.keys(candidateOutputs);\n\n    console.log(inputs);\n\n    if (inputs.length > 1) {\n        RED.notify(\"Multiple start points - bailing\")\n        return;\n    }\n\n    if (outputs.length === 0) {\n        RED.notify(\"No outputs - is this a big loop? Bailing\");\n        return;\n    }\n\n    function applyDepth(id, d) {\n        if (nodes[id].d < d) {\n            nodes[id].d = d;\n            nodes[id].o.forEach(function (nid) {\n                applyDepth(nid, d + 1);\n            })\n        }\n    }\n    applyDepth(inputs[0], 0)\n\n    function calculateDownstream(id, downstream) {\n        nodes[id].downstream += downstream;\n        nodes[id].i.forEach(function (nid) {\n            calculateDownstream(nid, nodes[id].downstream + 1);\n        })\n    }\n    outputs.forEach(function (id) {\n        calculateDownstream(id, 0)\n    })\n\n    var ranks = {};\n    function rankNodes(node) {\n        if (node.r === -1) {\n            ranks[node.d] = ranks[node.d] || [];\n            node.r = ranks[node.d].length;\n            ranks[node.d].push(node);\n            node.o.sort(function (a, b) {\n                return nodes[b].downstream - nodes[a].downstream\n            })\n            node.o.forEach(function (nid) {\n                rankNodes(nodes[nid])\n            })\n        }\n    }\n    rankNodes(nodes[inputs[0]]);\n    function shuffleRanks(node) {\n        var pushed = false;\n        if (node.o.length > 1) {\n            var outputs = node.o.slice(0);\n            outputs.sort(function (a, b) {\n                if (nodes[a].d === nodes[b].d) {\n                    return nodes[a].r - nodes[b].r;\n                } else {\n                    return nodes[b].d - nodes[a].d;\n                }\n            })\n            // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n            var rank = nodes[outputs[0]].r;\n            var depth = nodes[outputs[0]].d;\n            for (var i = 1; i < outputs.length; i++) {\n                // console.log(outputs[i]);\n                var n = nodes[outputs[i]];\n                if (n.d !== depth && n.r === rank) {\n                    // need to move n down one.\n                    var r = n.r;\n                    ns.forEach(function (_n) {\n                        var nn = nodes[_n.id];\n                        if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                            pushed = true;\n                            nn.r++;\n                        }\n                    })\n                }\n                depth = n.d;\n                rank = n.r;\n            }\n        }\n        node.o.forEach(function (n) {\n            pushed = pushed || shuffleRanks(nodes[n])\n        })\n        return pushed;\n    }\n    var shuffle = function () {\n        if (shuffleRanks(nodes[inputs[0]])) {\n            shuffle();\n        }\n    }\n    shuffle();\n\n\n    var x = nodes[inputs[0]].n.x;\n    var y = nodes[inputs[0]].n.y;\n    var changedNodes = [];\n    ns.forEach(function (n) {\n        var d = nodes[n.id].d;\n        var r = nodes[n.id].r;\n\n        changedNodes.push({\n            n: n,\n            ox: n.x,\n            oy: n.y,\n            moved: n.moved\n        });\n\n        n.x = x + d * 200;\n        n.y = y + r * 50;\n        n.dirty = true;\n        // n.dirtyStatus = true;\n        // n.status = {\n        //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n        // }\n    });\n\n    if (changedNodes.length > 0) {\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n\n}\n\nlayoutFlow();","format":"javascript","x":622.1429138183595,"y":1965.5717101097107,"wires":[[]]},{"id":"53a1dc6ca99eba58","type":"inject","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":353.2856788635255,"y":1897.2858934402466,"wires":[["06c41b325b876952"]]},{"id":"bfe94f70f628c689","type":"switch","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":493.85707473754894,"y":1742.4287366867065,"wires":[["f40c37c12f099df4","2fafc08fdbb02db8","6bd42b145ad99bb1"]]},{"id":"f40c37c12f099df4","type":"change","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":566.7142562866212,"y":1803.857343673706,"wires":[["f780d1657f149243","b946dcd1a11d761a"]]},{"id":"2fafc08fdbb02db8","type":"debug","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"debug 23","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":528.1427841186525,"y":1712.4286661148071,"wires":[]},{"id":"f780d1657f149243","type":"switch","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":576.7142066955568,"y":1756.7144513130188,"wires":[["33807c37c1f6faea"]]},{"id":"6bd42b145ad99bb1","type":"link out","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"link out 1","mode":"link","links":[],"x":620.999933242798,"y":1755.2858428955078,"wires":[]},{"id":"b946dcd1a11d761a","type":"debug","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"debug 24","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":573.8571014404298,"y":1805.2858781814575,"wires":[]},{"id":"33807c37c1f6faea","type":"template","z":"291e3f0b7f652839","g":"76aaece96349d384","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"This is the payload: {{payload}} !","output":"str","x":549.5713653564454,"y":1729.571611404419,"wires":[[]]}]