[{"id":"291e3f0b7f652839","type":"tab","label":"[Experimental] Auto-layout using Elkjs","disabled":false,"info":"::: aim\n\nAim is to do autolayout in Node-RED. In this case, using [elkjs](https://github.com/kieler/elkjs)\n\n:::\n\n::: warning\n\nThis does script injecting including a [javascript](https://cdn.openmindmap.org/thirdparty/elk.bundled.js) from cdn.openmindmap.org -- if this is not your thing, don't press the button.\n\n:::\n\n::: requirements\n\nThis requirements the following Node-RED nodes:\n\n- [introspection](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection), version >= 0.4.2\n\n:::\n\n\n::: explanation\n\nAlways remember: undo works - ctrl/cmd-Z is your friend!\n\nPress the <a class=\"ahl-node-only\" data-ids=\"2f815def5c9ceee8\">button</a> and all the nodes will be layed out.\n\nThe <a class=\"ahl-node-only\" data-ids=\"38e96bc44d6425fe\">client code</a> contains the Javascript that controls Elkjs. Checkout the [options over at GitHub](https://github.com/kieler/elkjs#api), the current settings are just a first attempt.\n\n:::\n\n### Resources\n\n- [Examples using Elk](https://rtsys.informatik.uni-kiel.de/elklive/examples.html)\n\n::: discussion\n\nWhy Elkjs? It seemed to be the simplest to implement from this [list](https://discourse.nodered.org/t/noisecraft-anyone-heard-of-it/79813/26?u=gregorius). I am no layout specialist but it seems to be fairly well used and also have many options.\n\n:::","env":[]},{"id":"b837d7ebd1ec9e0a","type":"group","z":"291e3f0b7f652839","name":"obtain all possible elkjs configuration settings","style":{"label":true},"nodes":["a286b57446e4e2ba","6651c4800ee8569e","4ba8fd83db2b2fe3","22f45a5b47b1a6ef","ddab9c692f5f0527","88d0f0188a94d75c"],"x":29,"y":574,"w":854,"h":242},{"id":"1959fd7e54417661","type":"group","z":"291e3f0b7f652839","name":"auto layout","style":{"label":true},"nodes":["cb5a53e2b8051b25","aa6bd255356743e5","1d892eeadf2046dc","302d5bde5f51fabc","548748b07b087147","f193184dcf8253dc","c6ff5dc4cfdf9523","826586b2b14b3ca0","d7dbb37676cc0893","4e630cd39c715037"],"x":51.28573036193848,"y":1756.428518295288,"w":660.857234954834,"h":335.14304399490356},{"id":"38e96bc44d6425fe","type":"ClientCode","z":"291e3f0b7f652839","name":"using elkjs - algorithm: mrtree","clientcode":"function doIt() {\n    var selection = RED.view.selection();\n    console.log(selection)\n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n\n    var ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n\n    // Convert nodes to flows.json format since all the wires, i.e. links, are \n    // contained in one simple json format.\n    var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n        return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n    });\n\n    var alledges = [];\n    allnodes.forEach((n) => {\n        for (var widx = 0; widx < n.wires.length; widx++) {\n            for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                alledges.push({\n                    id: n.id + n.wires[widx][xidx],\n                    sources: [n.id],\n                    targets: [n.wires[widx][xidx]]\n                });\n            }\n        }\n    })\n\n    allnodes = allnodes.map((n) => {\n        return {\n            id: n.id,\n            width: document.getElementById(n.id).getBBox().width + 3,\n            height: document.getElementById(n.id).getBBox().height + 3,\n        }\n    });\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'mrtree',\n            'childAreaHeight': 4500,\n            'childAreaWidth': 4500,\n            \"org.eclipse.elk.direction\": \"RIGHT\",\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            var changedNodes = [];\n\n            g.children.forEach((c) => {\n                var nd = RED.nodes.node(c.id);\n\n                changedNodes.push({\n                    n: nd,\n                    ox: nd.x,\n                    oy: nd.y,\n                    moved: nd.moved\n                });\n\n                nd.x = c.x;\n                nd.y = c.y;\n                nd.dirty = true;\n            });\n\n            RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n            RED.nodes.dirty(true);\n            RED.view.redraw(true);\n\n            node.send({ type: \"ok\", payload: g })\n        })\n        .catch((g) => { node.send({ type: \"error\", payload: g }) });\n\n}\ndoIt();\n","format":"javascript","x":224,"y":324,"wires":[["fdd29440a0cd8efa"]]},{"id":"2f815def5c9ceee8","type":"inject","z":"291e3f0b7f652839","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":176,"y":207,"wires":[["7bc2c8b4fef8a87e"]]},{"id":"fdd29440a0cd8efa","type":"debug","z":"291e3f0b7f652839","name":"debug 26","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":234,"y":388,"wires":[]},{"id":"05534e3b006dad20","type":"inject","z":"291e3f0b7f652839","name":"set RSS url","props":[{"p":"url","v":"https://flows.flowhub.org/feed.xml","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":943.25,"y":929,"wires":[["3e4f153eee015ca8"]]},{"id":"3e4f153eee015ca8","type":"http request","z":"291e3f0b7f652839","name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","persist":false,"insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1285.25,"y":954,"wires":[["80878b57a4a7b987"]]},{"id":"80878b57a4a7b987","type":"xml","z":"291e3f0b7f652839","name":"parse feed.xml","property":"payload","attr":"","chr":"","x":1242.25,"y":1014,"wires":[["d09f478e227e15cb"]]},{"id":"d9dbc40774430342","type":"split","z":"291e3f0b7f652839","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1183.25,"y":870,"wires":[["df39eeb7ede52617"]]},{"id":"d09f478e227e15cb","type":"change","z":"291e3f0b7f652839","name":"set payload and define fake tab Z id","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.feed.entry","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1144.25,"y":1051,"wires":[["d9dbc40774430342"]]},{"id":"df39eeb7ede52617","type":"function","z":"291e3f0b7f652839","name":"convert xml object to flow object","func":"msg.payload = {\n    \"id\": msg.payload.id[0].match(/.{16}$/)[0],\n    \"type\": \"comment\",\n    \"name\": msg.payload.title[0][\"_\"],\n    \"info\": msg.payload.id[0],\n    \"x\": 801 * Math.random(),\n    \"y\": 699 * Math.random(),\n    \"wires\": [\n    ]\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1251.25,"y":992,"wires":[["f904e5d7dfd0929c"]]},{"id":"f904e5d7dfd0929c","type":"join","z":"291e3f0b7f652839","name":"","mode":"auto","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1240.25,"y":1020,"wires":[["c6d8a513b8218670"]]},{"id":"c6d8a513b8218670","type":"function","z":"291e3f0b7f652839","name":"prepend the subflow to the nodes array","func":"msg.payload = {\n    flowContent: msg.payload,\n    removeduplicates: true,\n    autoimport: false\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1247.25,"y":970,"wires":[["0c8bccda071ba88a"]]},{"id":"0c8bccda071ba88a","type":"ClientCode","z":"291e3f0b7f652839","name":"Open import dialog","clientcode":"function doIt() {\n  var content = payload.flowContent;\n\n  if (payload.removeduplicates) {\n    content = content.filter((elem) => {\n      return RED.nodes.node(elem.id) == undefined\n    });\n  }\n\n  if (content.length == 0) {\n    RED.notify(\"No new content\", {\n      type: \"ok\",\n      id: \"TriggerImport\",\n      timeout: 2000\n    });\n    return;\n  }\n  RED.clipboard.import();\n\n  setTimeout(() => {\n    $('#red-ui-clipboard-dialog-import-text').val(\n      JSON.stringify(content)\n    ).trigger(\"paste\");\n\n    if (payload.autoimport) {\n      setTimeout(() => {\n        $('#red-ui-clipboard-dialog-ok').trigger('click');\n      }, 435);\n    }\n  }, 300);\n};\n\ndoIt();\n","format":"javascript","x":1321,"y":983.20849609375,"wires":[[]]},{"id":"c320cb70c5bfbe4a","type":"inject","z":"291e3f0b7f652839","name":"1. select me!","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":398.999948501587,"y":1244.000147819519,"wires":[["bfe94f70f628c689"]]},{"id":"bfe94f70f628c689","type":"switch","z":"291e3f0b7f652839","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":521.8570747375489,"y":1205.4287366867065,"wires":[["f40c37c12f099df4","2fafc08fdbb02db8","6bd42b145ad99bb1"]]},{"id":"f40c37c12f099df4","type":"change","z":"291e3f0b7f652839","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":594.7142562866212,"y":1266.857343673706,"wires":[["f780d1657f149243","b946dcd1a11d761a"]]},{"id":"2fafc08fdbb02db8","type":"debug","z":"291e3f0b7f652839","name":"debug 23","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":556.1427841186525,"y":1175.4286661148071,"wires":[]},{"id":"f780d1657f149243","type":"switch","z":"291e3f0b7f652839","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":604.7142066955568,"y":1219.7144513130188,"wires":[["33807c37c1f6faea"]]},{"id":"6bd42b145ad99bb1","type":"link out","z":"291e3f0b7f652839","name":"link out 1","mode":"link","links":[],"x":648.999933242798,"y":1218.2858428955078,"wires":[]},{"id":"b946dcd1a11d761a","type":"debug","z":"291e3f0b7f652839","name":"debug 24","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":601.8571014404298,"y":1268.2858781814575,"wires":[]},{"id":"33807c37c1f6faea","type":"template","z":"291e3f0b7f652839","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"This is the payload: {{payload}} !","output":"str","x":577.5713653564454,"y":1192.571611404419,"wires":[[]]},{"id":"a286b57446e4e2ba","type":"inject","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"layout options","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":145,"y":672,"wires":[["22f45a5b47b1a6ef"]]},{"id":"6651c4800ee8569e","type":"ClientCode","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"elkjs: possible layout options","clientcode":"const elk = new ELK();\n\nelk.knownLayoutOptions().then( (pload) => {\n    node.send({\n        topic: \"Layout options\",\n        payload: pload\n    })\n});","format":"javascript","x":453,"y":683,"wires":[["4ba8fd83db2b2fe3"]]},{"id":"4ba8fd83db2b2fe3","type":"debug","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"debug 27","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":777,"y":682,"wires":[]},{"id":"1e7f8b2c254e4d60","type":"link in","z":"291e3f0b7f652839","name":"load elkjs","links":[],"x":727,"y":71,"wires":[["821ed929c72480b8"]]},{"id":"821ed929c72480b8","type":"ClientCode","z":"291e3f0b7f652839","name":"load elkjs","clientcode":"/* \n    Source:\n    https://stackoverflow.com/questions/14644558/call-javascript-function-after-script-is-loaded\n*/\nfunction loadScript(url, callback) {\n    var script = document.createElement(\"script\")\n    script.type = \"text/javascript\";\n\n    if (script.readyState) {  // only required for IE <9\n        script.onreadystatechange = function () {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                script.onreadystatechange = null;\n                callback();\n            }\n        };\n    } else {  //Others\n        script.onload = function () {\n            callback();\n        };\n    }\n\n    script.src = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n}\n\nloadScript(\"https://cdn.openmindmap.org/thirdparty/elk.bundled.js\", () => {\n    node.send({\n        topic: topic,\n        payload: payload\n    })\n})\n","format":"javascript","x":873,"y":71,"wires":[["4396339926a3894b"]]},{"id":"4396339926a3894b","type":"link out","z":"291e3f0b7f652839","name":"link out 2","mode":"return","links":[],"x":1015,"y":71,"wires":[]},{"id":"22f45a5b47b1a6ef","type":"link call","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"","links":["1e7f8b2c254e4d60"],"linkType":"static","timeout":"30","x":192,"y":615,"wires":[["6651c4800ee8569e","ddab9c692f5f0527","88d0f0188a94d75c"]]},{"id":"ddab9c692f5f0527","type":"ClientCode","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"elkjs: possible known layout algorithm","clientcode":"const elk = new ELK();\n\nelk.knownLayoutAlgorithms().then( (pload) => {\n    node.send({\n        topic: \"Layout Algorithm\",\n        payload: pload\n    })\n});","format":"javascript","x":455,"y":733,"wires":[["4ba8fd83db2b2fe3"]]},{"id":"88d0f0188a94d75c","type":"ClientCode","z":"291e3f0b7f652839","g":"b837d7ebd1ec9e0a","name":"elkjs: possible known Layout Categories","clientcode":"const elk = new ELK();\n\nelk.knownLayoutCategories().then( (pload) => {\n    node.send({\n        payload: pload\n    })\n});","format":"javascript","x":452,"y":775,"wires":[["4ba8fd83db2b2fe3"]]},{"id":"7bc2c8b4fef8a87e","type":"link call","z":"291e3f0b7f652839","name":"","links":["1e7f8b2c254e4d60"],"linkType":"static","timeout":"30","x":217,"y":263,"wires":[["38e96bc44d6425fe"]]},{"id":"a49fd18a78ee194b","type":"ClientCode","z":"291e3f0b7f652839","name":"using elkjs - algorithm: layered - Direction: DOWN","clientcode":"function doIt() {\n    var selection = RED.view.selection();\n    console.log(selection)\n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n\n    var ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n\n    // Convert nodes to flows.json format since all the wires, i.e. links, are \n    // contained in one simple json format.\n    var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n        return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n    });\n\n    var alledges = [];\n    allnodes.forEach((n) => {\n        for (var widx = 0; widx < n.wires.length; widx++) {\n            for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                alledges.push({\n                    id: n.id + n.wires[widx][xidx],\n                    sources: [n.id],\n                    targets: [n.wires[widx][xidx]]\n                });\n            }\n        }\n    })\n\n    allnodes = allnodes.map((n) => {\n        return {\n            id: n.id,\n            width: document.getElementById(n.id).getBBox().width + 3,\n            height: document.getElementById(n.id).getBBox().height + 3,\n        }\n    });\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'org.eclipse.elk.layered',\n            \"elk.direction\": \"DOWN\",\n            \"cycleBreaking.strategy\": \"INTERACTIVE\",\n            \"layering.strategy\": \"INTERACTIVE\",\n            \"crossingMinimization.semiInteractive\": true,\n            \"separateConnectedComponents\": true,\n            \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n            \"spacing.nodeNode\": 70,\n            \"spacing.nodeNodeBetweenLayers\": 25,\n            \"spacing.edgeNode\": 25,\n            \"spacing.edgeNodeBetweenLayers\": 20,\n            \"spacing.edgeEdge\": 20,\n            \"spacing.edgeEdgeBetweenLayers\": 15,\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            var changedNodes = [];\n\n            g.children.forEach((c) => {\n                var nd = RED.nodes.node(c.id);\n\n                changedNodes.push({\n                    n: nd,\n                    ox: nd.x,\n                    oy: nd.y,\n                    moved: nd.moved\n                });\n\n                nd.x = c.x;\n                nd.y = c.y;\n                nd.dirty = true;\n            });\n\n            RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n            RED.nodes.dirty(true);\n            RED.view.redraw(true);\n\n            node.send({ type: \"ok\", payload: g })\n        })\n        .catch((g) => { node.send({ type: \"error\", payload: g }) });\n\n}\ndoIt();\n","format":"javascript","x":604,"y":244,"wires":[[]]},{"id":"e258faac0b3c11b3","type":"inject","z":"291e3f0b7f652839","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":518,"y":149,"wires":[["dea2e4ec5dd18b46"]]},{"id":"dea2e4ec5dd18b46","type":"link call","z":"291e3f0b7f652839","name":"","links":["1e7f8b2c254e4d60"],"linkType":"static","timeout":"30","x":609,"y":197,"wires":[["a49fd18a78ee194b"]]},{"id":"cb5a53e2b8051b25","type":"inject","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"1. select me!","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":185,"y":1866,"wires":[["302d5bde5f51fabc"]]},{"id":"aa6bd255356743e5","type":"ClientCode","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"layout selection - https://github.com/node-red/node-red/pull/2267/files","clientcode":"function layoutFlow() {\n\n    var selection = RED.view.selection();\n    console.log(selection)\n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n    var ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n\n    // Find Input node\n\n    var nodes = {};\n    var minRank = 0;\n    var stack = [];\n    var candidateInputs = {};\n    var candidateOutputs = {};\n    ns.forEach(function (n) {\n        candidateInputs[n.id] = n;\n        candidateOutputs[n.id] = n;\n        nodes[n.id] = {\n            n: n,\n            i: [],\n            o: [],\n            d: -1, // depth from start\n            r: -1, // rank order at that depth\n            downstream: 0\n        }\n    });\n    RED.nodes.eachLink(function (link) {\n        if (nodes[link.source.id] || nodes[link.target.id]) {\n            nodes[link.source.id].o.push(link.target.id);\n            nodes[link.target.id].i.push(link.source.id);\n            delete candidateInputs[link.target.id]\n            delete candidateOutputs[link.source.id]\n        }\n    })\n\n    var inputs = Object.keys(candidateInputs);\n    var outputs = Object.keys(candidateOutputs);\n\n    console.log(inputs);\n\n    if (inputs.length > 1) {\n        RED.notify(\"Multiple start points - bailing\")\n        return;\n    }\n\n    if (outputs.length === 0) {\n        RED.notify(\"No outputs - is this a big loop? Bailing\");\n        return;\n    }\n\n    function applyDepth(id, d) {\n        if (nodes[id].d < d) {\n            nodes[id].d = d;\n            nodes[id].o.forEach(function (nid) {\n                applyDepth(nid, d + 1);\n            })\n        }\n    }\n    applyDepth(inputs[0], 0)\n\n    function calculateDownstream(id, downstream) {\n        nodes[id].downstream += downstream;\n        nodes[id].i.forEach(function (nid) {\n            calculateDownstream(nid, nodes[id].downstream + 1);\n        })\n    }\n    outputs.forEach(function (id) {\n        calculateDownstream(id, 0)\n    })\n\n    var ranks = {};\n    function rankNodes(node) {\n        if (node.r === -1) {\n            ranks[node.d] = ranks[node.d] || [];\n            node.r = ranks[node.d].length;\n            ranks[node.d].push(node);\n            node.o.sort(function (a, b) {\n                return nodes[b].downstream - nodes[a].downstream\n            })\n            node.o.forEach(function (nid) {\n                rankNodes(nodes[nid])\n            })\n        }\n    }\n    rankNodes(nodes[inputs[0]]);\n    function shuffleRanks(node) {\n        var pushed = false;\n        if (node.o.length > 1) {\n            var outputs = node.o.slice(0);\n            outputs.sort(function (a, b) {\n                if (nodes[a].d === nodes[b].d) {\n                    return nodes[a].r - nodes[b].r;\n                } else {\n                    return nodes[b].d - nodes[a].d;\n                }\n            })\n            // outputs.forEach(function(o,i) { console.log(\" \",i,\" + \"+nodes[o].n.type,\" d:\",nodes[o].d,\" r:\",nodes[o].r)});\n            var rank = nodes[outputs[0]].r;\n            var depth = nodes[outputs[0]].d;\n            for (var i = 1; i < outputs.length; i++) {\n                // console.log(outputs[i]);\n                var n = nodes[outputs[i]];\n                if (n.d !== depth && n.r === rank) {\n                    // need to move n down one.\n                    var r = n.r;\n                    ns.forEach(function (_n) {\n                        var nn = nodes[_n.id];\n                        if (nn.d >= n.d && nn.d < depth && nn.r >= r) {\n                            pushed = true;\n                            nn.r++;\n                        }\n                    })\n                }\n                depth = n.d;\n                rank = n.r;\n            }\n        }\n        node.o.forEach(function (n) {\n            pushed = pushed || shuffleRanks(nodes[n])\n        })\n        return pushed;\n    }\n    var shuffle = function () {\n        if (shuffleRanks(nodes[inputs[0]])) {\n            shuffle();\n        }\n    }\n    shuffle();\n\n\n    var x = nodes[inputs[0]].n.x;\n    var y = nodes[inputs[0]].n.y;\n    var changedNodes = [];\n    ns.forEach(function (n) {\n        var d = nodes[n.id].d;\n        var r = nodes[n.id].r;\n\n        changedNodes.push({\n            n: n,\n            ox: n.x,\n            oy: n.y,\n            moved: n.moved\n        });\n\n        n.x = x + d * 200;\n        n.y = y + r * 50;\n        n.dirty = true;\n        // n.dirtyStatus = true;\n        // n.status = {\n        //     text:\"d\"+d+\" : r\"+r+\" : ds\"+nodes[n.id].downstream\n        // }\n    });\n\n    if (changedNodes.length > 0) {\n        RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n        RED.nodes.dirty(true);\n        RED.view.redraw(true);\n    }\n\n}\n\nlayoutFlow();","format":"javascript","x":436.14296531677246,"y":2050.5715622901917,"wires":[[]]},{"id":"1d892eeadf2046dc","type":"inject","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":167.28573036193848,"y":1982.2857456207275,"wires":[["aa6bd255356743e5"]]},{"id":"302d5bde5f51fabc","type":"switch","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":307.8571262359619,"y":1827.4285888671875,"wires":[["548748b07b087147","f193184dcf8253dc","826586b2b14b3ca0"]]},{"id":"548748b07b087147","type":"change","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":380.7143077850342,"y":1888.857195854187,"wires":[["c6ff5dc4cfdf9523","d7dbb37676cc0893"]]},{"id":"f193184dcf8253dc","type":"debug","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"debug 29","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":342.14283561706543,"y":1797.428518295288,"wires":[]},{"id":"c6ff5dc4cfdf9523","type":"switch","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":390.7142581939697,"y":1841.7143034934998,"wires":[["4e630cd39c715037"]]},{"id":"826586b2b14b3ca0","type":"link out","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"link out 3","mode":"link","links":[],"x":434.99998474121094,"y":1840.2856950759888,"wires":[]},{"id":"d7dbb37676cc0893","type":"debug","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"debug 30","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":387.8571529388428,"y":1890.2857303619385,"wires":[]},{"id":"4e630cd39c715037","type":"template","z":"291e3f0b7f652839","g":"1959fd7e54417661","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"This is the payload: {{payload}} !","output":"str","x":363.5714168548584,"y":1814.5714635849,"wires":[[]]},{"id":"c686d5d85a9d6b27","type":"ClientCode","z":"291e3f0b7f652839","name":"using elkjs - algorithm: layered, Direction: UP","clientcode":"function doIt() {\n    var selection = RED.view.selection();\n    console.log(selection)\n    if (!selection.nodes || selection.nodes.length !== 1) {\n        RED.notify(\"Select exactly one node\");\n        return;\n    }\n\n    var ns = RED.nodes.getAllFlowNodes(selection.nodes[0]);\n\n    // Convert nodes to flows.json format since all the wires, i.e. links, are \n    // contained in one simple json format.\n    var allnodes = RED.nodes.createExportableNodeSet(ns).filter((n) => {\n        return n.type != \"tab\" && n.type != 'subflow' && n.type != \"group\"\n    });\n\n    var alledges = [];\n    allnodes.forEach((n) => {\n        for (var widx = 0; widx < n.wires.length; widx++) {\n            for (var xidx = 0; xidx < n.wires[widx].length; xidx++) {\n                alledges.push({\n                    id: n.id + n.wires[widx][xidx],\n                    sources: [n.id],\n                    targets: [n.wires[widx][xidx]]\n                });\n            }\n        }\n    })\n\n    allnodes = allnodes.map((n) => {\n        return {\n            id: n.id,\n            width: document.getElementById(n.id).getBBox().width + 3,\n            height: document.getElementById(n.id).getBBox().height + 3,\n        }\n    });\n\n    // see https://github.com/kieler/elkjs#api for more details\n    var graph = {\n        id: \"root\",\n        layoutOptions: {\n            'algorithm': 'org.eclipse.elk.layered',\n            \"elk.direction\": \"UP\",\n            \"cycleBreaking.strategy\": \"INTERACTIVE\",\n            \"layering.strategy\": \"INTERACTIVE\",\n            \"crossingMinimization.semiInteractive\": true,\n            \"separateConnectedComponents\": true,\n            \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n            \"spacing.nodeNode\": 70,\n            \"spacing.nodeNodeBetweenLayers\": 25,\n            \"spacing.edgeNode\": 25,\n            \"spacing.edgeNodeBetweenLayers\": 20,\n            \"spacing.edgeEdge\": 20,\n            \"spacing.edgeEdgeBetweenLayers\": 15,\n        },\n        children: allnodes,\n        edges: alledges\n    };\n\n    const elk = new ELK();\n\n    elk.layout(graph)\n        .then((g) => {\n            var changedNodes = [];\n\n            g.children.forEach((c) => {\n                var nd = RED.nodes.node(c.id);\n\n                changedNodes.push({\n                    n: nd,\n                    ox: nd.x,\n                    oy: nd.y,\n                    moved: nd.moved\n                });\n\n                nd.x = c.x;\n                nd.y = c.y;\n                nd.dirty = true;\n            });\n\n            RED.history.push({ t: \"move\", nodes: changedNodes, dirty: RED.nodes.dirty() });\n            RED.nodes.dirty(true);\n            RED.view.redraw(true);\n\n            node.send({ type: \"ok\", payload: g })\n        })\n        .catch((g) => { node.send({ type: \"error\", payload: g }) });\n\n}\ndoIt();\n","format":"javascript","x":1024,"y":305,"wires":[[]]},{"id":"97a82d5af6cb8131","type":"inject","z":"291e3f0b7f652839","name":"2. press me","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1102,"y":216,"wires":[["0d7c69f4ed580816"]]},{"id":"0d7c69f4ed580816","type":"link call","z":"291e3f0b7f652839","name":"","links":["1e7f8b2c254e4d60"],"linkType":"static","timeout":"30","x":1023,"y":260,"wires":[["c686d5d85a9d6b27"]]}]