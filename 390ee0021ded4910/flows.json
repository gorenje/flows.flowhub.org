[{"id":"390ee0021ded4910","type":"tab","label":"[GitHub] base functionality","disabled":false,"info":"::: aim\n\nA series of GitHub functions for interacting with a github repository via their REST API. \n\nThe aim is to commit content to a github repo *without* have a local copy of it. This is designed to work on a server without any storage.\n\nCode ideas taken from this [stackoverflow answer](https://stackoverflow.com/questions/11801983/how-to-create-a-commit-and-push-into-repo-with-github-api-v3). More at [GitHub API documentation](https://docs.github.com/en/rest/git/trees?apiVersion=2022-11-28).\n\n:::\n\n### Environment variables\n\n- `GITHUB_TOKEN` which can be created in ones user account. The github token is a classic personal token, the new fine-grain token does not seem to work with @octokit. All the permissions needed on the token is \"repo\" (with all sub-options).\n\nToken can be created at [https://github.com/settings/tokens](https://github.com/settings/tokens) but classic token is **required**.\n\n::: prereq\n\n- [@octokit/rest](https://www.npmjs.com/package/@octokit/rest) - [doco](https://octokit.github.io/rest.js/v19/#git)\n\n:::\n\n### Notes\n\nSome explanations about this flow\n\n- The flow is basically just a wrapper around the basic API with the intention that these calls are chained together. Each function has a link-in node as input and output is a link-out node in return mode, this means they should be used in conjunction with link-call nodes.\n\n- Each function node is stateless except for the API authentication using `GITHUB_TOKEN`. State should be maintained in the message of the complete flow.\n\n- The `sha` value has an implicit type. There are `sha`s that are blob ids (`get blob for sha` requires a blob sha). Get tree for sha requires a tree sha. This can get confusing sometimes. One cannot identify the type from the sha value, i.e., there aren't prefixes on shas.\n\n- @octokit/rest requires NodeJS >=18, the default Node-RED 3.0.2 [docker image](https://hub.docker.com/layers/nodered/node-red/3.0.2/images/sha256-e2cd6b89e18361593276e3ef5282b403e0879040c96d3099c15e8f0200a36339?context=explore) uses 16 but there an [version 18 docker image](https://hub.docker.com/layers/nodered/node-red/3.0.2-18/images/sha256-9ebd4d044c07177dbef1f90781ed4f788a2c85bc37cf467a3685f5f94d265a3b?context=explore).\n\n### Example Usage\n\n- [get all commits for repo](https://flowhub.org/f/ebc05a6d47a9a190)\n- [get file contents for various versions](https://flowhub.org/f/d104825b996e7cef)\n- [single file commit with change check](https://flowhub.org/f/31ea3193ec1a2117)\n","env":[]},{"id":"9ad713be26ac2025","type":"function","z":"390ee0021ded4910","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":682,"y":583.625,"wires":[["30c0f36427ec6c9d"]]},{"id":"f8774c1c32f1631d","type":"function","z":"390ee0021ded4910","name":"current repo revision (sha)","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: branch name\n * \n * Return:\n *   - payload: current revision of repo\n * \n * Source:\n *   - https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/branches/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.commit.sha})\n    }).catch(function (e) {\n        node.error(\"obtaining latest sha\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":712,"y":308,"wires":[["30c0f36427ec6c9d"]]},{"id":"c90bd91e45e1ac7e","type":"link in","z":"390ee0021ded4910","name":"[github] current repo version","links":[],"x":477,"y":174.99996337890627,"wires":[["f8774c1c32f1631d"]]},{"id":"30c0f36427ec6c9d","type":"link out","z":"390ee0021ded4910","name":"link out 91","mode":"return","links":[],"x":1200,"y":1043,"wires":[]},{"id":"43d3a872c31bb664","type":"link in","z":"390ee0021ded4910","name":"[github] get tree for sha","links":[],"x":477,"y":549.6249771118164,"wires":[["9ad713be26ac2025"]]},{"id":"ef98698a4b696e66","type":"function","z":"390ee0021ded4910","name":"create blob","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: base64 encoded content for blob\n * \n * Return:\n *   - payload: sha of newly created blob\n */\n\ntry {\n\n    octokit.request(\"POST /repos/:owner/:repo/git/blobs\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        content: msg.payload,\n        encoding: \"base64\"\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.sha})\n    }).catch(function (e) {\n        node.error(\"creating blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":672,"y":675.5,"wires":[["30c0f36427ec6c9d"]]},{"id":"5226230f86c9c784","type":"function","z":"390ee0021ded4910","name":"create tree for blobs","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: array of blobs, each blob is an object with:\n *         - path: filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n *         - sha: the sha of the blob created initially using the create blob function\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n * \n * Return:\n *   - payload: sha of newly created tree\n */\n\ntry {\n    var tree = msg.payload.map(function(blb){\n        return {\n            ...blb,\n            mode: \"100644\",\n            type: \"blob\"\n        }\n    });\n\n    octokit.request(\"POST /repos/:owner/:repo/git/trees\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        base_tree: msg.parent_sha,\n        tree: tree\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n    \n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":702,"y":767.375,"wires":[["30c0f36427ec6c9d"]]},{"id":"e68b9f9bac76350a","type":"function","z":"390ee0021ded4910","name":"create commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: the sha of the tree to commit\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n *   - author: an object with the following:\n *      - name: name of the author of the commit\n *      - email: email of the author of the commit\n *   - message: commit message\n * \n * Return:\n *   - payload: sha of newly commit\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,        \n        message: msg.message,\n        author: {\n            name: msg.author.name,\n            email: msg.author.email\n        },\n        parents: [\n            msg.parent_sha\n        ],\n        tree: msg.payload\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":682,"y":859.25,"wires":[["30c0f36427ec6c9d"]]},{"id":"08d2d7135f31a878","type":"link in","z":"390ee0021ded4910","name":"[github] create blobs","links":[],"x":477,"y":674.4999816894531,"wires":[["ef98698a4b696e66"]]},{"id":"78d886e3f8af26b7","type":"link in","z":"390ee0021ded4910","name":"[github] create tree from blobs","links":[],"x":477,"y":799.3749862670898,"wires":[["5226230f86c9c784"]]},{"id":"ab95f13fbc3a2d5b","type":"link in","z":"390ee0021ded4910","name":"[github] create commit","links":[],"x":477,"y":924.2499908447264,"wires":[["e68b9f9bac76350a"]]},{"id":"2df1a9a310e8a9fd","type":"link in","z":"390ee0021ded4910","name":"[github] update branch head","links":[],"x":477,"y":1174,"wires":[["eea2441a833743f5"]]},{"id":"2b9bbf6e57664c43","type":"function","z":"390ee0021ded4910","name":"get commits for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha for which the commits are desired\n * \n * Return:\n *   - payload: commits for sha\n * \n * Source: https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#get-a-commit-object\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/commits/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":702,"y":399.875,"wires":[["30c0f36427ec6c9d"]]},{"id":"dbdea53966e72031","type":"link in","z":"390ee0021ded4910","name":"[github] get commits for sha","links":[],"x":477,"y":299.87496795654306,"wires":[["2b9bbf6e57664c43"]]},{"id":"c938363b5f63d0b7","type":"function","z":"390ee0021ded4910","name":"get blob for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: file sha for which the contents are desired\n * \n * Return:\n *   - payload: base64 contents in a hash object\n * \n *  Source: https://docs.github.com/en/rest/git/blobs?apiVersion=2022-11-28#get-a-blob\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/blobs/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":682,"y":491.75,"wires":[["30c0f36427ec6c9d"]]},{"id":"937f9c72251daebf","type":"link in","z":"390ee0021ded4910","name":"[github] get blob for sha","links":[],"x":477,"y":424.74997253417973,"wires":[["c938363b5f63d0b7"]]},{"id":"eea2441a833743f5","type":"function","z":"390ee0021ded4910","name":"updating head on repo at branch - aka committing commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github repo branch to update with the new commit sha\n *   - payload: the sha of the commit created\n * \n * Return:\n *   - payload: new sha of the branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference\n */\n\ntry {\n    msg.new_commit_sha = msg.payload;\n\n    octokit.request(\"PATCH /repos/:owner/:repo/git/refs/heads/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n        sha: msg.payload\n    }).then(function (resp) {\n        node.send({ \n            ...msg, \n            payload: resp.data.object.sha,\n        })\n    }).catch(function (e) {\n        node.error(\"committing commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":820,"y":1043,"wires":[["30c0f36427ec6c9d"]]},{"id":"d5567c053d6f5e08","type":"function","z":"390ee0021ded4910","name":"create branch","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: name for the new branch\n *   - commit_sha: the commit sha to which the branch should point\n * \n * Return:\n *   - payload: sha of newly created branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/refs\", {\n        owner: msg.owner,\n        repo:  msg.repo,\n        ref:   \"refs/heads/\" + msg.branch,\n        sha:   msg.commit_sha        \n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.object.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":684,"y":951.125,"wires":[["30c0f36427ec6c9d"]]},{"id":"db7421f5a47b8c6b","type":"link in","z":"390ee0021ded4910","name":"[github] create branch","links":[],"x":477,"y":1049.124995422363,"wires":[["d5567c053d6f5e08"]]}]