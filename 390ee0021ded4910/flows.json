[{"id":"390ee0021ded4910","type":"tab","label":"[GitHub] base functionality","disabled":false,"info":"::: aim\n\nA series of GitHub functions for interacting with a github repository via their REST API. \n\nThe aim is to commit content to a github repo *without* have a local copy of it. This is designed to work on a server without any storage.\n\nCode ideas taken from this [stackoverflow answer](https://stackoverflow.com/questions/11801983/how-to-create-a-commit-and-push-into-repo-with-github-api-v3). More at [GitHub API documentation](https://docs.github.com/en/rest/git/trees?apiVersion=2022-11-28).\n\n:::\n\n::: requirements \n\n- [holistic json validation node](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-validation-and-documentation)\n\n:::\n\n\n### Environment variables\n\n- `GITHUB_TOKEN` which can be created in ones user account. The github token is a classic personal token, the new fine-grain token does not seem to work with @octokit. All the permissions needed on the token is \"repo\" (with all sub-options).\n\nToken can be created at [https://github.com/settings/tokens](https://github.com/settings/tokens) but classic token is **required**.\n\n::: prereq\n\n- [@octokit/rest](https://www.npmjs.com/package/@octokit/rest) - [doco](https://octokit.github.io/rest.js/v19/#git)\n\n:::\n\n### Notes\n\nSome explanations about this flow\n\n- The flow is basically just a wrapper around the basic API with the intention that these calls are chained together. Each function has a link-in node as input and output is a link-out node in return mode, this means they should be used in conjunction with link-call nodes.\n\n- Each function node is stateless except for the API authentication using `GITHUB_TOKEN`. State should be maintained in the message of the complete flow.\n\n- The `sha` value has an implicit type. There are `sha`s that are blob ids (`get blob for sha` requires a blob sha). Get tree for sha requires a tree sha. This can get confusing sometimes. One cannot identify the type from the sha value, i.e., there aren't prefixes on shas.\n\n- @octokit/rest requires NodeJS >=18, the default Node-RED 3.0.2 [docker image](https://hub.docker.com/layers/nodered/node-red/3.0.2/images/sha256-e2cd6b89e18361593276e3ef5282b403e0879040c96d3099c15e8f0200a36339?context=explore) uses 16 but there an [version 18 docker image](https://hub.docker.com/layers/nodered/node-red/3.0.2-18/images/sha256-9ebd4d044c07177dbef1f90781ed4f788a2c85bc37cf467a3685f5f94d265a3b?context=explore).\n\n### Example Usage\n\n- [get all commits for repo](https://flowhub.org/f/ebc05a6d47a9a190)\n- [get file contents for various versions](https://flowhub.org/f/d104825b996e7cef)\n- [single file commit with change check](https://flowhub.org/f/31ea3193ec1a2117)\n","env":[]},{"id":"d8867a43abe7260c","type":"group","z":"390ee0021ded4910","name":"Entry points","style":{"fill":"#c8e7a7","fill-opacity":"0.77","label":true},"nodes":["c90bd91e45e1ac7e","43d3a872c31bb664","08d2d7135f31a878","78d886e3f8af26b7","ab95f13fbc3a2d5b","2df1a9a310e8a9fd","dbdea53966e72031","937f9c72251daebf","db7421f5a47b8c6b","dd62847c663f56d7","103190c06a394858","0ef17281d357e763"],"x":11,"y":299,"w":83,"h":684},{"id":"c0ebd0b2b56177f1","type":"group","z":"390ee0021ded4910","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["7a895e24d4de84d9","e5dc3aa0a674b03c","ebffaa284c832dca"],"x":386,"y":30,"w":401,"h":126},{"id":"43a3861658e2276d","type":"group","z":"390ee0021ded4910","name":"Example flows","style":{"label":true},"nodes":["2ed75117729fdf58","cb18d203e8710c1e","31fec03a605eafb9"],"x":19,"y":25,"w":332,"h":179},{"id":"9ad713be26ac2025","type":"function","z":"390ee0021ded4910","name":"get tree for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha of tree (i.e. directory)\n *   - recursive: if set to a true value, entire directory tree is retrieved.\n * \n * Return:\n *   - payload: tree of the sha, this will be an array with one entry per member of tree\n */\n\ntry {\n    \n    octokit.request(\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\" + (msg.recursive ? \"?recursive=true\" : \"\"), {\n        owner: msg.owner,\n        repo: msg.repo,\n        tree_sha: msg.payload\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.tree})\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":619.5,"wires":[["30c0f36427ec6c9d"]]},{"id":"f8774c1c32f1631d","type":"function","z":"390ee0021ded4910","name":"current repo revision (sha)","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: branch name\n * \n * Return:\n *   - payload: current revision of repo\n * \n * Source:\n *   - https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/branches/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.commit.sha})\n    }).catch(function (e) {\n        node.error(\"obtaining latest sha\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":314.4,"wires":[["30c0f36427ec6c9d"]]},{"id":"c90bd91e45e1ac7e","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] current repo version","links":[],"x":52,"y":449.4545454545455,"wires":[["4713ed2a5771c709"]]},{"id":"30c0f36427ec6c9d","type":"link out","z":"390ee0021ded4910","name":"link out 91","mode":"return","links":[],"x":4764,"y":559,"wires":[]},{"id":"43d3a872c31bb664","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] get tree for sha","links":[],"x":52,"y":613.6363636363637,"wires":[["408b860d7879f89c"]]},{"id":"ef98698a4b696e66","type":"function","z":"390ee0021ded4910","name":"create blob","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: base64 encoded content for blob\n * \n * Return:\n *   - payload: sha of newly created blob\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/blobs\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        content: msg.payload,\n        encoding: \"base64\"\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data.sha})\n    }).catch(function (e) {\n        node.error(\"creating blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":721.2,"wires":[["30c0f36427ec6c9d"]]},{"id":"5226230f86c9c784","type":"function","z":"390ee0021ded4910","name":"create tree for blobs","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: array of blobs, each blob is an object with:\n *         - path: filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n *         - sha: the sha of the blob created initially using the create blob function\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n * \n * Return:\n *   - payload: sha of newly created tree\n */\n\ntry {\n    var tree = msg.payload.map(function(blb){\n        return {\n            ...blb,\n            mode: \"100644\",\n            type: \"blob\"\n        }\n    });\n\n    octokit.request(\"POST /repos/:owner/:repo/git/trees\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        base_tree: msg.parent_sha,\n        tree: tree\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n    \n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":822.9000000000001,"wires":[["30c0f36427ec6c9d"]]},{"id":"e68b9f9bac76350a","type":"function","z":"390ee0021ded4910","name":"create commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: the sha of the tree to commit\n *   - parent_sha: the current sha of the repo, the return value of current repo revision\n *   - author: an object with the following:\n *      - name: name of the author of the commit\n *      - email: email of the author of the commit\n *   - message: commit message\n * \n * Return:\n *   - payload: sha of newly commit\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,        \n        message: msg.message,\n        author: {\n            name: msg.author.name,\n            email: msg.author.email\n        },\n        parents: [\n            msg.parent_sha\n        ],\n        tree: msg.payload\n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.sha })\n    }).catch(function (e) {\n        node.error(\"creating commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":924.6000000000001,"wires":[["30c0f36427ec6c9d"]]},{"id":"08d2d7135f31a878","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] create blobs","links":[],"x":52,"y":723.0909090909092,"wires":[["7c3fe9a0f9a5d116"]]},{"id":"78d886e3f8af26b7","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] create tree from blobs","links":[],"x":52,"y":777.818181818182,"wires":[["11323362e3b3b610"]]},{"id":"ab95f13fbc3a2d5b","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] create commit","links":[],"x":52,"y":832.5454545454547,"wires":[["95d98a954009c592"]]},{"id":"2df1a9a310e8a9fd","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] update branch head","links":[],"x":52,"y":942,"wires":[["d44314ead24db3dd"]]},{"id":"2b9bbf6e57664c43","type":"function","z":"390ee0021ded4910","name":"get commits for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: sha for which the commits are desired\n * \n * Return:\n *   - payload: commits for sha\n * \n * Source: https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#get-a-commit-object\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/commits/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":416.09999999999997,"wires":[["30c0f36427ec6c9d"]]},{"id":"dbdea53966e72031","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] get commits for sha","links":[],"x":52,"y":504.18181818181824,"wires":[["da8c6adda1cfc8ab"]]},{"id":"c938363b5f63d0b7","type":"function","z":"390ee0021ded4910","name":"get blob for sha","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - payload: file sha for which the contents are desired\n * \n * Return:\n *   - payload: base64 contents in a hash object\n * \n *  Source: https://docs.github.com/en/rest/git/blobs?apiVersion=2022-11-28#get-a-blob\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/git/blobs/:sha\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        sha: msg.payload,\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining blob\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":517.8,"wires":[["30c0f36427ec6c9d"]]},{"id":"937f9c72251daebf","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] get blob for sha","links":[],"x":52,"y":558.909090909091,"wires":[["767a763df78e22c2"]]},{"id":"eea2441a833743f5","type":"function","z":"390ee0021ded4910","name":"updating head on repo at branch - aka committing commit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github repo branch to update with the new commit sha\n *   - payload: the sha of the commit created\n * \n * Return:\n *   - payload: new sha of the branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference\n */\n\ntry {\n    msg.new_commit_sha = msg.payload;\n\n    octokit.request(\"PATCH /repos/:owner/:repo/git/refs/heads/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch,\n        sha: msg.payload\n    }).then(function (resp) {\n        node.send({ \n            ...msg, \n            payload: resp.data.object.sha,\n        })\n    }).catch(function (e) {\n        node.error(\"committing commit\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":1128,"wires":[["30c0f36427ec6c9d"]]},{"id":"d5567c053d6f5e08","type":"function","z":"390ee0021ded4910","name":"create branch","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: name for the new branch\n *   - payload: the commit sha to which the branch should point\n * \n * Return:\n *   - payload: sha of newly created branch\n * \n * Source:\n *   - https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n */\n\ntry {\n    \n    octokit.request(\"POST /repos/:owner/:repo/git/refs\", {\n        owner: msg.owner,\n        repo:  msg.repo,\n        ref:   \"refs/heads/\" + msg.branch,\n        sha:   msg.payload        \n    }).then((resp) => {\n        node.send({ ...msg, payload: resp.data.object.sha })\n    }).catch(function (e) {\n        node.error(\"creating branch\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":1026.3000000000002,"wires":[["30c0f36427ec6c9d"]]},{"id":"db7421f5a47b8c6b","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] create branch","links":[],"x":52,"y":887.2727272727275,"wires":[["49b85dee232ea13d"]]},{"id":"851ddca0f7095545","type":"catch","z":"390ee0021ded4910","name":"","scope":null,"uncaught":false,"x":931,"y":113,"wires":[["a897f9ccdde4861b"]]},{"id":"a897f9ccdde4861b","type":"debug","z":"390ee0021ded4910","name":"error collector","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":950,"y":63,"wires":[]},{"id":"5c01103c8fe0e13c","type":"function","z":"390ee0021ded4910","name":"get commits for repo","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - page: page number, per_page = 100 commits\n * \n * Return:\n *   - commits: list of commits (max. 100)\n * \n * Source: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-commits\n */\n\ntry {\n\n    octokit.request(\"GET /repos/:owner/:repo/commits\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        per_page: 100,\n        page: msg.page\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":212.7,"wires":[["30c0f36427ec6c9d"]]},{"id":"dd62847c663f56d7","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] get repo commits","links":[],"x":52,"y":394.72727272727275,"wires":[["e93613e78950fa33"]]},{"id":"3efbe319bc36503c","type":"function","z":"390ee0021ded4910","name":"get ratelimit","func":"try {\n    var octokit = new octokitRest.Octokit({\n        auth: process.env.GITHUB_TOKEN\n    });\n} catch (e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n * \n * Return:\n *   - ratelimits in the header\n * \n * Source: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limit-headers\n */\n\ntry {\n\n    octokit.request(\"GET /rate_limit\", {\n        owner: msg.owner,\n    }).then((resp) => {\n        node.send({\n            ...msg, payload: Object.keys(resp.headers).filter((d) => {\n                return d.startsWith(\"x-ratelimit\")\n            }).map((k) => {\n                return [k, resp.headers[k]]\n            }).reduce((o, c) => {\n                o[c[0]] = c[1]\n                return o\n            }, {})\n        })\n    }).catch(function (e) {\n        node.error(\"obtaining commits\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"request failure\", { ...msg, error: e })\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1319,"y":111,"wires":[["30c0f36427ec6c9d"]]},{"id":"103190c06a394858","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] ratelimit status","links":[],"x":52,"y":340,"wires":[["b92c5877946c93dd"]]},{"id":"0ef17281d357e763","type":"link in","z":"390ee0021ded4910","g":"d8867a43abe7260c","name":"[github] get entire tree for sha","links":[],"x":52,"y":668.3636363636365,"wires":[["674c7f03c6256a49"]]},{"id":"f661479e66140edb","type":"change","z":"390ee0021ded4910","name":"","rules":[{"t":"set","p":"recursive","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":1053,"y":660,"wires":[["9ad713be26ac2025"]]},{"id":"7a895e24d4de84d9","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","g":"c0ebd0b2b56177f1","name":"Ensure GITHUB_TOKEN","property":"","propertyType":"env","checkentireobject":true,"func":"{\n    \"title\": \"Environment check for GitHub\",\n    \"type\": \"object\",\n    \"required\": [\n        \"GITHUB_TOKEN\"\n    ],\n    \"properties\": {\n        \"GITHUB_TOKEN\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub authentication token.\"\n        }\n    }\n}","schematitle":"Environment check for GitHub","x":585,"y":115,"wires":[["ebffaa284c832dca"]],"info":"## Environment check for GitHub Type\n\n`object` ([Environment check for GitHub](definition.md))\n\n# Environment check for GitHub Properties\n\n| Property                       | Type     | Required | Nullable       | Defined by                                                                                                 |\n| :----------------------------- | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------- |\n| [GITHUB\\_TOKEN](#github_token) | `string` | Required | cannot be null | [Environment check for GitHub](definition-properties-github_token.md \"undefined#/properties/GITHUB_TOKEN\") |\n\n## GITHUB\\_TOKEN\n\nGitHub authentication token.\n\n`GITHUB_TOKEN`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Environment check for GitHub](definition-properties-github_token.md \"undefined#/properties/GITHUB_TOKEN\")\n\n### GITHUB\\_TOKEN Type\n\n`string`\n\n---\n## GITHUB\\_TOKEN Type\n\n`string`\n"},{"id":"e5dc3aa0a674b03c","type":"link in","z":"390ee0021ded4910","g":"c0ebd0b2b56177f1","name":"Ensure GITHUB_TOKEN","links":[],"x":427,"y":71,"wires":[["7a895e24d4de84d9"]]},{"id":"ebffaa284c832dca","type":"link out","z":"390ee0021ded4910","g":"c0ebd0b2b56177f1","name":"link out 92","mode":"return","links":[],"x":746,"y":73,"wires":[]},{"id":"b92c5877946c93dd","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":292,"wires":[["2ba4affb8a71495e"]]},{"id":"da8c6adda1cfc8ab","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":484.81818181818176,"wires":[["14c59415ca2d5dec"]]},{"id":"767a763df78e22c2","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":549.090909090909,"wires":[["9243bc0a46dcb699"]]},{"id":"408b860d7879f89c","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":613.3636363636363,"wires":[["d3233528cc3f4011"]]},{"id":"7c3fe9a0f9a5d116","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":741.9090909090908,"wires":[["75b42d1acdbcc046"]]},{"id":"674c7f03c6256a49","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":677.6363636363635,"wires":[["8f747b04375e1965"]]},{"id":"11323362e3b3b610","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":806.181818181818,"wires":[["f94c88257d071bb5"]]},{"id":"95d98a954009c592","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":870.4545454545453,"wires":[["e1f0b2c6ff35189e"]]},{"id":"49b85dee232ea13d","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":934.7272727272725,"wires":[["8963e4ce4b53be8b"]]},{"id":"d44314ead24db3dd","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":999,"wires":[["d40a2485d4edb3d1"]]},{"id":"2ba4affb8a71495e","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` object for GitHub ratelimit.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        }\n    }\n}","schematitle":"Requirements for `msg` object for GitHub ratelimit.","x":749.5,"y":208,"wires":[["3efbe319bc36503c"]],"info":"## Requirements for \\`msg\\` object for GitHub ratelimit. Type\n\n`object` ([Requirements for \\`msg\\` object for GitHub ratelimit.](definition.md))\n\n# Requirements for \\`msg\\` object for GitHub ratelimit. Properties\n\n| Property        | Type     | Required | Nullable       | Defined by                                                                                                            |\n| :-------------- | :------- | :------- | :------------- | :-------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner) | `string` | Required | cannot be null | [Requirements for \\`msg\\` object for GitHub ratelimit.](definition-properties-owner.md \"undefined#/properties/owner\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` object for GitHub ratelimit.](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n"},{"id":"6b4f811143e877d1","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for get commits for repo.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"page\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"page\": {\n            \"type\": \"integer\",\n            \"description\": \"Pagination page.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for get commits for repo.","x":749.5,"y":285,"wires":[["5c01103c8fe0e13c"]],"info":"## Requirements for \\`msg\\` for get commits for repo. Type\n\n`object` ([Requirements for \\`msg\\` for get commits for repo.](definition.md))\n\n# Requirements for \\`msg\\` for get commits for repo. Properties\n\n| Property        | Type      | Required | Nullable       | Defined by                                                                                                         |\n| :-------------- | :-------- | :------- | :------------- | :----------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner) | `string`  | Required | cannot be null | [Requirements for \\`msg\\` for get commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\") |\n| [repo](#repo)   | `string`  | Required | cannot be null | [Requirements for \\`msg\\` for get commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")   |\n| [page](#page)   | `integer` | Required | cannot be null | [Requirements for \\`msg\\` for get commits for repo.](definition-properties-page.md \"undefined#/properties/page\")   |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get commits for repo.](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get commits for repo.](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## page\n\nPagination page.\n\n`page`\n\n*   is required\n\n*   Type: `integer`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get commits for repo.](definition-properties-page.md \"undefined#/properties/page\")\n\n### page Type\n\n`integer`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## page Type\n\n`integer`\n"},{"id":"2ed75117729fdf58","type":"FlowHubPull","z":"390ee0021ded4910","g":"43a3861658e2276d","name":"","notab":false,"flowid":"ebc05a6d47a9a190","flowname":"[GitHub] get all commits for repo","flowrevision":"","x":185,"y":66,"wires":[[]]},{"id":"cb18d203e8710c1e","type":"FlowHubPull","z":"390ee0021ded4910","g":"43a3861658e2276d","name":"","notab":false,"flowid":"d104825b996e7cef","flowname":"[GitHub] get file contents","flowrevision":"","x":155,"y":114.5,"wires":[[]]},{"id":"31fec03a605eafb9","type":"FlowHubPull","z":"390ee0021ded4910","g":"43a3861658e2276d","name":"","notab":false,"flowid":"31ea3193ec1a2117","flowname":"[GitHub] commit single file","flowrevision":"","x":165,"y":163,"wires":[[]]},{"id":"e93613e78950fa33","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":356.27272727272725,"wires":[["6b4f811143e877d1"]]},{"id":"4713ed2a5771c709","type":"link call","z":"390ee0021ded4910","name":"","links":["e5dc3aa0a674b03c"],"linkType":"static","timeout":"30","x":296,"y":420.5454545454545,"wires":[["bd0ec6e9ea4731c8"]]},{"id":"bd0ec6e9ea4731c8","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for current repo revision\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"branch\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"branch\": {\n            \"type\": \"string\",\n            \"description\": \"Branch name for which commits should be retrieved.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for current repo revision","x":749.5,"y":362,"wires":[["f8774c1c32f1631d"]],"info":"## Requirements for \\`msg\\` for current repo revision Type\n\n`object` ([Requirements for \\`msg\\` for current repo revision](definition.md))\n\n# Requirements for \\`msg\\` for current repo revision Properties\n\n| Property          | Type     | Required | Nullable       | Defined by                                                                                                           |\n| :---------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)   | `string` | Required | cannot be null | [Requirements for \\`msg\\` for current repo revision](definition-properties-owner.md \"undefined#/properties/owner\")   |\n| [repo](#repo)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for current repo revision](definition-properties-repo.md \"undefined#/properties/repo\")     |\n| [branch](#branch) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for current repo revision](definition-properties-branch.md \"undefined#/properties/branch\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for current repo revision](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for current repo revision](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## branch\n\nBranch name for which commits should be retrieved.\n\n`branch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for current repo revision](definition-properties-branch.md \"undefined#/properties/branch\")\n\n### branch Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## branch Type\n\n`string`\n"},{"id":"14c59415ca2d5dec","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for commits for sha\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"Sha for which the commits should be retreived. This should be a tree sha.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for commits for sha","x":749.5,"y":439,"wires":[["2b9bbf6e57664c43"]],"info":"## Requirements for \\`msg\\` for commits for sha Type\n\n`object` ([Requirements for \\`msg\\` for commits for sha](definition.md))\n\n# Requirements for \\`msg\\` for commits for sha Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                       |\n| :------------------ | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for commits for sha](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for commits for sha](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for commits for sha](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for commits for sha](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for commits for sha](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## payload\n\nSha for which the commits should be retreived. This should be a tree sha.\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for commits for sha](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"},{"id":"9243bc0a46dcb699","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for get blob for sha\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"file sha for which the contents are desired.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for get blob for sha","x":749.5,"y":516,"wires":[["c938363b5f63d0b7"]],"info":"## Requirements for \\`msg\\` for get blob for sha Type\n\n`object` ([Requirements for \\`msg\\` for get blob for sha](definition.md))\n\n# Requirements for \\`msg\\` for get blob for sha Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                        |\n| :------------------ | :------- | :------- | :------------- | :---------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get blob for sha](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get blob for sha](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get blob for sha](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get blob for sha](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get blob for sha](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## payload\n\nfile sha for which the contents are desired.\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get blob for sha](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"},{"id":"d3233528cc3f4011","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for get tree for sha\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"file sha for which the contents are desired.\"\n        },\n        \"recursive\": {\n            \"type\": \"boolean\",\n            \"description\": \"retrieve all shas including sub-trees, i.e., sub-directories.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for get tree for sha","x":749.5,"y":593,"wires":[["9ad713be26ac2025"]],"info":"## Requirements for \\`msg\\` for get tree for sha Type\n\n`object` ([Requirements for \\`msg\\` for get tree for sha](definition.md))\n\n# Requirements for \\`msg\\` for get tree for sha Properties\n\n| Property                | Type      | Required | Nullable       | Defined by                                                                                                            |\n| :---------------------- | :-------- | :------- | :------------- | :-------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)         | `string`  | Required | cannot be null | [Requirements for \\`msg\\` for get tree for sha](definition-properties-owner.md \"undefined#/properties/owner\")         |\n| [repo](#repo)           | `string`  | Required | cannot be null | [Requirements for \\`msg\\` for get tree for sha](definition-properties-repo.md \"undefined#/properties/repo\")           |\n| [payload](#payload)     | `string`  | Required | cannot be null | [Requirements for \\`msg\\` for get tree for sha](definition-properties-payload.md \"undefined#/properties/payload\")     |\n| [recursive](#recursive) | `boolean` | Optional | cannot be null | [Requirements for \\`msg\\` for get tree for sha](definition-properties-recursive.md \"undefined#/properties/recursive\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get tree for sha](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get tree for sha](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## payload\n\nfile sha for which the contents are desired.\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get tree for sha](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n## recursive\n\nretrieve all shas including sub-trees, i.e., sub-directories.\n\n`recursive`\n\n*   is optional\n\n*   Type: `boolean`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get tree for sha](definition-properties-recursive.md \"undefined#/properties/recursive\")\n\n### recursive Type\n\n`boolean`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n\n---\n## recursive Type\n\n`boolean`\n"},{"id":"8f747b04375e1965","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for get entire tree for sha\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"file sha for which the contents are desired.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for get entire tree for sha","x":749.5,"y":670,"wires":[["f661479e66140edb"]],"info":"## Requirements for \\`msg\\` for get entire tree for sha Type\n\n`object` ([Requirements for \\`msg\\` for get entire tree for sha](definition.md))\n\n# Requirements for \\`msg\\` for get entire tree for sha Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                               |\n| :------------------ | :------- | :------- | :------------- | :----------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## payload\n\nfile sha for which the contents are desired.\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for get entire tree for sha](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"},{"id":"75b42d1acdbcc046","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for create blob\",\n    \"type\": \"object\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"base64 encoded content for which the blob should be created.\"\n        }\n    }\n}","schematitle":"Requirements for `msg` for create blob","x":749.5,"y":747,"wires":[["ef98698a4b696e66"]],"info":"## Requirements for \\`msg\\` for create blob Type\n\n`object` ([Requirements for \\`msg\\` for create blob](definition.md))\n\n# Requirements for \\`msg\\` for create blob Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                   |\n| :------------------ | :------- | :------- | :------------- | :----------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create blob](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create blob](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create blob](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create blob](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create blob](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## payload\n\nbase64 encoded content for which the blob should be created.\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create blob](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"},{"id":"f94c88257d071bb5","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for create tree for blobs\",\n    \"type\": \"object\",\n    \"id\": \"#\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\",\n        \"parent_sha\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"parent_sha\": {\n            \"type\": \"string\",\n            \"description\": \"the current sha of the repo, the return value of current repo revision.\"\n        },\n        \"payload\": {\n            \"type\": \"array\",\n            \"description\": \"path and shas for which this tree should be created. The shas can be generated by using `create blob` call.\",\n            \"minItems\": 1,\n            \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"path\",\n                    \"sha\"\n                ],\n                \"properties\": {\n                    \"path\": {\n                        \"type\": \"string\",\n                        \"description\": \"Full path for the object to add to the tree. Filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\"\n                    },\n                    \"sha\": {\n                        \"type\": \"string\",\n                        \"description\": \"Blob sha generated by using `create blob` call. The sha of the blob created initially using the create blob function\"\n                    }\n                }\n            }\n        }\n    }\n}\n","schematitle":"Requirements for `msg` for create tree for blobs","x":749.5,"y":824,"wires":[["5226230f86c9c784"]],"info":"## Requirements for \\`msg\\` for create tree for blobs Type\n\n`object` ([Requirements for \\`msg\\` for create tree for blobs](definition.md))\n\n# Requirements for \\`msg\\` for create tree for blobs Properties\n\n| Property                   | Type     | Required | Nullable       | Defined by                                                                                                                   |\n| :------------------------- | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)            | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-owner.md \"undefined#/properties/owner\")           |\n| [repo](#repo)              | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-repo.md \"undefined#/properties/repo\")             |\n| [parent\\_sha](#parent_sha) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-parent_sha.md \"undefined#/properties/parent_sha\") |\n| [payload](#payload)        | `array`  | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload.md \"undefined#/properties/payload\")       |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## parent\\_sha\n\nthe current sha of the repo, the return value of current repo revision.\n\n`parent_sha`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-parent_sha.md \"undefined#/properties/parent_sha\")\n\n### parent\\_sha Type\n\n`string`\n\n## payload\n\npath and shas for which this tree should be created. The shas can be generated by using `create blob` call.\n\n`payload`\n\n*   is required\n\n*   Type: `object[]` ([Details](definition-properties-payload-items.md))\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`object[]` ([Details](definition-properties-payload-items.md))\n\n### payload Constraints\n\n**minimum number of items**: the minimum number of items for this array is: `1`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## parent\\_sha Type\n\n`string`\n\n---\n## payload Type\n\n`object[]` ([Details](definition-properties-payload-items.md))\n\n## payload Constraints\n\n**minimum number of items**: the minimum number of items for this array is: `1`\n\n---\n## items Type\n\n`object` ([Details](definition-properties-payload-items.md))\n\n# items Properties\n\n| Property      | Type     | Required | Nullable       | Defined by                                                                                                                                                         |\n| :------------ | :------- | :------- | :------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [path](#path) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload-items-properties-path.md \"undefined#/properties/payload/items/properties/path\") |\n| [sha](#sha)   | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload-items-properties-sha.md \"undefined#/properties/payload/items/properties/sha\")   |\n\n## path\n\nFull path for the object to add to the tree. Filename of the blob in the repo, with path, i.e., dir1/dir2/filename.txt\n\n`path`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload-items-properties-path.md \"undefined#/properties/payload/items/properties/path\")\n\n### path Type\n\n`string`\n\n## sha\n\nBlob sha generated by using `create blob` call. The sha of the blob created initially using the create blob function\n\n`sha`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create tree for blobs](definition-properties-payload-items-properties-sha.md \"undefined#/properties/payload/items/properties/sha\")\n\n### sha Type\n\n`string`\n\n---\n## path Type\n\n`string`\n\n---\n## sha Type\n\n`string`\n"},{"id":"e1f0b2c6ff35189e","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for create commit\",\n    \"type\": \"object\",\n    \"id\": \"#\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\",\n        \"parent_sha\",\n        \"author\",\n        \"message\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"parent_sha\": {\n            \"type\": \"string\",\n            \"description\": \"the current sha of the repo, the return value of current repo revision.\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"the sha of the tree to commit\"\n        },\n        \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Commit message.\"\n        },\n        \"author\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"name\",\n                \"email\"\n            ],\n            \"description\": \"Author of the commit.\",\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\",\n                    \"description\": \"Full name of the author.\"\n                },\n                \"email\": {\n                    \"type\": \"string\",\n                    \"description\": \"Email of the author making the commit.\"\n                }\n            }\n        }\n    }\n}\n","schematitle":"Requirements for `msg` for create commit","x":749.5,"y":901,"wires":[["e68b9f9bac76350a"]],"info":"## Requirements for \\`msg\\` for create commit Type\n\n`object` ([Requirements for \\`msg\\` for create commit](definition.md))\n\n# Requirements for \\`msg\\` for create commit Properties\n\n| Property                   | Type     | Required | Nullable       | Defined by                                                                                                           |\n| :------------------------- | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)            | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-owner.md \"undefined#/properties/owner\")           |\n| [repo](#repo)              | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-repo.md \"undefined#/properties/repo\")             |\n| [parent\\_sha](#parent_sha) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-parent_sha.md \"undefined#/properties/parent_sha\") |\n| [payload](#payload)        | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-payload.md \"undefined#/properties/payload\")       |\n| [message](#message)        | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-message.md \"undefined#/properties/message\")       |\n| [author](#author)          | `object` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-author.md \"undefined#/properties/author\")         |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## parent\\_sha\n\nthe current sha of the repo, the return value of current repo revision.\n\n`parent_sha`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-parent_sha.md \"undefined#/properties/parent_sha\")\n\n### parent\\_sha Type\n\n`string`\n\n## payload\n\nthe sha of the tree to commit\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n## message\n\nCommit message.\n\n`message`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-message.md \"undefined#/properties/message\")\n\n### message Type\n\n`string`\n\n## author\n\nAuthor of the commit.\n\n`author`\n\n*   is required\n\n*   Type: `object` ([Details](definition-properties-author.md))\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-author.md \"undefined#/properties/author\")\n\n### author Type\n\n`object` ([Details](definition-properties-author.md))\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## parent\\_sha Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n\n---\n## message Type\n\n`string`\n\n---\n## author Type\n\n`object` ([Details](definition-properties-author.md))\n\n# author Properties\n\n| Property        | Type     | Required | Nullable       | Defined by                                                                                                                                     |\n| :-------------- | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------------------------------------------- |\n| [name](#name)   | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-author-properties-name.md \"undefined#/properties/author/properties/name\")   |\n| [email](#email) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create commit](definition-properties-author-properties-email.md \"undefined#/properties/author/properties/email\") |\n\n## name\n\nFull name of the author.\n\n`name`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-author-properties-name.md \"undefined#/properties/author/properties/name\")\n\n### name Type\n\n`string`\n\n## email\n\nEmail of the author making the commit.\n\n`email`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create commit](definition-properties-author-properties-email.md \"undefined#/properties/author/properties/email\")\n\n### email Type\n\n`string`\n\n---\n## name Type\n\n`string`\n\n---\n## email Type\n\n`string`\n"},{"id":"8963e4ce4b53be8b","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for create branch\",\n    \"type\": \"object\",\n    \"id\": \"#\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\",\n        \"branch\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"branch\": {\n            \"type\": \"string\",\n            \"description\": \"name for the new branch\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"the commit sha to which the branch should point\"\n        }\n    }\n}\n","schematitle":"Requirements for `msg` for create branch","x":749.5,"y":978,"wires":[["d5567c053d6f5e08"]],"info":"## Requirements for \\`msg\\` for create branch Type\n\n`object` ([Requirements for \\`msg\\` for create branch](definition.md))\n\n# Requirements for \\`msg\\` for create branch Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                     |\n| :------------------ | :------- | :------- | :------------- | :------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create branch](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create branch](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [branch](#branch)   | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create branch](definition-properties-branch.md \"undefined#/properties/branch\")   |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for create branch](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create branch](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create branch](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## branch\n\nname for the new branch\n\n`branch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create branch](definition-properties-branch.md \"undefined#/properties/branch\")\n\n### branch Type\n\n`string`\n\n## payload\n\nthe commit sha to which the branch should point\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for create branch](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## branch Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"},{"id":"d40a2485d4edb3d1","type":"JsonSchemaValidatorWithDocu","z":"390ee0021ded4910","name":"","property":"","propertyType":"msg","checkentireobject":true,"func":"{\n    \"title\": \"Requirements for `msg` for update head on branch\",\n    \"type\": \"object\",\n    \"id\": \"#\",\n    \"required\": [\n        \"owner\",\n        \"repo\",\n        \"payload\",\n        \"branch\"\n    ],\n    \"properties\": {\n        \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"GitHub username\"\n        },\n        \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the repository for which the commits should be retrieved.\"\n        },\n        \"branch\": {\n            \"type\": \"string\",\n            \"description\": \"github repo branch to update with the new commit sha\"\n        },\n        \"payload\": {\n            \"type\": \"string\",\n            \"description\": \"the sha of the commit created\"\n        }\n    }\n}\n","schematitle":"Requirements for `msg` for update head on branch","x":749.5,"y":1055,"wires":[["eea2441a833743f5"]],"info":"## Requirements for \\`msg\\` for update head on branch Type\n\n`object` ([Requirements for \\`msg\\` for update head on branch](definition.md))\n\n# Requirements for \\`msg\\` for update head on branch Properties\n\n| Property            | Type     | Required | Nullable       | Defined by                                                                                                             |\n| :------------------ | :------- | :------- | :------------- | :--------------------------------------------------------------------------------------------------------------------- |\n| [owner](#owner)     | `string` | Required | cannot be null | [Requirements for \\`msg\\` for update head on branch](definition-properties-owner.md \"undefined#/properties/owner\")     |\n| [repo](#repo)       | `string` | Required | cannot be null | [Requirements for \\`msg\\` for update head on branch](definition-properties-repo.md \"undefined#/properties/repo\")       |\n| [branch](#branch)   | `string` | Required | cannot be null | [Requirements for \\`msg\\` for update head on branch](definition-properties-branch.md \"undefined#/properties/branch\")   |\n| [payload](#payload) | `string` | Required | cannot be null | [Requirements for \\`msg\\` for update head on branch](definition-properties-payload.md \"undefined#/properties/payload\") |\n\n## owner\n\nGitHub username\n\n`owner`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for update head on branch](definition-properties-owner.md \"undefined#/properties/owner\")\n\n### owner Type\n\n`string`\n\n## repo\n\nName of the repository for which the commits should be retrieved.\n\n`repo`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for update head on branch](definition-properties-repo.md \"undefined#/properties/repo\")\n\n### repo Type\n\n`string`\n\n## branch\n\ngithub repo branch to update with the new commit sha\n\n`branch`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for update head on branch](definition-properties-branch.md \"undefined#/properties/branch\")\n\n### branch Type\n\n`string`\n\n## payload\n\nthe sha of the commit created\n\n`payload`\n\n*   is required\n\n*   Type: `string`\n\n*   cannot be null\n\n*   defined in: [Requirements for \\`msg\\` for update head on branch](definition-properties-payload.md \"undefined#/properties/payload\")\n\n### payload Type\n\n`string`\n\n---\n## owner Type\n\n`string`\n\n---\n## repo Type\n\n`string`\n\n---\n## branch Type\n\n`string`\n\n---\n## payload Type\n\n`string`\n"}]