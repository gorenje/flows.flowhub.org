[{"id":"cd8ee0cc76ab3339","type":"tab","label":"[NodeDev] Tarball","disabled":false,"info":"### Description\n\nCreate a tarball node for taking tarballs and extracting them or creating them.\n\n","env":[]},{"id":"fe39403a4761c950","type":"group","z":"cd8ee0cc76ab3339","name":"Package: node-red-contrib-tarxz","style":{"label":true},"nodes":["b71e807991a275d5","5868476034d4e156","a67c5b739ed6d017","9dc4e395af011d22","3aec5085a05bbfd2"],"x":1607,"y":130,"w":213,"h":282},{"id":"8c31bb3315ec8dd9","type":"group","z":"cd8ee0cc76ab3339","name":"Check keywords and node types","style":{"label":true},"nodes":["2268f7737dac5acd","c77dcaefa69246c5","2627c3f5ab5f49ff","b683b3cc46540644","89f3821e11a5893d","daf02a8148e6e07d","48e6ca9f385dcd8b","1b019bfe7e34652d","a244645f0f51c818","255e731afc7f818a","489bb1cf9c1ad55a"],"x":1608,"y":435,"w":919,"h":367},{"id":"3c6919329feaab4f","type":"NodeFactory","z":"cd8ee0cc76ab3339","name":"tarball","nodename":"tarball","color":"#DEB887","hasbutton":false,"hasinput":true,"outputcount":1,"category":"storage","summary":"Compress and decompress tarballs.","description":"Supports xz and gzip compression.","icon":"font-awesome/fa-archive","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":true,"isplugin":false,"x":377,"y":933,"wires":[[]]},{"id":"2268f7737dac5acd","type":"http request","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://catalogue.nodered.org/catalogue.json?_={{ payload }}","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1817,"y":590,"wires":[["2627c3f5ab5f49ff","48e6ca9f385dcd8b","89f3821e11a5893d","1b019bfe7e34652d","a244645f0f51c818"]]},{"id":"c77dcaefa69246c5","type":"inject","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1714,"y":476,"wires":[["2268f7737dac5acd"]]},{"id":"2627c3f5ab5f49ff","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for tar || tarball as types","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return d.types.indexOf(\"tar\") > 0 || d.types.indexOf(\"tarball\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2139,"y":591,"wires":[["b683b3cc46540644"]]},{"id":"b683b3cc46540644","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 70","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2421,"y":657,"wires":[]},{"id":"89f3821e11a5893d","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for keywords: tar || tarball","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return (d.keywords || []).indexOf(\"tar\") > 0 || (d.keywords || []).indexOf(\"tarball\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2176,"y":536,"wires":[["daf02a8148e6e07d"]]},{"id":"daf02a8148e6e07d","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 71","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2420,"y":590,"wires":[]},{"id":"48e6ca9f385dcd8b","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 72","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2150,"y":479,"wires":[]},{"id":"24fa617954f4195a","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"tarball.js","filename":"nodes/tarball.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function CoretarballFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    const tarStream = require('tar-stream');\n    const streamx = require('streamx');\n    const pakoGzip = require('pako');\n    const lzmaNative = require('lzma-native');\n\n    /*\n     * Extract tar files.\n     */\n    var extractTarFile = (tarData, onFile, onFinish, onError) => {\n      const extract = tarStream.extract()\n\n      var allFiles = [];\n\n      extract.on('entry', function (header, stream, next) {\n        // header is the tar header\n        // stream is the content body (might be an empty stream)\n        // call next when you are done with this entry\n\n        var buffer = [];\n\n        stream.on('data', function (data) {\n          buffer.push(data)\n        });\n\n        stream.on('end', function () {\n          //@ts-ignore\n          onFile(header.name, Buffer.concat(buffer))\n\n          allFiles.push({\n            path: header.name,\n            content: Buffer.concat(buffer)\n          })\n\n          next() // ready for next entry\n        })\n\n        stream.resume() // just auto drain the stream\n      })\n\n      extract.on('finish', function () {\n        onFinish(allFiles)\n      })\n\n      extract.on('error', onError);\n\n      var stream = streamx.Readable.from(tarData)\n      stream.pipe(extract);\n    }\n\n    /*\n     * Close something\n     */\n    node.on('close', function() {\n      node.status({});\n    });\n\n    /* \n      * msg handler, in this case pass the message on unchanged \n      */\n    node.on(\"input\", function(msg, send, done) {\n\n      var onFile = (path, content) => {\n        send({\n          ...msg,\n          path: path,\n          payload: content\n        })\n      };\n\n      var onDone = (allFiles) => {\n        send({\n          ...msg,\n          complete: true,\n          payload: allFiles\n        })\n        done();\n      };\n\n      var onError = (err) => {\n        msg.error = err\n        done(RED._(\"tarball.error.untar\"), msg)\n      };\n\n      import('file-type').then(module => {\n        const buffer = new Uint8Array(msg.payload);\n        \n        module.fileTypeFromBuffer(buffer).then( d => {\n          switch ( d.ext ) {\n            case 'gz':\n              extractTarFile(Buffer.from(pakoGzip.inflate(buffer)), onFile, onDone, onError)\n              break\n            case 'tar':\n              extractTarFile(Buffer.from(buffer),onFile, onDone, onError)\n              break\n            case 'xz':\n\n              lzmaNative.decompress(Buffer.from(buffer)).then( data => {\n                extractTarFile(Buffer.from(data), onFile, onDone, onError)\n              }).catch( err => {\n                msg.error = err\n                done(RED._(\"tarball.error.xzcorrupt\"), msg)\n              })\n\n              break\n            default:\n              msg.payload = d\n              done(RED._(\"tarball.error.formatnotsupported\"), msg)\n          }\n        }).catch( err => {\n          msg.error = err\n          done(RED._(\"tarball.error.general\"),msg)\n        })\n      }).catch( err => {\n        msg.error = err\n        done(RED._(\"tarball.error.general\"), msg)\n      })\n    });\n  }\n\n  RED.nodes.registerType(\"tarball\", CoretarballFunctionality);\n\n}\n","output":"str","x":701,"y":1070,"wires":[["cb2e9bd5342b1cbd"]]},{"id":"cb2e9bd5342b1cbd","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"tarball.html","filename":"nodes/tarball.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n  \n\n  function frontendSupportFunction() {\n  }\n\n  var functTwo = (arg) => {\n\n  };\n  \n  RED.nodes.registerType('tarball',{\n    color: '#DEB887',\n    icon: \"font-awesome/fa-archive\",\n    category: 'storage',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    inputs: 1,\n\n    outputs: 1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    onpaletteremove: function() {\n    },\n\n\n\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"tarball\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\"/>        \n    </div>\n\n    <div class=\"form-row\">\n      <label for=\"node-input-action\"><i class=\"fa fa-dot-circle-o\"></i> <span data-i18n=\"tarball.label.action\"></span></label>\n      <select style=\"width:70%\" id=\"node-input-action\">\n                <option value=\"\" data-i18n=\"tarball.convert.automatic\"></option>\n                <option value=\"ext\" data-i18n=\"tarball.convert.extract\"></option>\n                <option value=\"tar\" data-i18n=\"tarball.convert.create\"></option>\n      </select>\n    </div>\n</script>\n\n","output":"str","x":701,"y":1120,"wires":[["c2cbfc640c6d7d9e"]]},{"id":"492c4c7bdbd47cdc","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"# LICENSE\n\nLicense texts comes here.\n\n","output":"str","x":701,"y":870,"wires":[["8f8c2491b283219f"]]},{"id":"8f8c2491b283219f","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# tarball\n\nTarball create and extract tar files.\n","output":"str","x":701,"y":920,"wires":[["bbf62b6a3a7c0de8"]]},{"id":"bbf62b6a3a7c0de8","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"CHANGELOG.md","filename":"CHANGELOG.md","format":"markdown","syntax":"mustache","template":"# Changelog\nAll notable changes to this project will be documented in this file.\n\n\n## [0.0.1]\n### Initial version\n\nCreate inital node for creating and extracting tarballs.\n\n**Note:** The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n","output":"str","x":701,"y":970,"wires":[["5fd34a2f1a250e74"]]},{"id":"5fd34a2f1a250e74","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{{ pversion }}}\",\n  \"dependencies\": {\n    \"pako\": \">=2.1.0\",\n    \"tar-stream\": \">=3.1.6\",\n    \"streamx\": \">=2.15.5\",\n    \"lzma-native\": \">=8.0.6\",\n    \"file-type\": \">=18.7.0\"\n  }, \n\n  \"description\": \"{{{ pdescription }}}\",\n  \"keywords\": [\n    \"node-red\",\n    \"tar\",\n    \"xz\",\n    \"gzip\",\n    \"tarball\"\n  ],\n\n  \"license\": \"Don't do evil.\",\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}#readme\",\n  \"author\": \"{{{ pauthorname }}} <{{{ pauthoremail }}}>\",\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n       \"tarball\": \"nodes/tarball.js\"\n    }\n  },\n\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":701,"y":1020,"wires":[["24fa617954f4195a"]]},{"id":"b5ad22fbced928c8","type":"template","z":"cd8ee0cc76ab3339","name":"npm-tarball.js","field":"contents.npm_tarball_js","fieldType":"msg","format":"javascript","syntax":"plain","template":"module.exports = function (RED) {\n    function NpmTarBallFunctionality(config) {\n        RED.nodes.createNode(this, config);\n\n        var node = this;\n        var cfg = config;\n\n        const tarStream = require('tar-stream');\n        const pakoGzip = require('pako')\n\n        node.on('close', function () {\n            node.status({});\n        });\n\n        node.on(\"input\", function (msg, send, done) {\n            const pack = tarStream.pack()\n\n            var buffer = [];\n\n            msg.contents.forEach((elem) => {\n                if (elem.type == \"base64\") {\n                    pack.entry({ name: \"package/\" + elem.name }, Buffer.from(elem.contents, 'base64'))\n                } else {\n                    pack.entry({ name: \"package/\" + elem.name }, elem.contents)\n                }\n            })\n\n            pack.on('end', function () {\n                try {\n                    var buf = Buffer.from(pakoGzip.gzip(Buffer.concat(buffer)))\n                    msg.payload = buf;\n                    send(msg);\n                } catch (ex) {\n                    msg.errors = ex\n                    done(\"failed to encode buffer\", msg)\n                }\n            });\n\n            pack.on('data', function (data) {\n                buffer.push(data)\n            });\n\n            pack.on('error', (err) => {\n                msg.error = err\n                done(\"tar packing failed\", msg)\n            })\n\n            pack.finalize() \n        });\n    };\n\n    RED.nodes.registerType(\"NpmTarBall\", NpmTarBallFunctionality);\n}","output":"str","x":1724,"y":922,"wires":[[]]},{"id":"b71e807991a275d5","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"package.json","filename":"package.json","format":"json","syntax":"plain","template":"{\n    \"name\": \"node-red-contrib-tarxz\",\n    \"version\": \"0.0.1\",\n    \"description\": \"A Node-RED node to compress and decompress to xz-tarball format\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\":\"https://github.com/frerepoulet/node-red-contrib.git\",\n        \"path\": \"/tree/master/tarxz\"\n    },\n    \"author\": \"Olivier Robitaille\",\n    \"license\": \"MIT License\",\n    \"engines\": {\n      \"node\": \">=4\"\n    },\n    \"dependencies\": {\n        \"tar-fs\": \"1.15.*\",\n        \"xz\": \"1.2.*\"\n    },\n    \"keywords\": [ \"node-red\", \"tar\", \"xz\" ],\n    \"node-red\": {\n        \"nodes\": {\n            \"tar.xz\": \"tarxz.js\"\n        }\n    }\n}\n","output":"str","x":1703,"y":171,"wires":[["5868476034d4e156"]]},{"id":"5868476034d4e156","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"README.md","filename":"README.md","format":"markdown","syntax":"plain","template":"# node-red-nodes\nTar.xz node for Node-RED.  Compress/decompress tar.xz files.\n\nTakes a Filename and checks whether it needs to be compressed or decompressed.\nPerforms operation in place.\n\nTODO\n* Compression levels (current default:6/9)\n* Mustache templating\n* Custom archive name\n","output":"str","x":1703,"y":221,"wires":[["a67c5b739ed6d017"]]},{"id":"a67c5b739ed6d017","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"tarxz.js","filename":"tarxz.js","format":"javascript","syntax":"plain","template":"module.exports = function(RED) {\n  const fs = require('fs');\n  const tar = require('tar-fs');\n  const xz = require('xz');\n  const path = require('path');\n  var node;\n\n  function handleError(error) {\n    node.error(error);\n    node.status({fill:'red', shape:'ring', text:'Error'});\n  }\n\n  function decompress(filename) {\n    const p = path.parse(filename);\n\n    var d = require('domain').create();\n    d.on('error', function(e){handleError(e)});\n    d.run(function() {\n      tar.pack(filename)\n      .pipe(new xz.Compressor())\n      .pipe(fs.createWriteStream(p.dir + '/' + p.name + '.tar.xz'));\n    })\n  }\n\n  function decompress(filename) {\n    const outFile = path.dirname(filename);\n\n    var d = require('domain').create();\n    d.on('error', function(e){handleError(e)});\n    d.run(function() {\n      fs.createReadStream(filename)\n      .pipe(new xz.Decompressor())\n      .pipe(tar.extract(outFile));\n    })\n  }\n\n  function TarXZNode(n) {\n    RED.nodes.createNode(this, n);\n    this.filename = n.filename;\n    node = this;\n\n    this.on('input', function(msg) {\n      const filename = node.filename || msg.filename || '';\n\n      if (!node.filename) {\n        node.status({fill:'grey', shape:'dot', text:filename});\n      }\n\n      if (filename === '') {\n        node.warn('No filename specified');\n      } else if (fs.existsSync(filename)) {\n        if (fs.lstatSync(filename).isFile()) {\n          var p = path.parse(filename); // {root, dir, base, ext, name}\n          if (p.ext === '.xz') {\n            if (path.extname(p.name) === '.tar') {\n              decompress(filename);\n            } else {\n              node.error('Invalid file format (not tar)');\n            }\n          } else {\n            compress(filename);\n          }\n        } else if (fs.lstatSync(filename).isDirectory()) {\n          compress(filename);\n        } else {\n          node.error('Filename not a file or directory');\n        }\n      } else {\n        node.error('No such file or directory');\n      }\n\n      msg.filename = filename;\n      node.send(msg);\n    });\n  }\n  RED.nodes.registerType('tar.xz', TarXZNode);\n}\n","output":"str","x":1703,"y":271,"wires":[["9dc4e395af011d22"]]},{"id":"9dc4e395af011d22","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"archive.png","filename":"icons/archive.png","format":"base64","syntax":"plain","template":"iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5rAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAANdJREFUeNpiYBgFlAJGZM7///8bsKh5wMjIuAAqnwCkFIB4A1DsAkHT/2MH+5Hk90PF3gOxATEu/I/NhUC8EMqOh7oQBD4AsSNel/4nHeB0KaleRjEU2QwmKkSsALUNRAEsRKhRQEpOCqSmw/9kJWYgINbLoKRRCMSCUFwIFSMOYIlBByxqHNAVEWvgeSwGOEDFzuMykImAd0EA2ZUOaHIkefk+VMwAxIZiA6jYfXK8DAIFWNQUkBuGMDAfGo4OUPZ/fAbSPR2SDEaggeilTeNovT3wACDAAMVijqI5WiJpAAAAAElFTkSuQmCC","output":"str","x":1703,"y":321,"wires":[["3aec5085a05bbfd2"]]},{"id":"3aec5085a05bbfd2","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"tarxz.html","filename":"tarxz.html","format":"html","syntax":"plain","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('tar.xz',{\n        category: 'function',\n        color: '#3FADB5',\n        defaults: {\n            name: {value:\"\"},\n            filename: {value:\"\"}\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"archive.png\",\n        label: function() {\n            return this.name || \"tar.xz\";\n        }\n    });\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"tar.xz\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"icon-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-input-filename\"><i class=\"icon-tag\"></i> Filename</label>\n        <input type=\"text\" id=\"node-input-filename\" placeholder=\"Filename\">\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"tar.xz\">\n    <p>A simple node to compress or decompress tarxz format</p>\n    <p>If <i>Filename</i> property or <code>msg.filename</code> is tar.xz file format, it will be decompressed and unpacked.</p>\n    <p>Otherwise, it will be packed and compressed.</p>\n    <p>Performs operation in place.</p>\n</script>\n","output":"str","x":1703,"y":371,"wires":[[]]},{"id":"a01240fc1a24f5f8","type":"NodeDevOps","z":"cd8ee0cc76ab3339","name":"","pname":"@gregoriusrippenstein/node-red-contrib-tarball","pversion":"0.0.1","pauthorname":"Gerrit Riessen","pauthoremail":"gerrit@openmindmap.org","pdescription":"Create and extract tarballs in xz and gzip formats","noderedinstall":true,"randompackagename":true,"ignore_package_check":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-tarball","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"Initial Commit","npmpublish":false,"npmunpublish":false,"npmotp":"","x":494,"y":702,"wires":[["492c4c7bdbd47cdc"]]},{"id":"9db1c4818d9bb5db","type":"NodeRedInstall","z":"cd8ee0cc76ab3339","name":"","x":1356,"y":1399,"wires":[[]]},{"id":"5d5b9e93d40d3437","type":"NpmTarBall","z":"cd8ee0cc76ab3339","name":"","x":1102,"y":1286,"wires":[["9db1c4818d9bb5db"]]},{"id":"25d96b8243f5ba87","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"plain","template":"Copyright 2016 JS Foundation and other contributors, https://js.foundation/\nCopyright 2013-2016 IBM Corp.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n","output":"str","x":1152,"y":407,"wires":[["0088229446ef027b"]]},{"id":"0088229446ef027b","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.html","filename":"70-base64.html","format":"html","syntax":"plain","template":"\n<script type=\"text/html\" data-template-name=\"base64\">\n    <div class=\"form-row\">\n        <label for=\"node-input-action\"><i class=\"fa fa-dot-circle-o\"></i> <span data-i18n=\"base64.label.action\"></span></label>\n        <select style=\"width:70%\" id=\"node-input-action\">\n            <option value=\"\" data-i18n=\"base64.convert.buffer\"></option>\n            <option value=\"str\" data-i18n=\"base64.convert.encode\"></option>\n            <option value=\"b64\" data-i18n=\"base64.convert.decode\"></option>\n        </select>\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-input-property\"><i class=\"fa fa-ellipsis-h\"></i> <span data-i18n=\"node-red:common.label.property\"></span></label>\n        <input type=\"text\" id=\"node-input-property\" style=\"width:70%;\"/>\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n        <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('base64',{\n        category: 'parser',\n        color:\"#DEBD5C\",\n        defaults: {\n            name: {value:\"\"},\n            action: {value:\"\"},\n            property: {value:\"payload\",required:true}\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"parser-base64.png\",\n        label: function() {\n            return this.name||\"base64\";\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\":\"\";\n        },\n        oneditprepare: function() {\n            if (this.property === undefined) {\n                $(\"#node-input-property\").val(\"payload\");\n            }\n            $(\"#node-input-property\").typedInput({default:'msg',types:['msg']});\n        }\n    });\n</script>\n","output":"str","x":1152,"y":457,"wires":[["93bad2765b3e0d43"]]},{"id":"93bad2765b3e0d43","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.html","filename":"locales/en-US/70-base64.html","format":"html","syntax":"plain","template":"<script type=\"text/html\" data-help-name=\"base64\">\n    <p>A function that converts the chosen property (default <code>msg.payload</code>) to and from base64 format.</p>\n    <p>If the input is a buffer it converts it to a Base64 encoded string.</p>\n    <p>If the input is a Base64 string it converts it back to a binary buffer.</p>\n    <p>You can also fix coding into base64, and base64 to buffer if required.</p>\n    <p>Note: Using \"Encode to Base64\" will encode an already encoded string.</p>\n</script>\n","output":"str","x":1152,"y":507,"wires":[["05c8727b3565072a"]]},{"id":"05c8727b3565072a","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.html","filename":"locales/ja/70-base64.html","format":"html","syntax":"plain","template":"<script type=\"text/html\" data-help-name=\"base64\">\n    <p>選択したプロパティ(デフォルトは<code>msg.payload</code>)のBase64変換を行います。</p>\n    <p>入力がバッファであれば、Base64エンコードされた文字列に変換します。</p>\n    <p>入力がBase64文字列であれば、バイナリバッファ形式に変換します。</p>\n    <p>必要に応じて、入力をBase64であると固定して、Base64からバッファへの変換を行うこともできます。</p>\n    <p>補足: \"Base64へエンコード\"は、既にエンコードされた文字列もエンコードしてしまう可能性があります。</p>\n</script>\n","output":"str","x":1152,"y":557,"wires":[["e8ceef6c209ead10"]]},{"id":"e8ceef6c209ead10","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.js","filename":"70-base64.js","format":"javascript","syntax":"plain","template":"\nmodule.exports = function(RED) {\n    \"use strict\";\n    function Base64Node(n) {\n        RED.nodes.createNode(this,n);\n        this.action = n.action || \"\";\n        this.property = n.property || \"payload\";\n        var node = this;\n        var regexp = new RegExp('^[A-Za-z0-9+\\/=]*$');  // check it only contains valid characters\n\n        this.on(\"input\", function(msg) {\n            var value = RED.util.getMessageProperty(msg,node.property);\n            if (value !== undefined) {\n                if (node.action === \"str\") {\n                    value = RED.util.ensureBuffer(value).toString('base64');\n                    RED.util.setMessageProperty(msg,node.property,value);\n                    node.send(msg);\n                }\n                else if (node.action === \"b64\") {\n                    if ( typeof value === \"string\") {\n                        var load = value.replace(/\\s+/g,'');\n                        if (regexp.test(load) && (load.length % 4 === 0) ) {\n                            value = Buffer.from(load,'base64').toString('binary');\n                            RED.util.setMessageProperty(msg,node.property,value);\n                            node.send(msg);\n                        }\n                        else { node.error(RED._(\"base64.error.invalid\"),msg); }\n                    }\n                    else { node.error(RED._(\"base64.error.nonbase64\"),msg); }\n                }\n                else {\n                    if (Buffer.isBuffer(value)) {\n                        // Take binary buffer and make into a base64 string\n                        value = value.toString('base64');\n                        RED.util.setMessageProperty(msg,node.property,value);\n                        node.send(msg);\n                    }\n                    else if (typeof value === \"string\") {\n                        // Take base64 string and make into binary buffer\n                        var load = value.replace(/\\s+/g,'');      // remove any whitespace\n                        //var load = value.replace(/[\\t\\r\\n\\f]+/g,'');\n                        //var load = value;\n                        if ( regexp.test(load) && (load.length % 4 === 0) ) {\n                            value = Buffer.from(load,'base64');\n                            RED.util.setMessageProperty(msg,node.property,value);\n                            node.send(msg);\n                        }\n                        else {\n                            node.log(RED._(\"base64.log.nonbase64encode\"));\n                            value = Buffer.from(value).toString('base64');\n                            RED.util.setMessageProperty(msg,node.property,value);\n                            node.send(msg);\n                        }\n                    }\n                    else {\n                        node.warn(RED._(\"base64.warn.cannothandle\"));\n                    }\n                }\n            }\n            else { node.warn(RED._(\"base64.warn.noproperty\")); }\n        });\n    }\n    RED.nodes.registerType(\"base64\",Base64Node);\n}\n","output":"str","x":1152,"y":607,"wires":[["117260c621377816"]]},{"id":"117260c621377816","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.json","filename":"locales/de/70-base64.json","format":"json","syntax":"plain","template":"{\n    \"base64\": {\n        \"base64\": \"base64\",\n        \"label\": {\n            \"action\": \"Aktion\"\n        },\n        \"convert\": {\n            \"buffer\": \"Konvertierung Buffer <-> Base64\",\n            \"encode\": \"Kodierung als Base64\",\n            \"decode\": \"Konvertierung Base64 zu String\"\n        },\n        \"log\": {\n            \"nonbase64encode\": \"Kein Base64-String - möglicherweise soll es kodiert werden...\"\n        },\n        \"warn\": {\n            \"cannothandle\": \"Dieser Node kann nur Strings oder Buffer verarbeiten\",\n            \"noproperty\": \"Keine Eigenschaft zur Verarbeitung gefunden\"\n        },\n        \"error\": {\n            \"invalid\": \"Ungültiger Base64-String\",\n            \"nonbase64\": \"Kein Base64-String\"\n        }\n    }\n}\n","output":"str","x":1152,"y":657,"wires":[["4851c5e6a878c603"]]},{"id":"4851c5e6a878c603","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.json","filename":"locales/en-US/70-base64.json","format":"json","syntax":"plain","template":"{\n  \"base64\": {\n    \"base64\": \"base64\",\n    \"label\": {\n      \"action\": \"Action\"\n    },\n    \"convert\": {\n      \"buffer\": \"Convert Buffer <-> Base64\",\n      \"encode\": \"Encode as Base64\",\n      \"decode\": \"Convert Base64 to String\"\n    },\n    \"log\": {\n      \"nonbase64encode\": \"Not a Base64 string - maybe we should encode it...\"\n    },\n    \"warn\": {\n      \"cannothandle\": \"This node only handles strings or buffers.\",\n      \"noproperty\": \"No property found to process\"\n    },\n    \"error\": {\n      \"invalid\": \"Invalid Base64 string\",\n      \"nonbase64\": \"Not a Base64 string\"\n    }\n  }\n}\n","output":"str","x":1152,"y":707,"wires":[["d60119830ee71ddf"]]},{"id":"d60119830ee71ddf","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"70-base64.json","filename":"locales/ja/70-base64.json","format":"json","syntax":"plain","template":"{\n  \"base64\": {\n    \"base64\": \"base64\",\n    \"label\": {\n      \"action\": \"動作\"\n    },\n    \"convert\": {\n      \"buffer\": \"バッファ <-> Base64の変換\",\n      \"encode\": \"Base64へエンコード\",\n      \"decode\": \"Base64から文字列へ変換\"\n    },\n    \"log\": {\n      \"nonbase64encode\": \"Base64文字列ではありませんが、変換します。\"\n    },\n    \"warn\": {\n      \"cannothandle\": \"このノードは文字列かバッファしか変換できません。\",\n      \"noproperty\": \"処理するためのプロパティが見つかりません。\"\n    },\n    \"error\": {\n      \"invalid\": \"不正なBase64文字列です。\",\n      \"nonbase64\": \"Base64文字列ではありません。\"\n    }\n  }\n}\n","output":"str","x":1152,"y":757,"wires":[["db1b6ad6f7223eea"]]},{"id":"db1b6ad6f7223eea","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"package.json","filename":"package.json","format":"json","syntax":"plain","template":"{\n    \"name\"          : \"node-red-node-base64\",\n    \"version\"       : \"0.3.0\",\n    \"description\"   : \"A Node-RED node to pack and unpack objects to base64 format\",\n    \"dependencies\"  : {\n    },\n    \"repository\" : {\n        \"type\":\"git\",\n        \"url\":\"https://github.com/node-red/node-red-nodes.git\",\n        \"path\": \"/tree/master/parsers/base64\"\n    },\n    \"license\": \"Apache-2.0\",\n    \"keywords\": [ \"node-red\", \"base64\" ],\n    \"node-red\"      : {\n        \"nodes\"     : {\n            \"base64\": \"70-base64.js\"\n        }\n    },\n    \"author\": {\n        \"name\": \"Dave Conway-Jones\",\n        \"email\": \"ceejay@vnet.ibm.com\",\n        \"url\": \"http://nodered.org\"\n    }\n}\n","output":"str","x":1152,"y":807,"wires":[["228192d1369f2ec0"]]},{"id":"228192d1369f2ec0","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"README.md","filename":"README.md","format":"markdown","syntax":"plain","template":"node-red-node-base64\n====================\n\nA <a href=\"http://nodered.org\" target=\"_new\">Node-RED</a> node to encode and decode base64 format messages.\n\n\nInstall\n-------\n\nRun the following command in your Node-RED user directory - typically `~/.node-red`\n\n    npm i node-red-node-base64\n\nUsage\n-----\n\nA function that converts the `msg.payload` to and from base64 format.\n\nIf the input is a binary buffer it converts it to a Base64 encoded string.\n\nIf the input is a Base64 string it converts it back to a binary buffer.\n\nSample Flow\n-----------\n\n<pre><code>[{\"id\":\"d2ccae00.2d335\",\"type\":\"inject\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"none\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":136,\"y\":99,\"z\":\"385bdf8b.c7a42\",\"wires\":[[\"e03cae10.1fc35\"]]},{\"id\":\"b778ef09.48871\",\"type\":\"base64\",\"name\":\"\",\"x\":411.5,\"y\":160,\"z\":\"385bdf8b.c7a42\",\"wires\":[[\"6295d1b1.9d6a3\",\"46b597ba.b94a68\"]]},{\"id\":\"6295d1b1.9d6a3\",\"type\":\"debug\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":610,\"y\":160,\"z\":\"385bdf8b.c7a42\",\"wires\":[]},{\"id\":\"ead9e7c9.152618\",\"type\":\"debug\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":610,\"y\":240,\"z\":\"385bdf8b.c7a42\",\"wires\":[]},{\"id\":\"46b597ba.b94a68\",\"type\":\"base64\",\"name\":\"\",\"x\":411.5,\"y\":240,\"z\":\"385bdf8b.c7a42\",\"wires\":[[\"ead9e7c9.152618\"]]},{\"id\":\"1c9124e9.e36edb\",\"type\":\"inject\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":1775,\"y\":113,\"z\":\"385bdf8b.c7a42\",\"wires\":[[]]},{\"id\":\"48a892ea.b7576c\",\"type\":\"debug\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":2171,\"y\":210,\"z\":\"385bdf8b.c7a42\",\"wires\":[]},{\"id\":\"e03cae10.1fc35\",\"type\":\"function\",\"name\":\"\",\"func\":\"msg.payload = new Buffer.from(\\\"12345\\\");\\nreturn msg;\",\"outputs\":1,\"x\":250,\"y\":160,\"z\":\"385bdf8b.c7a42\",\"wires\":[[\"b778ef09.48871\"]]}]\n</code></pre>\n","output":"str","x":1152,"y":857,"wires":[["25b07b93d4a0aa90"]]},{"id":"25b07b93d4a0aa90","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"parser-base64.png","filename":"icons/parser-base64.png","format":"base64","syntax":"plain","template":"iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5rAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gIDDy86IGFKRQAAARhJREFUSMfllTGOwjAQRf+gFCxIK05AQ0u1F6BCHICGW3ALOi5AxQGQoF5ttwUNFZyAigYJsR1I6NMYaTBjZ52k4zdxfuLn8cw4Ad5OAgAkMwAT7RnXx/gKYCIif0EqyTrTtCb5WSUwDi0IDEM1UHkv99qPQkNAHxAAkuT8Ma+W2wZOvue91voPkDrSCOxJMeDNB/hpsZTFHoYmx6C1qo9eDHgQTwC+k4EkOy53baPiAwCz3DBJflgJJ3lSvbZT/tHrw5UfIY1FfnV/Aeiq8U+RHH4Zi0zd1kdVVTkrU+WNUZSxi3SZDBSRHoCzsrZq3C+0BRFpGXlcAGgmR0hyb3hrAMOkJFvfxKqOXvHfqIumUYJzE5EL3lN34R2HIkQ6sMYAAAAASUVORK5CYII=","output":"str","x":1152,"y":907,"wires":[["80d8c78ea978a07d"]]},{"id":"f38678a913b20f7f","type":"NodeDevOps","z":"cd8ee0cc76ab3339","name":"","pname":"node-red-node-base64","pversion":"0.3.0","pauthorname":{"name":"Dave Conway-Jones","email":"ceejay@vnet.ibm.com","url":"http://nodered.org"},"pauthoremail":{"name":"Dave Conway-Jones","email":"ceejay@vnet.ibm.com","url":"http://nodered.org"},"pdescription":"A Node-RED node to pack and unpack objects to base64 format","noderedinstall":true,"randompackagename":false,"ignore_package_check":false,"gitcommit":false,"gitcheckforchange":false,"githubowner":"","githubrepo":"","githubbranch":"main","githubauthor":"","githubauthoremail":"","githubmessage":"","npmpublish":false,"npmunpublish":false,"npmotp":"","x":1032,"y":357,"wires":[["25d96b8243f5ba87"]]},{"id":"80d8c78ea978a07d","type":"NpmTarBall","z":"cd8ee0cc76ab3339","name":"","x":1302,"y":957,"wires":[["72703776d9a46b03"]]},{"id":"72703776d9a46b03","type":"NodeRedInstall","z":"cd8ee0cc76ab3339","name":"","x":1452,"y":1007,"wires":[[]]},{"id":"c2cbfc640c6d7d9e","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"locales-enUS-tarball.html","filename":"nodes/locales/en-US/tarball.html","format":"html","syntax":"plain","template":"<script type=\"text/html\" data-help-name=\"tarball\">\n    <p>Compress and extract tarballs in xz and gzip format.</p>\n<p>\n  Supports xz and gzip compression.\n\n<p><b>Compression</b>\n\n<p>\n  For compression, <code>msg.payload</code> is assumed to be an array containing\n  objects of the form:\n\n<p>\n  <pre>\n  <code>\n  {\n    name: \"filename\",\n    content: \"file content\",\n    type: \"base64\" || \"text\"\n  }\n  </code>\n  </pre>\n<p>\n  If the <code>type</code> is base64 then it's assumed that the content\n  is binary content encoded in base64.\n\n<p><b>Extraction</b>\n\n<p>\n  Extraction assumes that the msg.payload is an ArrayBuffer with\n  the contents of the tarball. Either encoded in xz format or\n  gzip format.\n\n<p>\n  A message is generated as each file is extracted. All data is encoded\n  in a <code>Buffer</code> object as it is not possible to distinguish between\n  binary content and text content. The message has a <code>path</code> attribute \n  for the file name and <code>payload</code> contains the buffer with the files\n  contents.\n\n<p>\n  Once all files have been extracted, one file message is sent that\n  contains <code>complete</code> set to true and <code>payload</code> being an array containing\n  all files that were extracted. Each file is represented by a hash\n  object: \n\n  <code>\n  {\n    path: \"full path of file\",\n    payload: &lt;Buffer object containing file contents&gt;\n  }\n  </code>\n\n</script>","output":"str","x":818,"y":1173,"wires":[["3983bf5043da24bb"]]},{"id":"3983bf5043da24bb","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"locales-enUS-tarball.json","filename":"nodes/locales/en-US/tarball.json","format":"json","syntax":"plain","template":"{\n    \"tarball\": {\n        \"label\": {\n            \"action\": \"Action\"\n        },\n        \"convert\": {\n            \"automatic\": \"Automatic\",\n            \"create\": \"Create tarball\",\n            \"extract\": \"Extract tarball\"\n        },\n        \"error\": {\n            \"general\": \"error occurred\",\n            \"formatnotsupported\": \"format not supported\",\n            \"untar\": \"error while untarring file\",\n            \"xzcorrupt\": \"Lzma/Xz data corrupt\"\n        }\n    }\n}\n","output":"str","x":822,"y":1231,"wires":[["5d5b9e93d40d3437"]]},{"id":"23e15878b8c84308","type":"link call","z":"cd8ee0cc76ab3339","name":"","links":["18b6af1ac5dc4d77"],"linkType":"static","timeout":"30","x":485,"y":1610,"wires":[["df442452d6ab3beb","9f3d2b038344444d"]]},{"id":"5afb086eb3699201","type":"inject","z":"cd8ee0cc76ab3339","name":"","props":[{"p":"owner","v":"gorenje","vt":"str"},{"p":"repo","v":"millieons.org","vt":"str"},{"p":"branch","v":"4","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":290,"y":1605,"wires":[["23e15878b8c84308"]]},{"id":"df442452d6ab3beb","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 73","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":774,"y":1604,"wires":[]},{"id":"f30476ae450cbb1e","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 74","active":false,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":1082,"y":1430,"wires":[]},{"id":"055433c6742f9e92","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tar.xz","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":489,"y":1403,"wires":[["9f3d2b038344444d"]]},{"id":"7cb4fa91454bf967","type":"inject","z":"cd8ee0cc76ab3339","name":"","props":[{"p":"owner","v":"gorenje","vt":"str"},{"p":"repo","v":"millieons.org","vt":"str"},{"p":"branch","v":"4","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":236,"y":1414,"wires":[["055433c6742f9e92","947ca8fd37a7e4af","e935a510275bf6a8"]]},{"id":"9c62c13293999c23","type":"catch","z":"cd8ee0cc76ab3339","name":"","scope":null,"uncaught":false,"x":724,"y":1407,"wires":[["9adef917fd4bb985"]]},{"id":"9adef917fd4bb985","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 75","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":964,"y":1374,"wires":[]},{"id":"947ca8fd37a7e4af","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tar","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":458,"y":1462,"wires":[["9f3d2b038344444d"]]},{"id":"e935a510275bf6a8","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tgz","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":422,"y":1514,"wires":[["9f3d2b038344444d"]]},{"id":"a244645f0f51c818","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for file-type || filetype as types","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return d.types.indexOf(\"file-type\") > 0 || d.types.indexOf(\"filetype\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2122,"y":693,"wires":[["489bb1cf9c1ad55a"]]},{"id":"489bb1cf9c1ad55a","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 76","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2389,"y":761,"wires":[]},{"id":"1b019bfe7e34652d","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for keywords: filetype || file-type","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return (d.keywords || []).indexOf(\"filetype\") > 0 || (d.keywords || []).indexOf(\"file-type\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2121,"y":643,"wires":[["255e731afc7f818a"]]},{"id":"255e731afc7f818a","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 77","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2410,"y":713,"wires":[]},{"id":"9f3d2b038344444d","type":"tarball","z":"cd8ee0cc76ab3339","name":"","x":737,"y":1481,"wires":[["f30476ae450cbb1e","c13285606c478f22"]]},{"id":"c13285606c478f22","type":"join","z":"cd8ee0cc76ab3339","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1124,"y":1530,"wires":[["a7ed6808b11f8e5b"]]},{"id":"a7ed6808b11f8e5b","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 78","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1354,"y":1508,"wires":[]}]