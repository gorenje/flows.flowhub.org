[{"id":"cd8ee0cc76ab3339","type":"tab","label":"[NodeDev] Tarball","disabled":false,"info":"### Description\n\nCreate a tarball node for taking tarballs and extracting them or creating them.\n\n","env":[]},{"id":"fe39403a4761c950","type":"group","z":"cd8ee0cc76ab3339","name":"Package: node-red-contrib-tarxz","style":{"label":true},"nodes":["b71e807991a275d5","5868476034d4e156","a67c5b739ed6d017","9dc4e395af011d22","3aec5085a05bbfd2"],"x":1607,"y":85,"w":213,"h":282},{"id":"8c31bb3315ec8dd9","type":"group","z":"cd8ee0cc76ab3339","name":"Check keywords and node types","style":{"label":true},"nodes":["2268f7737dac5acd","c77dcaefa69246c5","2627c3f5ab5f49ff","b683b3cc46540644","89f3821e11a5893d","daf02a8148e6e07d","48e6ca9f385dcd8b","1b019bfe7e34652d","a244645f0f51c818","255e731afc7f818a","489bb1cf9c1ad55a"],"x":1601,"y":449,"w":919,"h":367},{"id":"b5e4c2a8dfe0f6b1","type":"group","z":"cd8ee0cc76ab3339","name":"Package: node-red-contrib-gzip","style":{"label":true},"nodes":["0ea953ede3b7824e","bf1377187fdca785","f96ee816c5ba2325","87182b52a4256293","d369e0a117943066","240514011225521b"],"x":2250,"y":85,"w":208,"h":332},{"id":"ca508ff257281fca","type":"group","z":"cd8ee0cc76ab3339","name":"Package: @ecraneworldwide/node-red-contrib-lz4","style":{"label":true},"nodes":["c93aed0b11e54e6c","9ca692a5ad04212a","c79ef99d985c1027","28f31c912427bd3b","9dd6507db52975c7"],"x":1873.5,"y":85,"w":323,"h":282},{"id":"ad7575c5d36738a8","type":"group","z":"cd8ee0cc76ab3339","name":"Step 1: Import flow for local development","style":{"label":true},"nodes":["4f889903c2f2beae"],"x":92,"y":761,"w":472,"h":82},{"id":"a436276ab3f46ead","type":"group","z":"cd8ee0cc76ab3339","name":"create template node","style":{"label":true},"nodes":["3c6919329feaab4f"],"x":98,"y":888,"w":152,"h":82},{"id":"3c6919329feaab4f","type":"NodeFactory","z":"cd8ee0cc76ab3339","g":"a436276ab3f46ead","name":"tarball","nodename":"tarball","color":"#DEB887","hasbutton":false,"hasinput":true,"outputcount":1,"category":"storage","summary":"Compress and decompress tarballs.","description":"Supports xz and gzip compression.","icon":"font-awesome/fa-archive","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":true,"isplugin":false,"x":174,"y":929,"wires":[[]]},{"id":"2268f7737dac5acd","type":"http request","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://catalogue.nodered.org/catalogue.json?_={{ payload }}","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1810,"y":604,"wires":[["2627c3f5ab5f49ff","48e6ca9f385dcd8b","89f3821e11a5893d","1b019bfe7e34652d","a244645f0f51c818"]]},{"id":"c77dcaefa69246c5","type":"inject","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1707,"y":490,"wires":[["2268f7737dac5acd"]]},{"id":"2627c3f5ab5f49ff","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for tar || tarball as types","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return d.types.indexOf(\"tar\") > 0 || d.types.indexOf(\"tarball\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2132,"y":605,"wires":[["b683b3cc46540644"]]},{"id":"b683b3cc46540644","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 70","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2414,"y":671,"wires":[]},{"id":"89f3821e11a5893d","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for keywords: tar || tarball","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return (d.keywords || []).indexOf(\"tar\") > 0 || (d.keywords || []).indexOf(\"tarball\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2169,"y":550,"wires":[["daf02a8148e6e07d"]]},{"id":"daf02a8148e6e07d","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 71","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2413,"y":604,"wires":[]},{"id":"48e6ca9f385dcd8b","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 72","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2143,"y":493,"wires":[]},{"id":"24fa617954f4195a","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"tarball.js","filename":"nodes/tarball.js","format":"javascript","syntax":"mustache","template":"module.exports = function(RED) {\n  function CoretarballFunctionality(config) {\n    RED.nodes.createNode(this,config);\n\n    var node = this;\n    var cfg = config;\n\n    const tarStream = require('tar-stream');\n    const streamx = require('streamx');\n    const pakoGzip = require('pako');\n    const lzmaNative = require('lzma-native');\n\n    /*\n     * Extract tar files.\n     */\n    var extractTarFile = (tarData, onFile, onFinish, onError) => {\n      const extract = tarStream.extract()\n\n      var allFiles = [];\n\n      extract.on('entry', function (header, stream, next) {\n        // header is the tar header\n        // stream is the content body (might be an empty stream)\n        // call next when you are done with this entry\n\n        var buffer = [];\n\n        stream.on('data', function (data) {\n          buffer.push(data)\n        });\n\n        stream.on('end', function () {\n          //@ts-ignore\n          onFile(header.name, Buffer.concat(buffer))\n\n          allFiles.push({\n            path: header.name,\n            payload: Buffer.concat(buffer)\n          })\n\n          next() // ready for next entry\n        })\n\n        stream.resume() // just auto drain the stream\n      })\n\n      extract.on('finish', function () {\n        onFinish(allFiles)\n      })\n\n      extract.on('error', onError);\n\n      var stream = streamx.Readable.from(Buffer.from(tarData))\n      stream.pipe(extract);\n    }\n\n    /**\n     *  Extract any payload checking the encoding: lz, gzip or none.\n     */\n    var extract = (payload, onFile, onDone, onTarError, onOtherError) => {\n      import('file-type').then(module => {\n        const buffer = new Uint8Array(payload);\n\n        module.fileTypeFromBuffer(buffer).then(d => {\n          switch (d.ext) {\n            case 'gz':\n              extractTarFile(pakoGzip.inflate(buffer), onFile, onDone, onTarError)\n              break\n            case 'tar':\n              extractTarFile(buffer, onFile, onDone, onTarError)\n              break\n            case 'xz':\n              lzmaNative.decompress(Buffer.from(buffer)).then(data => {\n                extractTarFile(data, onFile, onDone, onTarError)\n              }).catch(err => {\n                onOtherError(\"tarball.error.xzcorrupt\", err)\n              })\n              break\n            default:\n              onOtherError(\"tarball.error.formatnotsupported\", err)\n          }\n        }).catch(err => {\n          onOtherError(\"tarball.error.general\", err)\n        })\n      }).catch(err => {\n        onOtherError(\"tarball.error.general\", err)\n      })\n    }\n\n    /**\n     * Compress payload to a tar file without compression.\n     */\n    var compress = (payload, onDone, onError) => {\n      const pack = tarStream.pack()\n\n      var buffer = [];\n\n      pack.on('end', function () {\n        onDone(Buffer.concat(buffer))\n      });\n\n      pack.on('data', function (data) {\n        buffer.push(data)\n      });\n\n      pack.on('error', (err) => {\n        onError(err)\n      })\n\n      payload.forEach((elem) => {\n        if ( elem.path && elem.path != \"\" ) {\n          pack.entry({ name: elem.path }, elem.payload)\n        }\n      })\n\n      pack.finalize()       \n    }\n\n    /*\n     * Close something\n     */\n    node.on('close', function() {\n      node.status({});\n    });\n\n    /* \n      * msg handler, in this case pass the message on unchanged \n      */\n    node.on(\"input\", function(msg, send, done) {\n\n      /* no payload, no dice */\n      if (!msg.hasOwnProperty('payload'))\n        return node.send(msg);\n\n      /** Extraction handlers **/\n      var onFile = (path, content) => {\n        send({\n          ...msg,\n          path: path,\n          payload: content\n        })\n      };\n\n      var onDone = (allFiles) => {\n        send({\n          ...msg,\n          complete: true,\n          payload: allFiles,\n          path: undefined\n        })\n        done();\n      };\n\n      var onTarError = (err) => {\n        msg.error = err\n        done(RED._(\"tarball.error.untar\"), msg)\n      };\n\n      var onOtherError = (localeKey, err) => {\n        msg.error = err\n        done(RED._(localeKey), msg)\n      };\n      \n      /** compression handlers **/\n      var onCompDone = (tardata) => {\n        msg.payload = tardata\n        send(msg)\n        done()\n      };\n\n      var onCompError = (err) => {\n        msg.error = err\n        done(RED._(\"tarball.error.compressfailed\"), msg)\n      };\n      \n      /** handle the payload */\n      switch (typeof msg.payload ) {\n        case 'object':\n          if (Array.isArray(msg.payload)) {\n            compress(msg.payload, onCompDone, onCompError)\n          } else {\n            extract(msg.payload, onFile, onDone, onTarError, onOtherError)\n          }\n          break;\n        default:\n          done(RED._(\"tarball.error.unknownpayload\"), msg)\n      }\n    });\n  }\n\n  RED.nodes.registerType(\"tarball\", CoretarballFunctionality);\n\n}\n","output":"str","x":701,"y":1070,"wires":[["cb2e9bd5342b1cbd"]]},{"id":"cb2e9bd5342b1cbd","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"tarball.html","filename":"nodes/tarball.html","format":"html","syntax":"mustache","template":"<script type=\"text/javascript\">\n(function(){\n  \n\n  function frontendSupportFunction() {\n  }\n\n  var functTwo = (arg) => {\n\n  };\n  \n  RED.nodes.registerType('tarball',{\n    color: '#DEB887',\n    icon: \"font-awesome/fa-archive\",\n    category: 'storage',\n    defaults: {\n      name: {\n        value:\"\",\n      },\n    },\n\n    inputs: 1,\n\n    outputs: 1,\n\n    label: function() {\n      return (this.name || this._def.paletteLabel);\n    },\n\n    labelStyle: function() {\n      return this.name?\"node_label_italic\":\"\";\n    },\n\n    onpaletteadd: function() {\n    },\n\n    oneditprepare: function() {\n    },\n\n    oneditcancel: function() {\n    },\n\n    oneditsave: function() {\n    },\n\n    onpaletteremove: function() {\n    },\n\n\n\n  });\n})();\n</script>\n\n<script type=\"text/html\" data-template-name=\"tarball\">\n  <div class=\"form-row\">\n    <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n    <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n  </div>\n</script>\n\n","output":"str","x":701,"y":1120,"wires":[["c2cbfc640c6d7d9e"]]},{"id":"492c4c7bdbd47cdc","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"mustache","template":"## LICENSE\n\nAdapted from JSON.org, http://www.json.org/license.html\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nRemember the curse of the evil-doer upon whose blood the devil does drink and upon whose flesh the devil does feast. For eternity will the evil-doer bear this Sisyphean burden, only to be relieved of their suffering upon the apocalyptic end of it all including the foundations of the internet, computers, technology and mice. Only after the last AI enters the blue-screen-of-death modus, only then will the evil-doer be freed of their rightful and justified punishment for doing evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTHE CURSE IS PROVIDED \"AS IS\" OR \"WORSE\", NO SOFTENING OF ANY KIND IS HEREBY EXPRESSED, IMPLIED OR OFFERED. MAY ALL EVIL-DOERS SUFFER IN ETERNITY.\n","output":"str","x":701,"y":870,"wires":[["8f8c2491b283219f"]]},{"id":"8f8c2491b283219f","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"README.md","filename":"README.md","format":"markdown","syntax":"mustache","template":"# Tarball\n\nCreate and extract tar archive files.\n\n## Usage\n\nThis node can extract and create tar files, it does this depending on the `msg.payload`:\n\n- if the payload is an array, assume that a tarball should be created\n- if the payload is an `object` then assume the payload is a `Buffer` to be extracted\n\n**Extraction**\n\nExtraction generates a message per file found and a final message with `complete = true` is sent once the file has been completely extracted. The payload of the final complete message is an array of all files extracted.\n\nThis behaviour allows this node to be connected to a join node in manual mode.\n\n\n<p><b>Extraction</b>\n\n<p>\n  Extraction assumes that the msg.payload is an ArrayBuffer with\n  the contents of the tarball. Either encoded in xz format or\n  gzip format.\n\n<p>\n  A message is generated as each file is extracted. All data is encoded\n  in a <code>Buffer</code> object as it is not possible to distinguish between\n  binary content and text content. The message has a <code>path</code> attribute \n  for the file name and <code>payload</code> contains the buffer with the files\n  contents.\n\n<p>\n  Once all files have been extracted, one file message is sent that\n  contains <code>complete</code> set to true and <code>payload</code> being an array containing\n  all files that were extracted. Each file is represented by a hash\n  object: \n<p>\n  <code>\n  {<br>\n    path: \"full path of file\",<br>\n    payload: Buffer.from(\"object containing file contents in Buffer form\")<br>\n  }<br>\n  </code>\n\n\n\n**Compression**\n\n<p>\n  For compression, <code>msg.payload</code> is assumed to be an array containing\n  objects of the form:\n\n<p>\n  <code>\n  {<br>\n    path: \"full/path/in/tar/file.txt\",<br>\n    payload: Buffer.from(\"file contents\"),<br>\n  }<br>\n  </code>\n<p>\n  Payload is assumed to be a <code>Buffer</code> object. If <code>path</code> is not defined, the\n  entry is ignored.\n\n<p>\n  Returned is a tar archive which can then be compressed using \n  <a href=\"https://flows.nodered.org/node/@ecraneworldwide/node-red-contrib-lz4\" target=\"_blank\">Lzma</a>\n  or <a href=\"https://flows.nodered.org/node/node-red-contrib-gzip\" target=\"_blank\">Gzip</a>.\n  \n\n### Artifacts\n\n- [Flow maintaining this code](https://flowhub.org/f/cd8ee0cc76ab3339)\n- [GitHub repo](https://github.com/gorenje/node-red-contrib-tarball)\n- [NPMjs package](https://www.npmjs.com/package/@gregoriusrippenstein/node-red-contrib-tarball)\n- [Node-RED package page](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-tarball)\n\n","output":"str","x":701,"y":920,"wires":[["bbf62b6a3a7c0de8"]]},{"id":"bbf62b6a3a7c0de8","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"CHANGELOG.md","filename":"CHANGELOG.md","format":"markdown","syntax":"mustache","template":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n\n## [0.0.1]\n\n### Initial version\n\nCreated inital node for creating and extracting tarballs.\n\n**Note:** The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n","output":"str","x":701,"y":970,"wires":[["5fd34a2f1a250e74"]]},{"id":"5fd34a2f1a250e74","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"package.json","filename":"package.json","format":"json","syntax":"mustache","template":"{\n  \"name\" : \"{{{ pname }}}\",\n  \"version\": \"{{{ pversion }}}\",\n  \"dependencies\": {\n    \"pako\": \">=2.1.0\",\n    \"tar-stream\": \">=3.1.6\",\n    \"streamx\": \">=2.15.5\",\n    \"lzma-native\": \">=8.0.6\",\n    \"file-type\": \">=18.7.0\"\n  }, \n\n  \"description\": \"{{{ pdescription }}}\",\n  \"keywords\": [\n    \"node-red\",\n    \"tar\",\n    \"xz\",\n    \"gzip\",\n    \"tarball\",\n    \"archive\"\n  ],\n\n  \"license\": \"Don't do evil.\",\n  \"homepage\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}#readme\",\n  \"author\": \"{{{ pauthorname }}} <{{{ pauthoremail }}}>\",\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n\n  \"node-red\" : {\n    \"version\": \">=3.0.0\",\n    \"nodes\": {\n       \"tarball\": \"nodes/tarball.js\"\n    }\n  },\n\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/{{ githubowner }}/{{ githubrepo }}\"\n  }\n}\n","output":"str","x":701,"y":1020,"wires":[["24fa617954f4195a"]]},{"id":"b71e807991a275d5","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"package.json","filename":"package.json","format":"json","syntax":"plain","template":"{\n    \"name\": \"node-red-contrib-tarxz\",\n    \"version\": \"0.0.1\",\n    \"description\": \"A Node-RED node to compress and decompress to xz-tarball format\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\":\"https://github.com/frerepoulet/node-red-contrib.git\",\n        \"path\": \"/tree/master/tarxz\"\n    },\n    \"author\": \"Olivier Robitaille\",\n    \"license\": \"MIT License\",\n    \"engines\": {\n      \"node\": \">=4\"\n    },\n    \"dependencies\": {\n        \"tar-fs\": \"1.15.*\",\n        \"xz\": \"1.2.*\"\n    },\n    \"keywords\": [ \"node-red\", \"tar\", \"xz\" ],\n    \"node-red\": {\n        \"nodes\": {\n            \"tar.xz\": \"tarxz.js\"\n        }\n    }\n}\n","output":"str","x":1703,"y":126,"wires":[["5868476034d4e156"]]},{"id":"5868476034d4e156","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"README.md","filename":"README.md","format":"markdown","syntax":"plain","template":"# node-red-nodes\nTar.xz node for Node-RED.  Compress/decompress tar.xz files.\n\nTakes a Filename and checks whether it needs to be compressed or decompressed.\nPerforms operation in place.\n\nTODO\n* Compression levels (current default:6/9)\n* Mustache templating\n* Custom archive name\n","output":"str","x":1703,"y":176,"wires":[["a67c5b739ed6d017"]]},{"id":"a67c5b739ed6d017","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"tarxz.js","filename":"tarxz.js","format":"javascript","syntax":"plain","template":"module.exports = function(RED) {\n  const fs = require('fs');\n  const tar = require('tar-fs');\n  const xz = require('xz');\n  const path = require('path');\n  var node;\n\n  function handleError(error) {\n    node.error(error);\n    node.status({fill:'red', shape:'ring', text:'Error'});\n  }\n\n  function decompress(filename) {\n    const p = path.parse(filename);\n\n    var d = require('domain').create();\n    d.on('error', function(e){handleError(e)});\n    d.run(function() {\n      tar.pack(filename)\n      .pipe(new xz.Compressor())\n      .pipe(fs.createWriteStream(p.dir + '/' + p.name + '.tar.xz'));\n    })\n  }\n\n  function decompress(filename) {\n    const outFile = path.dirname(filename);\n\n    var d = require('domain').create();\n    d.on('error', function(e){handleError(e)});\n    d.run(function() {\n      fs.createReadStream(filename)\n      .pipe(new xz.Decompressor())\n      .pipe(tar.extract(outFile));\n    })\n  }\n\n  function TarXZNode(n) {\n    RED.nodes.createNode(this, n);\n    this.filename = n.filename;\n    node = this;\n\n    this.on('input', function(msg) {\n      const filename = node.filename || msg.filename || '';\n\n      if (!node.filename) {\n        node.status({fill:'grey', shape:'dot', text:filename});\n      }\n\n      if (filename === '') {\n        node.warn('No filename specified');\n      } else if (fs.existsSync(filename)) {\n        if (fs.lstatSync(filename).isFile()) {\n          var p = path.parse(filename); // {root, dir, base, ext, name}\n          if (p.ext === '.xz') {\n            if (path.extname(p.name) === '.tar') {\n              decompress(filename);\n            } else {\n              node.error('Invalid file format (not tar)');\n            }\n          } else {\n            compress(filename);\n          }\n        } else if (fs.lstatSync(filename).isDirectory()) {\n          compress(filename);\n        } else {\n          node.error('Filename not a file or directory');\n        }\n      } else {\n        node.error('No such file or directory');\n      }\n\n      msg.filename = filename;\n      node.send(msg);\n    });\n  }\n  RED.nodes.registerType('tar.xz', TarXZNode);\n}\n","output":"str","x":1703,"y":226,"wires":[["9dc4e395af011d22"]]},{"id":"9dc4e395af011d22","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"archive.png","filename":"icons/archive.png","format":"base64","syntax":"plain","template":"iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5rAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAANdJREFUeNpiYBgFlAJGZM7///8bsKh5wMjIuAAqnwCkFIB4A1DsAkHT/2MH+5Hk90PF3gOxATEu/I/NhUC8EMqOh7oQBD4AsSNel/4nHeB0KaleRjEU2QwmKkSsALUNRAEsRKhRQEpOCqSmw/9kJWYgINbLoKRRCMSCUFwIFSMOYIlBByxqHNAVEWvgeSwGOEDFzuMykImAd0EA2ZUOaHIkefk+VMwAxIZiA6jYfXK8DAIFWNQUkBuGMDAfGo4OUPZ/fAbSPR2SDEaggeilTeNovT3wACDAAMVijqI5WiJpAAAAAElFTkSuQmCC","output":"str","x":1703,"y":276,"wires":[["3aec5085a05bbfd2"]]},{"id":"3aec5085a05bbfd2","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"fe39403a4761c950","name":"tarxz.html","filename":"tarxz.html","format":"html","syntax":"plain","template":"<script type=\"text/javascript\">\n    RED.nodes.registerType('tar.xz',{\n        category: 'function',\n        color: '#3FADB5',\n        defaults: {\n            name: {value:\"\"},\n            filename: {value:\"\"}\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"archive.png\",\n        label: function() {\n            return this.name || \"tar.xz\";\n        }\n    });\n</script>\n\n<script type=\"text/x-red\" data-template-name=\"tar.xz\">\n    <div class=\"form-row\">\n        <label for=\"node-input-name\"><i class=\"icon-tag\"></i> Name</label>\n        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-input-filename\"><i class=\"icon-tag\"></i> Filename</label>\n        <input type=\"text\" id=\"node-input-filename\" placeholder=\"Filename\">\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"tar.xz\">\n    <p>A simple node to compress or decompress tarxz format</p>\n    <p>If <i>Filename</i> property or <code>msg.filename</code> is tar.xz file format, it will be decompressed and unpacked.</p>\n    <p>Otherwise, it will be packed and compressed.</p>\n    <p>Performs operation in place.</p>\n</script>\n","output":"str","x":1703,"y":326,"wires":[[]]},{"id":"a01240fc1a24f5f8","type":"NodeDevOps","z":"cd8ee0cc76ab3339","name":"","pname":"@gregoriusrippenstein/node-red-contrib-tarball","pversion":"0.0.1","pauthorname":"Gerrit Riessen","pauthoremail":"gerrit@openmindmap.org","pdescription":"Create tar files and extract tarballs in xz and gzip formats","noderedinstall":false,"randompackagename":false,"ignore_package_check":false,"gitcommit":true,"gitcheckforchange":false,"githubowner":"gorenje","githubrepo":"node-red-contrib-tarball","githubbranch":"main","githubauthor":"Gerrit Riessen","githubauthoremail":"gerrit@openmindmap.org","githubmessage":"updates","npmpublish":false,"npmunpublish":false,"npmotp":"","x":494,"y":702,"wires":[["492c4c7bdbd47cdc"]]},{"id":"c2cbfc640c6d7d9e","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"locales-enUS-tarball.html","filename":"nodes/locales/en-US/tarball.html","format":"html","syntax":"plain","template":"<script type=\"text/html\" data-help-name=\"tarball\">\n    <p>Compress and extract tarballs in xz and gzip format.</p>\n<p>\n  Supports xz and gzip compression.\n\n<p><b>Compression</b>\n\n<p>\n  For compression, <code>msg.payload</code> is assumed to be an array containing\n  objects of the form:\n\n<p>\n  <code>\n  {<br>\n    path: \"full/path/in/tar/file.txt\",<br>\n    payload: Buffer.from(\"file contents\"),<br>\n  }<br>\n  </code>\n<p>\n  Payload is assumed to be a <code>Buffer</code> object. If <code>path</code> is not defined, the\n  entry is ignored.\n\n<p>\n  Returned is a tar archive which can then be compressed using \n  <a href=\"https://flows.nodered.org/node/@ecraneworldwide/node-red-contrib-lz4\" target=\"_blank\">Lzma</a>\n  or <a href=\"https://flows.nodered.org/node/node-red-contrib-gzip\" target=\"_blank\">Gzip</a>.\n  \n<p><b>Extraction</b>\n\n<p>\n  Extraction assumes that the msg.payload is an ArrayBuffer with\n  the contents of the tarball. Either encoded in xz format or\n  gzip format.\n\n<p>\n  A message is generated as each file is extracted. All data is encoded\n  in a <code>Buffer</code> object as it is not possible to distinguish between\n  binary content and text content. The message has a <code>path</code> attribute \n  for the file name and <code>payload</code> contains the buffer with the files\n  contents.\n\n<p>\n  Once all files have been extracted, one file message is sent that\n  contains <code>complete</code> set to true and <code>payload</code> being an array containing\n  all files that were extracted. Each file is represented by a hash\n  object: \n<p>\n  <code>\n  {<br>\n    path: \"full path of file\",<br>\n    payload: Buffer.from(\"object containing file contents in Buffer form\")<br>\n  }<br>\n  </code>\n\n</script>","output":"str","x":818,"y":1173,"wires":[["3983bf5043da24bb"]]},{"id":"3983bf5043da24bb","type":"PkgFile","z":"cd8ee0cc76ab3339","name":"locales-enUS-tarball.json","filename":"nodes/locales/en-US/tarball.json","format":"json","syntax":"plain","template":"{\n    \"tarball\": {\n        \"error\": {\n            \"general\": \"error occurred\",\n            \"formatnotsupported\": \"format not supported\",\n            \"untar\": \"error while untarring file\",\n            \"xzcorrupt\": \"Lzma/Xz data corrupt\",\n            \"unknownpayload\": \"type of msg.payload is not supported\",\n            \"compressfailed\": \"tar creation failed\"\n        }\n    }\n}\n","output":"str","x":822,"y":1231,"wires":[["2d6fa2014885c962"]]},{"id":"5afb086eb3699201","type":"inject","z":"cd8ee0cc76ab3339","name":"","props":[{"p":"owner","v":"gorenje","vt":"str"},{"p":"repo","v":"millieons.org","vt":"str"},{"p":"branch","v":"4","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":1046,"y":2093,"wires":[["3b5cc7ae034db259"]]},{"id":"f30476ae450cbb1e","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 74","active":false,"tosidebar":false,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":1082,"y":1430,"wires":[]},{"id":"055433c6742f9e92","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tar.xz","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":489,"y":1403,"wires":[[]]},{"id":"7cb4fa91454bf967","type":"inject","z":"cd8ee0cc76ab3339","name":"","props":[{"p":"owner","v":"gorenje","vt":"str"},{"p":"repo","v":"millieons.org","vt":"str"},{"p":"branch","v":"4","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":236,"y":1414,"wires":[["055433c6742f9e92","947ca8fd37a7e4af","e935a510275bf6a8"]]},{"id":"9c62c13293999c23","type":"catch","z":"cd8ee0cc76ab3339","name":"","scope":null,"uncaught":false,"x":724,"y":1407,"wires":[["9adef917fd4bb985"]]},{"id":"9adef917fd4bb985","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 75","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":964,"y":1374,"wires":[]},{"id":"947ca8fd37a7e4af","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tar","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":458,"y":1462,"wires":[[]]},{"id":"e935a510275bf6a8","type":"file in","z":"cd8ee0cc76ab3339","name":"","filename":"/tmp/fubar.tgz","filenameType":"str","format":"","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":422,"y":1514,"wires":[["31a178798a611f5a"]]},{"id":"a244645f0f51c818","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for file-type || filetype as types","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return d.types.indexOf(\"file-type\") > 0 || d.types.indexOf(\"filetype\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2080,"y":716,"wires":[["489bb1cf9c1ad55a"]]},{"id":"489bb1cf9c1ad55a","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 76","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2382,"y":775,"wires":[]},{"id":"1b019bfe7e34652d","type":"function","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"check for keywords: filetype || file-type","func":"msg.payload.modules = msg.payload.modules.filter( d => {\n    return (d.keywords || []).indexOf(\"filetype\") > 0 || (d.keywords || []).indexOf(\"file-type\") > 0\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2114,"y":657,"wires":[["255e731afc7f818a"]]},{"id":"255e731afc7f818a","type":"debug","z":"cd8ee0cc76ab3339","g":"8c31bb3315ec8dd9","name":"debug 77","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2403,"y":727,"wires":[]},{"id":"c13285606c478f22","type":"join","z":"cd8ee0cc76ab3339","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1539,"y":2087,"wires":[["7638f4f2ebb09158"]]},{"id":"0ea953ede3b7824e","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"package.json","filename":"package.json","format":"json","syntax":"plain","template":"{\n  \"name\": \"node-red-contrib-gzip\",\n  \"version\": \"0.0.3\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/librae8226/node-red-contrib-gzip\"\n  },\n  \"description\": \"gzip compress or decompress, using pako\",\n  \"keywords\": [\n    \"node-red\",\n    \"gzip\"\n  ],\n  \"author\": \"Librae\",\n  \"license\": \"ISC\",\n  \"node-red\": {\n    \"nodes\": {\n      \"markdown\": \"lib/gzip.js\"\n    }\n  },\n  \"dependencies\": {\n    \"pako\": \"1.0.4\",\n    \"text-encoding\": \"^0.6.4\"\n  }\n}\n","output":"str","x":2346,"y":126,"wires":[["bf1377187fdca785"]]},{"id":"bf1377187fdca785","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"README.md","filename":"README.md","format":"markdown","syntax":"plain","template":"Gzip NodeRED Node\n=================\n\nThis is a node used in Node-RED, based on [pako](https://github.com/nodeca/pako)\n\nInstall\n-------\n\n`npm install node-red-contrib-gzip`\n","output":"str","x":2346,"y":176,"wires":[["f96ee816c5ba2325"]]},{"id":"f96ee816c5ba2325","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"plain","template":"Copyright (c) 2017, Librae <librae8226@gmail.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n","output":"str","x":2346,"y":226,"wires":[["87182b52a4256293"]]},{"id":"87182b52a4256293","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"gzip.js","filename":"lib/gzip.js","format":"javascript","syntax":"plain","template":"/**\n * Copyright JS Foundation and other contributors, http://js.foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nmodule.exports = function(RED) {\n    var pako = require('pako');\n    var txtd = require('text-encoding');\n\n    function GzipNode(n) {\n        RED.nodes.createNode(this,n);\n        var node = this;\n        this.on(\"input\", function(msg) {\n            if (msg.hasOwnProperty(\"payload\")) {\n                if (typeof msg.payload === \"object\") {\n                    try {\n                        var out = pako.inflate(msg.payload);\n                        msg.payload = new txtd.TextDecoder('utf-8').decode(out);\n                        node.send(msg);\n                    } catch(e) {\n                      node.error(e, msg);\n                    }\n                } else if (typeof msg.payload === \"string\") {\n                    try {\n                        var out = pako.deflate(msg.payload);\n                        msg.payload = out;\n                        node.send(msg);\n                    } catch(e) {\n                        node.error(e, msg);\n                    }\n                } else {\n                    node.error('dropped', msg);\n                }\n            } else {\n              // If no payload - just pass it on.\n              node.send(msg);\n            }\n        });\n    }\n    RED.nodes.registerType(\"gzip\", GzipNode);\n}\n","output":"str","x":2346,"y":276,"wires":[["d369e0a117943066"]]},{"id":"d369e0a117943066","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"gzip.html","filename":"lib/gzip.html","format":"html","syntax":"plain","template":"<!--\n  Copyright JS Foundation and other contributors, http://js.foundation\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n\n<script type=\"text/x-red\" data-template-name=\"gzip\">\n    <div class=\"form-row\">\n\t<label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n\t<input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"gzip\">\n    <p>If the input is a compressed buffer it tries to decompress to a utf8 string.</p>\n    <p>If the input is a normal string it creates a compressed buffer.</p>\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('gzip',{\n        category: 'function',\n        color:\"#DEBD5C\",\n        defaults: {\n            name: {value:\"\"}\n        },\n        inputs:1,\n        outputs:1,\n        icon: \"gzip.png\",\n        label: function() {\n            return this.name||\"gzip\";\n        },\n        labelStyle: function() {\n            return this.name?\"node_label_italic\":\"\";\n        }\n    });\n</script>\n","output":"str","x":2346,"y":326,"wires":[["240514011225521b"]]},{"id":"240514011225521b","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"b5e4c2a8dfe0f6b1","name":"gzip.png","filename":"lib/icons/gzip.png","format":"base64","syntax":"plain","template":"iVBORw0KGgoAAAANSUhEUgAAABQAAAAeCAYAAAAsEj5rAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAbsAAAG7AEedTg1AAAAB3RJTUUH4QMKADstQLxLfgAAAVxJREFUSMftlU1KxTAQxyfpo0V4CKJbBd3rAbyCCw/gQTyDJ3DhCTxFcVuem9KVj364KbgQhLb40SZ/N+kjDf32LQQdKCkzk1+m/6QToj9nrH4BcD1h3j1jLOnNwDR7BnCyTeAwFPOsG4r51oDqmwJjDaHiXF9X+aThTxhjx33ANpi5mNU4LowxIqJFxwSLiKK2gJRSArAtyzrUCxrSUERRtOzKDYLgFIDQJ9Sxrk9itm3vdQEdx5G91bVUKNX4qca17/sHGwGFuDVzu4DCAALAR5qm53VelmVXRrzqA5Zq/NqIKcRDnROG4RmANwP43gdsJAFYua7LiYg8z1sCeNRkQNum9Gn4kiTJUR0viuLO0HUSUOR5flHH4ji+BBCq5wnAeirwdaghanqPOofliCa7GO0kov2yLCPOucM539F/yaqqdqWUo64A/OguUc2Bb/uS+v1AfVNu6N/m2Dej+Zklz/ZygQAAAABJRU5ErkJggg==","output":"str","x":2346,"y":376,"wires":[[]]},{"id":"2118db613e14e906","type":"function","z":"cd8ee0cc76ab3339","name":"function 24","func":"if ( msg.path && msg.path.match( /\\.md$/ ) ) {\n    msg.payload = msg.payload.toString( 'utf8')\n}\n\nif ( msg.path ) {\n    var paths = msg.path.split(\"/\")\n    if ( paths.length > 1 ) {\n        msg.path = paths.slice(1).join(\"/\")\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1399,"y":2161,"wires":[["c13285606c478f22"]]},{"id":"386ad43855ec55d5","type":"NodeFactory","z":"cd8ee0cc76ab3339","name":"","nodename":"ss","color":"#e5e4ef","hasbutton":false,"hasinput":true,"outputcount":1,"category":"ss","summary":"s","description":"s","icon":"font-awesome/fa-industry","frt2bakcomm":false,"bak2frtcomm":false,"createmanifest":false,"isplugin":false,"x":1872,"y":2145,"wires":[[]]},{"id":"dadd687bd8474d63","type":"function","z":"cd8ee0cc76ab3339","name":"gzip encode","func":"\nmsg.payload = pako.deflate(msg.payload)\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"pako","module":"pako"}],"x":1758,"y":2087,"wires":[["386ad43855ec55d5"]]},{"id":"c93aed0b11e54e6c","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"ca508ff257281fca","name":"package.json","filename":"package.json","format":"json","syntax":"plain","template":"{\n  \"name\": \"@ecraneworldwide/node-red-contrib-lz4\",\n  \"version\": \"1.1.1\",\n  \"description\": \"lz4 compress or decompress\",\n  \"main\": \"lz4.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"node-red\",\n    \"lz4\"\n  ],\n  \"author\": \"Glenn Matthys\",\n  \"license\": \"Unlicense\",\n  \"dependencies\": {\n    \"lz4\": \"^0.6.3\"\n  },\n  \"node-red\": {\n    \"nodes\": {\n      \"lz4\": \"lz4.js\"\n    }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ECraneWorldwide/node-red-contrib-lz4.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/ECraneWorldwide/node-red-contrib-lz4/issues\"\n  },\n  \"homepage\": \"https://github.com/ECraneWorldwide/node-red-contrib-lz4#readme\"\n}\n","output":"str","x":1969.5,"y":126,"wires":[["9ca692a5ad04212a"]]},{"id":"9ca692a5ad04212a","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"ca508ff257281fca","name":"LICENSE","filename":"LICENSE","format":"text","syntax":"plain","template":"This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n","output":"str","x":1969.5,"y":176,"wires":[["c79ef99d985c1027"]]},{"id":"c79ef99d985c1027","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"ca508ff257281fca","name":"lz4.html","filename":"lz4.html","format":"html","syntax":"plain","template":"<script type=\"text/x-red\" data-template-name=\"lz4\">\n    <div class=\"form-row\">\n\t      <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> <span data-i18n=\"node-red:common.label.name\"></span></label>\n\t      <input type=\"text\" id=\"node-input-name\" data-i18n=\"[placeholder]node-red:common.label.name\">\n    </div>\n    <div class=\"form-row\">\n        <label for=\"node-input-datatype\"><i class=\"fa fa-file-text\"></i> Decompress as</label>\n        <select id=\"node-input-datatype\" style=\"width:70%;\">\n            <option value=\"buffer\">a Buffer</option>\n            <option value=\"utf8\">a String</option>\n            <option value=\"json\">a parsed JSON object</option>\n        </select>\n    </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"lz4\">\n    <p>If the input is a compressed buffer (lz4 magic bytes detected) it tries to decompress into the requested output type.</p>\n    <p>If the input is an uncompressed buffer (lz4 magic bytes not detected) it tries to compress to a buffer.</p>\n    <p>If the input is a string it creates a compressed buffer from the string.</p>\n    <p>If the input is a an object, it converts it to JSON and then creates a compressed buffer.</p>\n</script>\n\n<script type=\"text/javascript\">\n    RED.nodes.registerType('lz4',\n        {\n            category:   'function',\n            color:      '#DEBD5C',\n            defaults:\n            {\n                name:     { value: '' },\n                datatype: { value: 'buffer' }\n            },\n            icon:       'file.png',\n            inputs:     1,\n            label:      function() { return this.name || 'lz4'; },\n            labelStyle: function() { return this.name ? 'node_label_italic' : ''; },\n            outputs:    1\n        }\n    );\n</script>","output":"str","x":1969.5,"y":226,"wires":[["28f31c912427bd3b"]]},{"id":"28f31c912427bd3b","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"ca508ff257281fca","name":"lz4.js","filename":"lz4.js","format":"javascript","syntax":"plain","template":"const lz4           = require('lz4');\n\nconst LZ_SIGNATURE  = Buffer.from([0x04, 0x22, 0x4D, 0x18]);\nconst CHAR_ENC      = 'utf8';\nconst TYPE_STRING   = 'string';\nconst TYPE_OBJECT   = 'object';\nconst OUTPUT_BUFFER = 'buffer';\nconst OUTPUT_UTF8   = 'utf8';\nconst OUTPUT_JSON   = 'json';\n\nfunction tryDecode(msg, node, output)\n{\n    try\n    {\n        msg.payload = lz4.decode(msg.payload);\n\n        switch (output)\n        {\n            case OUTPUT_UTF8:\n                msg.payload = msg.payload.toString(CHAR_ENC);\n                break;\n            case OUTPUT_JSON:\n                msg.payload = JSON.parse(msg.payload.toString(CHAR_ENC));\n                break;\n        }\n\n        return node.send(msg);\n    }\n    catch (e)\n    {\n        return node.error(e, msg);\n    }\n}\n\nfunction tryEncode(msg, node)\n{\n    try\n    {\n        msg.payload = lz4.encode(msg.payload);\n        return node.send(msg);\n    }\n    catch (e)\n    {\n        return node.error(e, msg);\n    }\n}\n\n\nmodule.exports = function(RED)\n{\n    function Lz4Node(n)\n    {\n        RED.nodes.createNode(this, n);\n\n        const node = this;\n        const datatype = n.datatype;\n\n        this.on(\n            'input',\n            function(msg)\n            {\n                if (!msg.hasOwnProperty('payload'))\n                    return node.send(msg);\n\n                const value = msg.payload;\n\n                if(Buffer.isBuffer(value))\n                {\n                    if(value.slice(0, 4).equals(LZ_SIGNATURE))\n                        return tryDecode(msg, node, datatype);\n                    else\n                        return tryEncode(msg, node);\n                }\n\n                switch (typeof value)\n                {\n                    case TYPE_STRING:\n                        msg.payload = Buffer.from(value, CHAR_ENC);\n                        return tryEncode(msg, node);\n\n                    case TYPE_OBJECT:\n                        msg.payload = Buffer.from(JSON.stringify(value), CHAR_ENC);\n                        return tryEncode(msg, node);\n                }\n\n                return node.send(msg);\n            }\n        );\n    }\n\n    RED.nodes.registerType('lz4', Lz4Node);\n};","output":"str","x":1969.5,"y":276,"wires":[["9dd6507db52975c7"]]},{"id":"9dd6507db52975c7","type":"PkgFile","z":"cd8ee0cc76ab3339","g":"ca508ff257281fca","name":"README.md","filename":"README.md","format":"markdown","syntax":"plain","template":"Node-RED lz4 compression module\n===============================\n\nInstall\n-------\n\n`npm install @ecraneworldwide/node-red-contrib-lz4`","output":"str","x":1969.5,"y":326,"wires":[[]]},{"id":"4f889903c2f2beae","type":"FlowHubPull","z":"cd8ee0cc76ab3339","g":"ad7575c5d36738a8","name":"","notab":false,"flowid":"d0506e991d512ace","flowname":"[Introspection] Develop Node-RED nodes in Node-RED","flowrevision":"","x":328,"y":802,"wires":[[]]},{"id":"2d6fa2014885c962","type":"link out","z":"cd8ee0cc76ab3339","name":"link out 124","mode":"link","links":["963dfb765b0d9849"],"x":1128,"y":1234,"wires":[]},{"id":"3b5cc7ae034db259","type":"function","z":"cd8ee0cc76ab3339","name":"get tarball","func":"try {\n    var octokit = new octokitRest.Octokit({ \n        auth: process.env.GITHUB_TOKEN \n    });\n} catch(e) {\n    node.error(\"init octokit\", {\n        ...msg,\n        error: e\n    })\n    return undefined;\n}\n\n/**\n * Msg attributes:\n *   - owner: github repo owner\n *   - repo: github repo name\n *   - branch: github branch\n * \n * Return:\n *   - payload: arrayBuffer of tarball content\n * \n * Discussion:\n * \n *   This request returns a redirect URL that octokit \n *   automagically follows.\n * \n */\n\ntry {\n    octokit.request(\"GET /repos/:owner/:repo/tarball/:branch\", {\n        owner: msg.owner,\n        repo: msg.repo,\n        branch: msg.branch\n    }).then( (resp) => {\n        node.send({ ...msg, payload: resp.data })\n    }).catch(function (e) {\n         node.error(\"obtaining tree\", { ...msg, error: e })\n    });\n\n} catch (e) {\n    node.error(\"something went wrong\", { ...msg, error: e})\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"octokitRest","module":"@octokit/rest"},{"var":"process","module":"process"}],"x":1164,"y":2163,"wires":[["cd5aaf765460da2c"]]},{"id":"31a178798a611f5a","type":"tarball","z":"cd8ee0cc76ab3339","name":"","x":767,"y":1547,"wires":[["f30476ae450cbb1e"]]},{"id":"cd5aaf765460da2c","type":"tarball","z":"cd8ee0cc76ab3339","name":"","x":1282,"y":2093,"wires":[["2118db613e14e906"]]},{"id":"7638f4f2ebb09158","type":"tarball","z":"cd8ee0cc76ab3339","name":"","x":1647,"y":2148,"wires":[["dadd687bd8474d63"]]},{"id":"6ee0b68cedc4b83a","type":"template","z":"cd8ee0cc76ab3339","name":"tgz in base64","field":"payload","fieldType":"msg","format":"text","syntax":"mustache","template":"H4sIAMI1X2UAA+3UMQ7DIAxAUY7CCSpwXDhPMqRjJEqWVr173WSI1KHJgqJK/y2WgMHLZ5yHvuil\n3h6umWCS6jLN9zTiol4lq0RJdh6j2vCh3Uqb+V774r0r01R/vdu7/1PP19kb4Ezjp/+2+R/oP6z9\np06y/QXWf5cz/QMAAAAAAAAAAAAAAAB73tVQ4mUAKAAA","output":"str","x":368,"y":1660,"wires":[["652d835cf20ac714"]]},{"id":"b9e2dee2272b4771","type":"inject","z":"cd8ee0cc76ab3339","name":"trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":139,"y":1660,"wires":[["6ee0b68cedc4b83a"]]},{"id":"652d835cf20ac714","type":"function","z":"cd8ee0cc76ab3339","name":"buffer from base64","func":"msg.payload = Buffer.from( msg.payload, 'base64')\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":606,"y":1659,"wires":[["3716b754a526bb53"]]},{"id":"3716b754a526bb53","type":"tarball","z":"cd8ee0cc76ab3339","name":"","x":813,"y":1659,"wires":[["667f5c64a8337791","ee3f6ebc1cc89ebf"]]},{"id":"667f5c64a8337791","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 78","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1013,"y":1659,"wires":[]},{"id":"21ee8319c857dd31","type":"template","z":"cd8ee0cc76ab3339","name":"tar in base64","field":"payload","fieldType":"msg","format":"text","syntax":"mustache","template":"ZnViYXI0LnRnegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAwMDAw\nMAAwMDAwMDAwADAwMDAwMDAwMDAyADE0NTI3NDIxMjYwADAxMTQ2MAAgMAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAHJvb3QAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAcm9vdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7\nfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZ1\nYmFyLnR4dAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwNjQ0ADAwMDAwMDAA\nMDAwMDAwMAAwMDAwMDAwMDAwMAAxNDUyNzYzMjcyMQAwMTE0MTMAIDAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIgIAByb290AAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAHJvb3QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==","output":"str","x":378,"y":1725,"wires":[["652d835cf20ac714"]]},{"id":"f1320fdd263595a8","type":"inject","z":"cd8ee0cc76ab3339","name":"trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":139,"y":1725,"wires":[["21ee8319c857dd31"]]},{"id":"ee3f6ebc1cc89ebf","type":"join","z":"cd8ee0cc76ab3339","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":974,"y":1754.5,"wires":[["a09c4405e34fe48d"]]},{"id":"a09c4405e34fe48d","type":"debug","z":"cd8ee0cc76ab3339","name":"debug 79","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1203,"y":1754.5,"wires":[]},{"id":"fcf8ec5105832160","type":"template","z":"cd8ee0cc76ab3339","name":"tar.xz in base64","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"/Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4Cf/AH5dADMdSGeLFokrDjC9qR21WQNNrv4YbkrbIQlk\nPhwyKsPZwGbWrA1ZZtDdiCHDSMF4qhlgR9WXMWXaCptAM4IaNeqSa/bzMb+GJd2dU1PiJdB2q8LW\nJfUnQXh53UormzjLkxPxg3m+yzrAhla6gNUA2xD0oK3g9mZqLu9MQQ0YAAAAAG1WYhsIyrg6AAGa\nAYBQAADDUC3DscRn+wIAAAAABFla","output":"str","x":368,"y":1800.5,"wires":[["652d835cf20ac714"]]},{"id":"3ee2994b6b14dd46","type":"inject","z":"cd8ee0cc76ab3339","name":"trigger","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":139,"y":1800.5,"wires":[["fcf8ec5105832160"]]}]