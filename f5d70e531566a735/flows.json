[{"id":"f5d70e531566a735","type":"tab","label":"[test] import Node-RED node catalogue as nodes","disabled":false,"info":"### Description\n\n**Experimental.**\n\nConvert the [node cataloge](https://catalogue.nodered.org/catalogue.json) to a collection of nodes that can be imported into Node-RED.\n\n","env":[]},{"id":"206d219714878a64","type":"http request","z":"f5d70e531566a735","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://catalogue.nodered.org/catalogue.json?_={{ payload }}","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":703,"y":540,"wires":[["f544e75095b4b089","a8c8046b85956ed1"]]},{"id":"db7468f93f6d28c4","type":"inject","z":"f5d70e531566a735","name":"Generate initial data","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","x":415.1111068725586,"y":540,"wires":[["206d219714878a64"]]},{"id":"f544e75095b4b089","type":"debug","z":"f5d70e531566a735","name":"debug 48","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":930,"y":700.7222290039062,"wires":[]},{"id":"a8c8046b85956ed1","type":"function","z":"f5d70e531566a735","name":"function 14","func":"var keywords = {};\nconst ModLimit = 100;\n\nvar keywordNode = (keyword) => {\n    return {\n        \"id\": RED.util.generateId(),\n        \"type\": \"Topic\",\n        \"name\": keyword,\n        \"info\": \"\",\n        \"sumPass\": false,\n        \"sumPassPrio\": 0,\n        \"sumPassNodeId\": \"\",\n        \"createdAt\": new Date(),\n        \"updatedAt\": new Date(),\n        \"x\": 0,\n        \"y\": 20,\n        \"wires\": [\n            []\n        ]\n    }\n}\n\nvar developers = {};\n\nvar developerNode = (name) => {\n    return {\n        \"id\": RED.util.generateId(),\n        \"type\": \"Author\",\n        \"name\": name,\n        \"info\": \"\",\n        \"sumPass\": false,\n        \"sumPassPrio\": 0,\n        \"sumPassNodeId\": \"\",\n        \"createdAt\": new Date(),\n        \"updatedAt\": new Date(),\n        \"x\": 0,\n        \"y\": 20,\n        \"wires\": [\n            []\n        ]\n    }\n}\n\nmsg.payload = msg.payload.modules.slice(0, ModLimit).map( (mod) => {\n    var node = {\n        \"id\": RED.util.generateId(),\n        \"type\": \"Text\",\n        \"name\": mod.id,\n        \"info\": mod.description,\n        \"sumPass\": false,\n        \"sumPassPrio\": 0,\n        \"sumPassNodeId\": \"\",\n        \"createdAt\": mod.updated_at,\n        \"updatedAt\": mod.updated_at,\n        \"x\": 446,\n        \"y\": 788,\n        \"wires\": [\n            []\n        ]\n    };\n\n    (mod.keywords || []).forEach(function(kword) {\n        if ( !keywords[kword] ) {\n            keywords[kword] = keywordNode(kword)\n        }\n        keywords[kword].wires[0].push( node.id )\n    });\n\n    var devname = mod.id.split(\"/\")\n    if ( devname.length > 1 ) {\n        if ( !developers[devname[0]] ) {\n            developers[devname[0]] = developerNode(devname[0])\n        }\n        node.wires[0].push(developers[devname[0]].id)\n    }\n\n    return node;\n})\n\n\nmsg.payload = msg.payload.concat(Object.values(keywords)).concat(Object.values(developers))\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":929,"y":405,"wires":[["aaddef4995cb8214","b9e6005780e0386f"]]},{"id":"aaddef4995cb8214","type":"debug","z":"f5d70e531566a735","name":"debug 49","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1149,"y":254,"wires":[]},{"id":"740780e56a0cf863","type":"ClientCode","z":"f5d70e531566a735","name":"","clientcode":"setTimeout(() => {\n            RED.clipboard.import();\n        \n            setTimeout(() => {\n                $('#red-ui-clipboard-dialog-import-text').val(\n                   data.payload\n                ).trigger(\"paste\");\n            }, 300);\n        },400)","format":"javascript","x":1281,"y":612,"wires":[[]]},{"id":"b9e6005780e0386f","type":"json","z":"f5d70e531566a735","name":"","property":"payload","action":"str","pretty":false,"x":1076,"y":514,"wires":[["740780e56a0cf863"]]},{"id":"72aa75f8672f4cab","type":"AutoAlign","z":"f5d70e531566a735","name":"","algname":"ELKjs Box algorithm","x":588,"y":748,"wires":[]}]