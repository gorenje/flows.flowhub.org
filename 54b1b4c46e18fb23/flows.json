[{"id":"54b1b4c46e18fb23","type":"tab","label":"[Introspection] Capture deploy event","disabled":false,"info":"::: aim\n\nCapture the client-side deploy event triggered upon deployment. \n\n:::\n\n::: requirements\n\n1. ClientCode node from the [introspection](https://flows.nodered.org/node/@gregoriusrippenstein/node-red-contrib-introspection) node package.\n\n:::\n\n::: background\n\nThanks to [@TotallyInformation](https://discourse.nodered.org/t/automatic-flow-backups-to-github/81238/2) for pointing out that there is an event triggered on deployment.\n\nNode-RED is structured as a client/server architecture - the server is responsible for executing the flow designed in the client, the client being the browser. Once a flow is deployed, the server replaces its existing code with the new flow. Once this deployment has completed, an event is triggered in the frontend. \n\nThis flow captures that event and allows other things to happen - in this case only a debug message. A more interesting flow would be to [trigger a backup to GitHub](https://flowhub.org/f/c9abaaed2623d0fb) after deployment.\n\n:::\n\n::: explanation\n\nThe <a class=\"ahl-group-only\" data-ids=\"c08516453b04ddf1\">first group</a> sets up the deployment listener while the <a class=\"ahl-group-only\" data-ids=\"cfbdb45ff737c471\">second group</a> allows triggering deployment via a message.\n\nSince a client-side listener needs to be installed, the <a class=\"ahl-node-only\" data-ids=\"463c51a486c3925c\">setup inject</a> needs to be triggered once to install that listener in the browser. The code in the <a class=\"ahl-node-only\" data-ids=\"5932a19455e61097\">ClientCode node</a> ensures that the listener is only installed once:\n\n```javascript\nvar lstnName = \"deployListener\" + nodeid;\n\nif (payload == \"setup\") {\n    if (!window[lstnName]) {\n        window[lstnName] = (e) => {\n            node.send({\n                payload: \"deploy:done\"\n            })\n        }\n        RED.events.on('deploy', window[lstnName]);\n\n        RED.notify(\"Deploy listener setup\", {\n            type: \"success\",\n            timeout: 2500,\n            id: nodeid\n        })\n    } else {\n        RED.notify(\"Deploy listener already set up\", {\n            type: \"warning\",\n            timeout: 2500,\n            id: nodeid\n        })\n    }\n}\n\n// Remove listener if required\n\nif (payload == \"remove\") {\n    if (window[lstnName]) {\n        RED.events.off('deploy', window[lstnName]);\n        window[lstnName] = undefined;\n        \n        RED.notify(\"Deploy listener removed\", {\n            type: \"success\",\n            timeout: 2500,\n            id: nodeid\n        })        \n    } else {\n        RED.notify(\"No Deploy listener defined\", {\n            type: \"warning\",\n            timeout: 2500,\n            id: nodeid\n        })        \n    }\n}\n```\n\nOnce the listener has been installed, it triggers an message each time an deployment completes.\n\nThe <a class=\"ahl-group-only\" data-ids=\"cfbdb45ff737c471\">second group</a> demonstrates how to automate a deployment in the frontend. The <a class=\"ahl-node-only\" data-ids=\"6fe6f10605b8bfc4\">invoke deployment inject node</a> can be triggered via a message from the server. So that [flows dynamically created](https://flowhub.org/f/119a019d22344192) can be deployed automagically.\n\nConnecting the two flows together won't cause an endless loop of deployments, a deploy event is only triggered if the flow did change.\n\n\n","env":[]},{"id":"c08516453b04ddf1","type":"group","z":"54b1b4c46e18fb23","name":"frontend deploy listener","style":{"label":true},"nodes":["5932a19455e61097","843b742c78467c95","463c51a486c3925c","73ef2fd9a060b1c9"],"x":639,"y":456,"w":974,"h":268},{"id":"cfbdb45ff737c471","type":"group","z":"54b1b4c46e18fb23","name":"trigger deployment","style":{"label":true},"nodes":["6fe6f10605b8bfc4","04a7d1e0caf0e6b0"],"x":640,"y":784,"w":605,"h":148},{"id":"5932a19455e61097","type":"ClientCode","z":"54b1b4c46e18fb23","g":"c08516453b04ddf1","name":"[Events] On Deploy","clientcode":"// Ensure that the event listener is only \n// set once.\n\nvar lstnName = \"deployListener\" + nodeid;\n\nif (payload == \"setup\") {\n    if (!window[lstnName]) {\n        window[lstnName] = (e) => {\n            node.send({\n                payload: \"deploy:done\"\n            })\n        }\n        RED.events.on('deploy', window[lstnName]);\n\n        RED.notify(\"Deploy listener setup\", {\n            type: \"success\",\n            timeout: 2500,\n            id: nodeid\n        })\n    } else {\n        RED.notify(\"Deploy listener already set up\", {\n            type: \"warning\",\n            timeout: 2500,\n            id: nodeid\n        })\n    }\n}\n\n// Remove listener if required\n\nif (payload == \"remove\") {\n    if (window[lstnName]) {\n        RED.events.off('deploy', window[lstnName]);\n        window[lstnName] = undefined;\n        \n        RED.notify(\"Deploy listener removed\", {\n            type: \"success\",\n            timeout: 2500,\n            id: nodeid\n        })        \n    } else {\n        RED.notify(\"No Deploy listener defined\", {\n            type: \"warning\",\n            timeout: 2500,\n            id: nodeid\n        })        \n    }\n}","format":"javascript","x":1105,"y":591,"wires":[["843b742c78467c95"]]},{"id":"843b742c78467c95","type":"debug","z":"54b1b4c46e18fb23","g":"c08516453b04ddf1","name":"message when deployed","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1457,"y":516,"wires":[]},{"id":"463c51a486c3925c","type":"inject","z":"54b1b4c46e18fb23","g":"c08516453b04ddf1","name":"setup event listener","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"setup","payloadType":"str","x":785,"y":497,"wires":[["5932a19455e61097"]]},{"id":"73ef2fd9a060b1c9","type":"inject","z":"54b1b4c46e18fb23","g":"c08516453b04ddf1","name":"remove event listener","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"remove","payloadType":"str","x":786,"y":683,"wires":[["5932a19455e61097"]]},{"id":"6fe6f10605b8bfc4","type":"ClientCode","z":"54b1b4c46e18fb23","g":"cfbdb45ff737c471","name":"invoke deployment","clientcode":"RED.actions.invoke(\"core:deploy-flows\")","format":"javascript","x":1129,"y":891,"wires":[[]]},{"id":"04a7d1e0caf0e6b0","type":"inject","z":"54b1b4c46e18fb23","g":"cfbdb45ff737c471","name":"Trigger deployment","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":776,"y":825,"wires":[["6fe6f10605b8bfc4"]]}]