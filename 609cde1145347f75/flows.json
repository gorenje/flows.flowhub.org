[{"id":"609cde1145347f75","type":"tab","label":"[DP] Simulating network storage","disabled":false,"info":"::: aim\n\nStore state in the network as a packet loop.\n\n:::\n\n::: background\n\nAn idea that I once had using Erlang: store data in the network by pinging data packets back and forth, updating the state when needed. \n\nPerhaps not the best way to store state but on the other hand, perhaps useful in some situations.\n\nCan this work in Node-RED? [Will it Blend](https://en.wikipedia.org/wiki/Will_It_Blend%3F), lets find out!\n\n:::\n<!--\n// [] 609cde1145347f75 [tab] \"[DP] Network storage\"\n// [] d27a6a6f8a72a91f [group] \"data loop\"\n// [] d026110695924c2c [group] \"external actions\"\n// [] d4efb7d2a92be691 [group] \"wait for two msg objects\"\n// [] 14bcf3c31aa00aa0 [junction] \"\"\n// [] c4b317f4908446b6 [function] \"cmd central\"\n// [] b15dcaad9372f864 [function] \"sync on latest\"\n// [] 2704955782315293 [inject] \"status every second\"\n// [] 9e4bef46921173a9 [function] \"action handler\"\n// [] d9cdeb310e734218 [debug] \"msg counter\"\n// [] 9d7bbfeff82863d2 [inject] \"init data loop\"\n// [] d87457356f4d2550 [delay] \"\"\n// [] 6834e45bb85467a2 [join] \"\"\n// [] 9e7d6493428bf22a [join] \"\"\n// [] 19a60b563c7342f5 [debug] \"current value\"\n// [] 4344706ab7d22787 [inject] \"random &#39;dec&#39;\"\n// [] 1b9f87b74df2e8e5 [inject] \"random &#39;inc&#39;\"\n// [] ece8bcad28704417 [join] \"\"\n// [] 330c6aa40a041f97 [join] \"\"\n// [] 798126a5186f8c6e [link out] \"link out 11\"\n// [] e880ec830e7d94eb [link in] \"link in 1\"\n// [] b41024b2cee48e75 [inject] \"reset every 60 seconds\"\n// [] 3c6e084b8caf68ec [join] \"\"\n// [] 6322d78a22c44775 [delay] \"\"\n// [] 5305fb1048320d77 [delay] \"\"\n// [] f0bae53e3bedb599 [debug] \"value on reset\"\n-->\n\n\n::: explanation\n\nThis flow does indeed store state without using node, global or flow context. It simply sends a msg object in a loop, updating as needed. All that is maintained is a simple counter that can be incremented, decremented or reset to zero. There aren't gigabytes of data being maintained in this flow.\n\nStarting at the <a class=\"ahl-group-only\" data-ids=\"d4efb7d2a92be691\">join nodes</a> which are used to capture exactly two msg objects, there is no time out. Two objects are necessary since one contains the state and the other contains the command to be applied to the state msg. These joins are being constantly fed by the <a class=\"ahl-group-only\" data-ids=\"d27a6a6f8a72a91f\">data loop group</a> via the <a class=\"ahl-link-node\" data-ids=\"e880ec830e7d94eb,14bcf3c31aa00aa0,14bcf3c31aa00aa0,6834e45bb85467a2,14bcf3c31aa00aa0,ece8bcad28704417,14bcf3c31aa00aa0,330c6aa40a041f97,14bcf3c31aa00aa0,3c6e084b8caf68ec\">link in node</a>. This means that the <a class=\"ahl-node-only\" data-ids=\"9e4bef46921173a9\">action handler</a> *always* receives two messages but these two message might or might not contain a command message. The two messages are, most of the time, simply the same state msg from the <a class=\"ahl-group-only\" data-ids=\"d27a6a6f8a72a91f\">data loop</a>.\n\nThe  <a class=\"ahl-link-node all-to-last\" data-ids=\"6834e45bb85467a2,ece8bcad28704417,330c6aa40a041f97,3c6e084b8caf68ec,9e4bef46921173a9\">action handler</a> does nothing if the msg that it receives contains two state messages. If there is a command message and a state message, it passes the command along with the state payload, as a single message, to the <a class=\"ahl-link-node\" data-ids=\"9e4bef46921173a9,c4b317f4908446b6\">cmd central node</a>. What that cmd central node does is execute the command, either: `dec`, `inc` or `reset`. The entire data loop is only circulating a `counter` which is incremented, decremented or reset to zero. \n\nAs soon as a command message is sent into the data loop, there are two messages circulating: the original state and the updated state. The <a class=\"ahl-node-only\" data-ids=\"9e7d6493428bf22a\">join node in the data loop</a> waits for two message but it has a timeout. This means that when two messages become availabe, the <a class=\"ahl-node-only\" data-ids=\"b15dcaad9372f864\">sync on latest</a> node picks the most up to date state and sends that state to <a class=\"ahl-link-node first-to-all\" data-ids=\"b15dcaad9372f864,798126a5186f8c6e,d9cdeb310e734218,c4b317f4908446b6\">all of its connections</a>.\n\nHow does the <a class=\"ahl-node-only\" data-ids=\"b15dcaad9372f864\">sync on latest</a> node know which is the most current state? The <a class=\"ahl-node-only\" data-ids=\"c4b317f4908446b6\">cmd central node</a> sets timestamps on the messages to compare the state messages. The youngest state is the correct state.\n\nThe data loop is initiated by the <a class=\"ahl-node-only\" data-ids=\"9d7bbfeff82863d2\">inject node</a> that fires at the start of the flow deployment. The <a class=\"ahl-node-only\" data-ids=\"d87457356f4d2550\">delay node</a> ensures that Node-RED does not overheat from a too tighter message loop.\n\nThe interface to this flow is defined by <a class=\"ahl-group-only\" data-ids=\"d026110695924c2c\">external actions</a> group, there are four commands that can be used: `status`, `inc`, `dec` and `reset`. All are set via the msg topic attribute.\n\n:::\n\n::: discussion\n\nWhether this is a sensible thing to be doing in Node-RED is debatable. For me it was an attempt to view Node-RED as a networking tool that sends packets through a network. After all, packets in networks are also just messages.\n\nThe Raspberry PI upon which this flow is running does not seem to care much, so it does not seem to cause too much processor overhead. But it would be interesting to know whether this is usable for production applications.\n\n:::","env":[]},{"id":"d27a6a6f8a72a91f","type":"group","z":"609cde1145347f75","name":"data loop","style":{"label":true},"nodes":["c4b317f4908446b6","b15dcaad9372f864","d9cdeb310e734218","9d7bbfeff82863d2","d87457356f4d2550","9e7d6493428bf22a","798126a5186f8c6e"],"x":752,"y":126,"w":693,"h":328},{"id":"d026110695924c2c","type":"group","z":"609cde1145347f75","name":"external actions","style":{"label":true},"nodes":["2704955782315293","4344706ab7d22787","1b9f87b74df2e8e5","b41024b2cee48e75"],"x":13,"y":612.5,"w":292,"h":285.5},{"id":"d4efb7d2a92be691","type":"group","z":"609cde1145347f75","name":"wait for two msg objects","style":{"label":true},"nodes":["6834e45bb85467a2","ece8bcad28704417","330c6aa40a041f97","3c6e084b8caf68ec"],"x":565,"y":612.5,"w":162,"h":285.5},{"id":"14bcf3c31aa00aa0","type":"junction","z":"609cde1145347f75","x":378.9184002876282,"y":417.71429443359375,"wires":[["6834e45bb85467a2","ece8bcad28704417","330c6aa40a041f97","3c6e084b8caf68ec"]]},{"id":"c4b317f4908446b6","type":"function","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"cmd central","func":"if ( !msg.payload ) {\n    msg.payload = {\n        counter: 0,\n        cmd: \"\",\n        tstamp: new Date().getTime()\n    }\n    return msg;\n}\n\nif ( msg.payload && msg.payload.cmd == \"inc\") {\n    msg.payload.counter += 1;\n    msg.payload.cmd = \"\"\n    msg.payload.tstamp = new Date().getTime()\n}\n\nif (msg.payload && msg.payload.cmd == \"dec\") {\n    msg.payload.counter -= 1\n    msg.payload.cmd = \"\"\n    msg.payload.tstamp = new Date().getTime()\n}\n\nif (msg.payload && msg.payload.cmd == \"reset\") {\n    msg.payload.counter = 0;\n    msg.payload.cmd = \"\"\n    msg.payload.tstamp = new Date().getTime()\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1136,"y":412.5,"wires":[["d87457356f4d2550"]]},{"id":"b15dcaad9372f864","type":"function","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"sync on latest","func":"if ( msg.payload.length == 1 ) {\n    node.send({ payload: msg.payload[0] })\n}\n\nif ( msg.payload.length == 2 ) {\n    if (msg.payload[0].tstamp > msg.payload[1].tstamp) {\n        node.send({ payload: msg.payload[0] })\n    } else {\n        node.send({ payload: msg.payload[1] })\n    }\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":907,"y":284.5,"wires":[["c4b317f4908446b6","798126a5186f8c6e","d9cdeb310e734218"]]},{"id":"2704955782315293","type":"inject","z":"609cde1145347f75","g":"d026110695924c2c","name":"status every second","props":[{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":"1","topic":"status","x":159,"y":787,"wires":[["330c6aa40a041f97"]]},{"id":"9e4bef46921173a9","type":"function","z":"609cde1145347f75","name":"action handler","func":"var retTopicAndData = (pyload) => {\n    if (msg.payload[0].topic != undefined && msg.payload[1].payload && msg.payload[1].payload.counter != undefined){\n        return [msg.payload[0].topic, msg.payload[1].payload];\n    }\n    if (msg.payload[1].topic != undefined && msg.payload[0].payload && msg.payload[0].payload.counter != undefined) {\n        return [msg.payload[1].topic, msg.payload[0].payload];\n    }\n    return undefined\n};\n\nif ( msg.payload.length > 1 ) {\n    var indt = retTopicAndData(msg.payload.length);\n    if ( indt == undefined) { return }\n\n    if (indt[0] == \"dec\" || indt[0] == \"inc\") {\n        return [{\n            payload: {\n                ...indt[1],\n                cmd: indt[0]\n            }\n        }, undefined, undefined]\n    }\n    \n    if (indt[0] == \"status\" ) {\n        return [undefined, { payload: indt[1].counter }, undefined]\n    }\n\n    if (indt[0] == \"reset\") {\n        return [{\n            payload: {\n                ...indt[1],\n                cmd: indt[0]\n            }\n        }, undefined, { payload: indt[1].counter }]\n    }\n}\n","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":749,"wires":[["c4b317f4908446b6"],["19a60b563c7342f5"],["f0bae53e3bedb599"]],"outputLabels":["command","current value","value upon reset"]},{"id":"d9cdeb310e734218","type":"debug","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"msg counter","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"","statusType":"counter","x":1145,"y":314,"wires":[]},{"id":"9d7bbfeff82863d2","type":"inject","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"init data loop","props":[],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","x":868,"y":413,"wires":[["c4b317f4908446b6"]]},{"id":"d87457356f4d2550","type":"delay","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"","pauseType":"delay","timeout":"50","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1349,"y":277,"wires":[["9e7d6493428bf22a"]]},{"id":"6834e45bb85467a2","type":"join","z":"609cde1145347f75","g":"d4efb7d2a92be691","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":641,"y":653.5,"wires":[["9e4bef46921173a9"]]},{"id":"9e7d6493428bf22a","type":"join","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"0.2","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1127,"y":167,"wires":[["b15dcaad9372f864"]]},{"id":"19a60b563c7342f5","type":"debug","z":"609cde1145347f75","name":"current value","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1187,"y":723,"wires":[]},{"id":"4344706ab7d22787","type":"inject","z":"609cde1145347f75","g":"d026110695924c2c","name":"random 'dec'","props":[{"p":"topic","vt":"str"}],"repeat":"0.5","crontab":"","once":true,"onceDelay":"0.5","topic":"dec","x":139,"y":721.5,"wires":[["5305fb1048320d77"]]},{"id":"1b9f87b74df2e8e5","type":"inject","z":"609cde1145347f75","g":"d026110695924c2c","name":"random 'inc'","props":[{"p":"topic","vt":"str"}],"repeat":"0.5","crontab":"","once":true,"onceDelay":"0.5","topic":"inc","x":139,"y":653.5,"wires":[["6322d78a22c44775"]]},{"id":"ece8bcad28704417","type":"join","z":"609cde1145347f75","g":"d4efb7d2a92be691","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":641,"y":721.5,"wires":[["9e4bef46921173a9"]]},{"id":"330c6aa40a041f97","type":"join","z":"609cde1145347f75","g":"d4efb7d2a92be691","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":641,"y":787,"wires":[["9e4bef46921173a9"]]},{"id":"798126a5186f8c6e","type":"link out","z":"609cde1145347f75","g":"d27a6a6f8a72a91f","name":"link out 11","mode":"link","links":["e880ec830e7d94eb"],"x":1090,"y":262.5,"wires":[]},{"id":"e880ec830e7d94eb","type":"link in","z":"609cde1145347f75","name":"link in 1","links":["798126a5186f8c6e"],"x":250.91839599609375,"y":417.71429443359375,"wires":[["14bcf3c31aa00aa0"]]},{"id":"b41024b2cee48e75","type":"inject","z":"609cde1145347f75","g":"d026110695924c2c","name":"reset every 60 seconds","props":[{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":false,"onceDelay":"1","topic":"reset","x":169,"y":857,"wires":[["3c6e084b8caf68ec"]]},{"id":"3c6e084b8caf68ec","type":"join","z":"609cde1145347f75","g":"d4efb7d2a92be691","name":"","mode":"custom","build":"array","property":"","propertyType":"full","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":641,"y":857,"wires":[["9e4bef46921173a9"]]},{"id":"6322d78a22c44775","type":"delay","z":"609cde1145347f75","name":"","pauseType":"random","timeout":"100","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"100","randomLast":"2000","randomUnits":"milliseconds","drop":false,"allowrate":false,"outputs":1,"x":400,"y":653.5,"wires":[["6834e45bb85467a2"]]},{"id":"5305fb1048320d77","type":"delay","z":"609cde1145347f75","name":"","pauseType":"random","timeout":"50","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"100","randomLast":"2000","randomUnits":"milliseconds","drop":false,"allowrate":false,"outputs":1,"x":399,"y":721.5,"wires":[["ece8bcad28704417"]]},{"id":"f0bae53e3bedb599","type":"debug","z":"609cde1145347f75","name":"value on reset","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1197,"y":782,"wires":[]}]